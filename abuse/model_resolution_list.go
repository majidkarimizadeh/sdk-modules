/*
Leaseweb API for Abuse Handling

This API provides ways to manage the abuse reports you might receive from Leaseweb. To use this API, please request access via your account manager and/or compliance officer. **LIMITED ACCESS** 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package abuse

import (
	"encoding/json"
	"fmt"
)

// checks if the ResolutionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResolutionList{}

// ResolutionList struct for ResolutionList
type ResolutionList struct {
	// The resolution ID to be used when calling /resolve.
	Id string `json:"id"`
	// The actual text the report will be resolved with when resolving with this resolution.
	Description string `json:"description"`
	AdditionalProperties map[string]interface{}
}

type _ResolutionList ResolutionList

// NewResolutionList instantiates a new ResolutionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolutionList(id string, description string) *ResolutionList {
	this := ResolutionList{}
	this.Id = id
	this.Description = description
	return &this
}

// NewResolutionListWithDefaults instantiates a new ResolutionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolutionListWithDefaults() *ResolutionList {
	this := ResolutionList{}
	return &this
}

// GetId returns the Id field value
func (o *ResolutionList) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResolutionList) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResolutionList) SetId(v string) {
	o.Id = v
}

// GetDescription returns the Description field value
func (o *ResolutionList) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ResolutionList) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ResolutionList) SetDescription(v string) {
	o.Description = v
}

func (o ResolutionList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResolutionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["description"] = o.Description

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResolutionList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResolutionList := _ResolutionList{}

	err = json.Unmarshal(data, &varResolutionList)

	if err != nil {
		return err
	}

	*o = ResolutionList(varResolutionList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResolutionList struct {
	value *ResolutionList
	isSet bool
}

func (v NullableResolutionList) Get() *ResolutionList {
	return v.value
}

func (v *NullableResolutionList) Set(val *ResolutionList) {
	v.value = val
	v.isSet = true
}

func (v NullableResolutionList) IsSet() bool {
	return v.isSet
}

func (v *NullableResolutionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolutionList(val *ResolutionList) *NullableResolutionList {
	return &NullableResolutionList{value: val, isSet: true}
}

func (v NullableResolutionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolutionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


