/*
Leaseweb API for Abuse Handling

This API provides ways to manage the abuse reports you might receive from Leaseweb. To use this API, please request access via your account manager and/or compliance officer. **LIMITED ACCESS** 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package abuse

import (
	"encoding/json"
)

// checks if the Report type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Report{}

// Report struct for Report
type Report struct {
	// The ID of the report.
	Id *string `json:"id,omitempty"`
	// The subject of the  report.
	Subject *string `json:"subject,omitempty"`
	// The current status of the report.
	Status *string `json:"status,omitempty"`
	// The date and time the report was reported at.
	ReportedAt *string `json:"reportedAt,omitempty"`
	// The date and time the report was last updated.
	UpdatedAt *string `json:"updatedAt,omitempty"`
	// Due to compliance, 'REDACTED_FOR_PRIVACY' is the default value.
	Notifier *string `json:"notifier,omitempty"`
	// The customer ID of your account.
	CustomerId *string `json:"customerId,omitempty"`
	// The legal entity ID of the customer account.
	LegalEntityId *string `json:"legalEntityId,omitempty"`
	// The deadline before when the report needs to be resolved.
	Deadline *string `json:"deadline,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Report Report

// NewReport instantiates a new Report object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReport() *Report {
	this := Report{}
	var notifier string = "REDACTED_FOR_PRIVACY"
	this.Notifier = &notifier
	return &this
}

// NewReportWithDefaults instantiates a new Report object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportWithDefaults() *Report {
	this := Report{}
	var notifier string = "REDACTED_FOR_PRIVACY"
	this.Notifier = &notifier
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Report) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Report) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Report) SetId(v string) {
	o.Id = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *Report) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *Report) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *Report) SetSubject(v string) {
	o.Subject = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Report) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Report) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Report) SetStatus(v string) {
	o.Status = &v
}

// GetReportedAt returns the ReportedAt field value if set, zero value otherwise.
func (o *Report) GetReportedAt() string {
	if o == nil || IsNil(o.ReportedAt) {
		var ret string
		return ret
	}
	return *o.ReportedAt
}

// GetReportedAtOk returns a tuple with the ReportedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetReportedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ReportedAt) {
		return nil, false
	}
	return o.ReportedAt, true
}

// HasReportedAt returns a boolean if a field has been set.
func (o *Report) HasReportedAt() bool {
	if o != nil && !IsNil(o.ReportedAt) {
		return true
	}

	return false
}

// SetReportedAt gets a reference to the given string and assigns it to the ReportedAt field.
func (o *Report) SetReportedAt(v string) {
	o.ReportedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Report) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Report) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *Report) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetNotifier returns the Notifier field value if set, zero value otherwise.
func (o *Report) GetNotifier() string {
	if o == nil || IsNil(o.Notifier) {
		var ret string
		return ret
	}
	return *o.Notifier
}

// GetNotifierOk returns a tuple with the Notifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetNotifierOk() (*string, bool) {
	if o == nil || IsNil(o.Notifier) {
		return nil, false
	}
	return o.Notifier, true
}

// HasNotifier returns a boolean if a field has been set.
func (o *Report) HasNotifier() bool {
	if o != nil && !IsNil(o.Notifier) {
		return true
	}

	return false
}

// SetNotifier gets a reference to the given string and assigns it to the Notifier field.
func (o *Report) SetNotifier(v string) {
	o.Notifier = &v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *Report) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *Report) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *Report) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetLegalEntityId returns the LegalEntityId field value if set, zero value otherwise.
func (o *Report) GetLegalEntityId() string {
	if o == nil || IsNil(o.LegalEntityId) {
		var ret string
		return ret
	}
	return *o.LegalEntityId
}

// GetLegalEntityIdOk returns a tuple with the LegalEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetLegalEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.LegalEntityId) {
		return nil, false
	}
	return o.LegalEntityId, true
}

// HasLegalEntityId returns a boolean if a field has been set.
func (o *Report) HasLegalEntityId() bool {
	if o != nil && !IsNil(o.LegalEntityId) {
		return true
	}

	return false
}

// SetLegalEntityId gets a reference to the given string and assigns it to the LegalEntityId field.
func (o *Report) SetLegalEntityId(v string) {
	o.LegalEntityId = &v
}

// GetDeadline returns the Deadline field value if set, zero value otherwise.
func (o *Report) GetDeadline() string {
	if o == nil || IsNil(o.Deadline) {
		var ret string
		return ret
	}
	return *o.Deadline
}

// GetDeadlineOk returns a tuple with the Deadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetDeadlineOk() (*string, bool) {
	if o == nil || IsNil(o.Deadline) {
		return nil, false
	}
	return o.Deadline, true
}

// HasDeadline returns a boolean if a field has been set.
func (o *Report) HasDeadline() bool {
	if o != nil && !IsNil(o.Deadline) {
		return true
	}

	return false
}

// SetDeadline gets a reference to the given string and assigns it to the Deadline field.
func (o *Report) SetDeadline(v string) {
	o.Deadline = &v
}

func (o Report) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Report) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ReportedAt) {
		toSerialize["reportedAt"] = o.ReportedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Notifier) {
		toSerialize["notifier"] = o.Notifier
	}
	if !IsNil(o.CustomerId) {
		toSerialize["customerId"] = o.CustomerId
	}
	if !IsNil(o.LegalEntityId) {
		toSerialize["legalEntityId"] = o.LegalEntityId
	}
	if !IsNil(o.Deadline) {
		toSerialize["deadline"] = o.Deadline
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Report) UnmarshalJSON(data []byte) (err error) {
	varReport := _Report{}

	err = json.Unmarshal(data, &varReport)

	if err != nil {
		return err
	}

	*o = Report(varReport)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "subject")
		delete(additionalProperties, "status")
		delete(additionalProperties, "reportedAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "notifier")
		delete(additionalProperties, "customerId")
		delete(additionalProperties, "legalEntityId")
		delete(additionalProperties, "deadline")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReport struct {
	value *Report
	isSet bool
}

func (v NullableReport) Get() *Report {
	return v.value
}

func (v *NullableReport) Set(val *Report) {
	v.value = val
	v.isSet = true
}

func (v NullableReport) IsSet() bool {
	return v.isSet
}

func (v *NullableReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReport(val *Report) *NullableReport {
	return &NullableReport{value: val, isSet: true}
}

func (v NullableReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


