/*
Leaseweb API for Abuse Handling

This API provides ways to manage the abuse reports you might receive from Leaseweb. To use this API, please request access via your account manager and/or compliance officer. **LIMITED ACCESS** 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package abuse

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateReportMessageOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateReportMessageOpts{}

// CreateReportMessageOpts struct for CreateReportMessageOpts
type CreateReportMessageOpts struct {
	// Plain text body of the message, for newlines use ' '.
	Body string `json:"body"`
	AdditionalProperties map[string]interface{}
}

type _CreateReportMessageOpts CreateReportMessageOpts

// NewCreateReportMessageOpts instantiates a new CreateReportMessageOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateReportMessageOpts(body string) *CreateReportMessageOpts {
	this := CreateReportMessageOpts{}
	this.Body = body
	return &this
}

// NewCreateReportMessageOptsWithDefaults instantiates a new CreateReportMessageOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateReportMessageOptsWithDefaults() *CreateReportMessageOpts {
	this := CreateReportMessageOpts{}
	return &this
}

// GetBody returns the Body field value
func (o *CreateReportMessageOpts) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *CreateReportMessageOpts) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *CreateReportMessageOpts) SetBody(v string) {
	o.Body = v
}

func (o CreateReportMessageOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateReportMessageOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["body"] = o.Body

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateReportMessageOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"body",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateReportMessageOpts := _CreateReportMessageOpts{}

	err = json.Unmarshal(data, &varCreateReportMessageOpts)

	if err != nil {
		return err
	}

	*o = CreateReportMessageOpts(varCreateReportMessageOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "body")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateReportMessageOpts struct {
	value *CreateReportMessageOpts
	isSet bool
}

func (v NullableCreateReportMessageOpts) Get() *CreateReportMessageOpts {
	return v.value
}

func (v *NullableCreateReportMessageOpts) Set(val *CreateReportMessageOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateReportMessageOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateReportMessageOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateReportMessageOpts(val *CreateReportMessageOpts) *NullableCreateReportMessageOpts {
	return &NullableCreateReportMessageOpts{value: val, isSet: true}
}

func (v NullableCreateReportMessageOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateReportMessageOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


