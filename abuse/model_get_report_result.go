/*
Leaseweb API for Abuse Handling

This API provides ways to manage the abuse reports you might receive from Leaseweb. To use this API, please request access via your account manager and/or compliance officer. **LIMITED ACCESS** 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package abuse

import (
	"encoding/json"
)

// checks if the GetReportResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetReportResult{}

// GetReportResult struct for GetReportResult
type GetReportResult struct {
	// The ID of the abuse report.
	Id *string `json:"id,omitempty"`
	// The subject of the report.
	Subject *string `json:"subject,omitempty"`
	// The current status of the report.
	Status *string `json:"status,omitempty"`
	// The abuse type of the report.
	AbuseType *string `json:"abuseType,omitempty"`
	// When the report status is open, this indicates if the report was reopened.
	Reopened *bool `json:"reopened,omitempty"`
	// The date and time the report was reported at.
	ReportedAt *string `json:"reportedAt,omitempty"`
	// When the report was updated last.
	UpdatedAt *string `json:"updatedAt,omitempty"`
	// The email address of the notifier who reported the abuse.
	Notifier *string `json:"notifier,omitempty"`
	// The customer ID of your account.
	CustomerId *string `json:"customerId,omitempty"`
	// The legal entity ID of the customer account.
	LegalEntityId *string `json:"legalEntityId,omitempty"`
	// The report body content.
	Body *string `json:"body,omitempty"`
	// The Deadline before when the report needs to be resolved.
	Deadline *string `json:"deadline,omitempty"`
	// The IP-addresses detected in the report body.
	DetectedIpAddresses []string `json:"detectedIpAddresses,omitempty"`
	// The domains detected in the report body.
	DetectedDomainNames []DetectedDomainNameList `json:"detectedDomainNames,omitempty"`
	// All the files attached to the report.
	Attachments []Attachment `json:"attachments,omitempty"`
	// Total amount of messages in the report.
	TotalMessagesCount *int32 `json:"totalMessagesCount,omitempty"`
	// Array of the last 5 messages in the report.
	LatestMessages []Message `json:"latestMessages,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetReportResult GetReportResult

// NewGetReportResult instantiates a new GetReportResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetReportResult() *GetReportResult {
	this := GetReportResult{}
	return &this
}

// NewGetReportResultWithDefaults instantiates a new GetReportResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetReportResultWithDefaults() *GetReportResult {
	this := GetReportResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetReportResult) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetReportResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GetReportResult) SetId(v string) {
	o.Id = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *GetReportResult) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *GetReportResult) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *GetReportResult) SetSubject(v string) {
	o.Subject = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GetReportResult) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GetReportResult) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *GetReportResult) SetStatus(v string) {
	o.Status = &v
}

// GetAbuseType returns the AbuseType field value if set, zero value otherwise.
func (o *GetReportResult) GetAbuseType() string {
	if o == nil || IsNil(o.AbuseType) {
		var ret string
		return ret
	}
	return *o.AbuseType
}

// GetAbuseTypeOk returns a tuple with the AbuseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetAbuseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AbuseType) {
		return nil, false
	}
	return o.AbuseType, true
}

// HasAbuseType returns a boolean if a field has been set.
func (o *GetReportResult) HasAbuseType() bool {
	if o != nil && !IsNil(o.AbuseType) {
		return true
	}

	return false
}

// SetAbuseType gets a reference to the given string and assigns it to the AbuseType field.
func (o *GetReportResult) SetAbuseType(v string) {
	o.AbuseType = &v
}

// GetReopened returns the Reopened field value if set, zero value otherwise.
func (o *GetReportResult) GetReopened() bool {
	if o == nil || IsNil(o.Reopened) {
		var ret bool
		return ret
	}
	return *o.Reopened
}

// GetReopenedOk returns a tuple with the Reopened field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetReopenedOk() (*bool, bool) {
	if o == nil || IsNil(o.Reopened) {
		return nil, false
	}
	return o.Reopened, true
}

// HasReopened returns a boolean if a field has been set.
func (o *GetReportResult) HasReopened() bool {
	if o != nil && !IsNil(o.Reopened) {
		return true
	}

	return false
}

// SetReopened gets a reference to the given bool and assigns it to the Reopened field.
func (o *GetReportResult) SetReopened(v bool) {
	o.Reopened = &v
}

// GetReportedAt returns the ReportedAt field value if set, zero value otherwise.
func (o *GetReportResult) GetReportedAt() string {
	if o == nil || IsNil(o.ReportedAt) {
		var ret string
		return ret
	}
	return *o.ReportedAt
}

// GetReportedAtOk returns a tuple with the ReportedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetReportedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ReportedAt) {
		return nil, false
	}
	return o.ReportedAt, true
}

// HasReportedAt returns a boolean if a field has been set.
func (o *GetReportResult) HasReportedAt() bool {
	if o != nil && !IsNil(o.ReportedAt) {
		return true
	}

	return false
}

// SetReportedAt gets a reference to the given string and assigns it to the ReportedAt field.
func (o *GetReportResult) SetReportedAt(v string) {
	o.ReportedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *GetReportResult) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *GetReportResult) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *GetReportResult) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetNotifier returns the Notifier field value if set, zero value otherwise.
func (o *GetReportResult) GetNotifier() string {
	if o == nil || IsNil(o.Notifier) {
		var ret string
		return ret
	}
	return *o.Notifier
}

// GetNotifierOk returns a tuple with the Notifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetNotifierOk() (*string, bool) {
	if o == nil || IsNil(o.Notifier) {
		return nil, false
	}
	return o.Notifier, true
}

// HasNotifier returns a boolean if a field has been set.
func (o *GetReportResult) HasNotifier() bool {
	if o != nil && !IsNil(o.Notifier) {
		return true
	}

	return false
}

// SetNotifier gets a reference to the given string and assigns it to the Notifier field.
func (o *GetReportResult) SetNotifier(v string) {
	o.Notifier = &v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *GetReportResult) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *GetReportResult) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *GetReportResult) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetLegalEntityId returns the LegalEntityId field value if set, zero value otherwise.
func (o *GetReportResult) GetLegalEntityId() string {
	if o == nil || IsNil(o.LegalEntityId) {
		var ret string
		return ret
	}
	return *o.LegalEntityId
}

// GetLegalEntityIdOk returns a tuple with the LegalEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetLegalEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.LegalEntityId) {
		return nil, false
	}
	return o.LegalEntityId, true
}

// HasLegalEntityId returns a boolean if a field has been set.
func (o *GetReportResult) HasLegalEntityId() bool {
	if o != nil && !IsNil(o.LegalEntityId) {
		return true
	}

	return false
}

// SetLegalEntityId gets a reference to the given string and assigns it to the LegalEntityId field.
func (o *GetReportResult) SetLegalEntityId(v string) {
	o.LegalEntityId = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *GetReportResult) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *GetReportResult) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *GetReportResult) SetBody(v string) {
	o.Body = &v
}

// GetDeadline returns the Deadline field value if set, zero value otherwise.
func (o *GetReportResult) GetDeadline() string {
	if o == nil || IsNil(o.Deadline) {
		var ret string
		return ret
	}
	return *o.Deadline
}

// GetDeadlineOk returns a tuple with the Deadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetDeadlineOk() (*string, bool) {
	if o == nil || IsNil(o.Deadline) {
		return nil, false
	}
	return o.Deadline, true
}

// HasDeadline returns a boolean if a field has been set.
func (o *GetReportResult) HasDeadline() bool {
	if o != nil && !IsNil(o.Deadline) {
		return true
	}

	return false
}

// SetDeadline gets a reference to the given string and assigns it to the Deadline field.
func (o *GetReportResult) SetDeadline(v string) {
	o.Deadline = &v
}

// GetDetectedIpAddresses returns the DetectedIpAddresses field value if set, zero value otherwise.
func (o *GetReportResult) GetDetectedIpAddresses() []string {
	if o == nil || IsNil(o.DetectedIpAddresses) {
		var ret []string
		return ret
	}
	return o.DetectedIpAddresses
}

// GetDetectedIpAddressesOk returns a tuple with the DetectedIpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetDetectedIpAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.DetectedIpAddresses) {
		return nil, false
	}
	return o.DetectedIpAddresses, true
}

// HasDetectedIpAddresses returns a boolean if a field has been set.
func (o *GetReportResult) HasDetectedIpAddresses() bool {
	if o != nil && !IsNil(o.DetectedIpAddresses) {
		return true
	}

	return false
}

// SetDetectedIpAddresses gets a reference to the given []string and assigns it to the DetectedIpAddresses field.
func (o *GetReportResult) SetDetectedIpAddresses(v []string) {
	o.DetectedIpAddresses = v
}

// GetDetectedDomainNames returns the DetectedDomainNames field value if set, zero value otherwise.
func (o *GetReportResult) GetDetectedDomainNames() []DetectedDomainNameList {
	if o == nil || IsNil(o.DetectedDomainNames) {
		var ret []DetectedDomainNameList
		return ret
	}
	return o.DetectedDomainNames
}

// GetDetectedDomainNamesOk returns a tuple with the DetectedDomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetDetectedDomainNamesOk() ([]DetectedDomainNameList, bool) {
	if o == nil || IsNil(o.DetectedDomainNames) {
		return nil, false
	}
	return o.DetectedDomainNames, true
}

// HasDetectedDomainNames returns a boolean if a field has been set.
func (o *GetReportResult) HasDetectedDomainNames() bool {
	if o != nil && !IsNil(o.DetectedDomainNames) {
		return true
	}

	return false
}

// SetDetectedDomainNames gets a reference to the given []DetectedDomainNameList and assigns it to the DetectedDomainNames field.
func (o *GetReportResult) SetDetectedDomainNames(v []DetectedDomainNameList) {
	o.DetectedDomainNames = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *GetReportResult) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *GetReportResult) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *GetReportResult) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetTotalMessagesCount returns the TotalMessagesCount field value if set, zero value otherwise.
func (o *GetReportResult) GetTotalMessagesCount() int32 {
	if o == nil || IsNil(o.TotalMessagesCount) {
		var ret int32
		return ret
	}
	return *o.TotalMessagesCount
}

// GetTotalMessagesCountOk returns a tuple with the TotalMessagesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetTotalMessagesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalMessagesCount) {
		return nil, false
	}
	return o.TotalMessagesCount, true
}

// HasTotalMessagesCount returns a boolean if a field has been set.
func (o *GetReportResult) HasTotalMessagesCount() bool {
	if o != nil && !IsNil(o.TotalMessagesCount) {
		return true
	}

	return false
}

// SetTotalMessagesCount gets a reference to the given int32 and assigns it to the TotalMessagesCount field.
func (o *GetReportResult) SetTotalMessagesCount(v int32) {
	o.TotalMessagesCount = &v
}

// GetLatestMessages returns the LatestMessages field value if set, zero value otherwise.
func (o *GetReportResult) GetLatestMessages() []Message {
	if o == nil || IsNil(o.LatestMessages) {
		var ret []Message
		return ret
	}
	return o.LatestMessages
}

// GetLatestMessagesOk returns a tuple with the LatestMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReportResult) GetLatestMessagesOk() ([]Message, bool) {
	if o == nil || IsNil(o.LatestMessages) {
		return nil, false
	}
	return o.LatestMessages, true
}

// HasLatestMessages returns a boolean if a field has been set.
func (o *GetReportResult) HasLatestMessages() bool {
	if o != nil && !IsNil(o.LatestMessages) {
		return true
	}

	return false
}

// SetLatestMessages gets a reference to the given []Message and assigns it to the LatestMessages field.
func (o *GetReportResult) SetLatestMessages(v []Message) {
	o.LatestMessages = v
}

func (o GetReportResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetReportResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.AbuseType) {
		toSerialize["abuseType"] = o.AbuseType
	}
	if !IsNil(o.Reopened) {
		toSerialize["reopened"] = o.Reopened
	}
	if !IsNil(o.ReportedAt) {
		toSerialize["reportedAt"] = o.ReportedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Notifier) {
		toSerialize["notifier"] = o.Notifier
	}
	if !IsNil(o.CustomerId) {
		toSerialize["customerId"] = o.CustomerId
	}
	if !IsNil(o.LegalEntityId) {
		toSerialize["legalEntityId"] = o.LegalEntityId
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.Deadline) {
		toSerialize["deadline"] = o.Deadline
	}
	if !IsNil(o.DetectedIpAddresses) {
		toSerialize["detectedIpAddresses"] = o.DetectedIpAddresses
	}
	if !IsNil(o.DetectedDomainNames) {
		toSerialize["detectedDomainNames"] = o.DetectedDomainNames
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.TotalMessagesCount) {
		toSerialize["totalMessagesCount"] = o.TotalMessagesCount
	}
	if !IsNil(o.LatestMessages) {
		toSerialize["latestMessages"] = o.LatestMessages
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetReportResult) UnmarshalJSON(data []byte) (err error) {
	varGetReportResult := _GetReportResult{}

	err = json.Unmarshal(data, &varGetReportResult)

	if err != nil {
		return err
	}

	*o = GetReportResult(varGetReportResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "subject")
		delete(additionalProperties, "status")
		delete(additionalProperties, "abuseType")
		delete(additionalProperties, "reopened")
		delete(additionalProperties, "reportedAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "notifier")
		delete(additionalProperties, "customerId")
		delete(additionalProperties, "legalEntityId")
		delete(additionalProperties, "body")
		delete(additionalProperties, "deadline")
		delete(additionalProperties, "detectedIpAddresses")
		delete(additionalProperties, "detectedDomainNames")
		delete(additionalProperties, "attachments")
		delete(additionalProperties, "totalMessagesCount")
		delete(additionalProperties, "latestMessages")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetReportResult struct {
	value *GetReportResult
	isSet bool
}

func (v NullableGetReportResult) Get() *GetReportResult {
	return v.value
}

func (v *NullableGetReportResult) Set(val *GetReportResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetReportResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetReportResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetReportResult(val *GetReportResult) *NullableGetReportResult {
	return &NullableGetReportResult{value: val, isSet: true}
}

func (v NullableGetReportResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetReportResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


