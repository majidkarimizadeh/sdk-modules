/*
Leaseweb API for Abuse Handling

Testing AbuseAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package abuse

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/majidkarimizadeh/sdk-modules/abuse"
)

func Test_abuse_AbuseAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AbuseAPIService CreateReportMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reportId string

		resp, httpRes, err := apiClient.AbuseAPI.CreateReportMessage(context.Background(), reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AbuseAPIService GetReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reportId string

		resp, httpRes, err := apiClient.AbuseAPI.GetReport(context.Background(), reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AbuseAPIService GetReportAttachmentList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reportId string
		var fileId string

		httpRes, err := apiClient.AbuseAPI.GetReportAttachmentList(context.Background(), reportId, fileId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AbuseAPIService GetReportList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AbuseAPI.GetReportList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AbuseAPIService GetReportMessageAttachmentList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reportId string
		var fileId string

		httpRes, err := apiClient.AbuseAPI.GetReportMessageAttachmentList(context.Background(), reportId, fileId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AbuseAPIService GetReportMessageList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reportId string

		resp, httpRes, err := apiClient.AbuseAPI.GetReportMessageList(context.Background(), reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AbuseAPIService GetReportResolutionList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reportId string

		resp, httpRes, err := apiClient.AbuseAPI.GetReportResolutionList(context.Background(), reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AbuseAPIService ResolveReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reportId string

		httpRes, err := apiClient.AbuseAPI.ResolveReport(context.Background(), reportId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
