/*
Leaseweb API for Abuse Handling

This API provides ways to manage the abuse reports you might receive from Leaseweb. To use this API, please request access via your account manager and/or compliance officer. **LIMITED ACCESS** 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package abuse

import (
	"encoding/json"
	"fmt"
)

// checks if the GetReportResolutionListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetReportResolutionListResult{}

// GetReportResolutionListResult struct for GetReportResolutionListResult
type GetReportResolutionListResult struct {
	// Possible resolutions to resolve this report with.
	Resolutions []ResolutionList `json:"resolutions"`
	// `true`, if any of the IP(s) related to this report are null routed
	IsMessageRequired bool `json:"isMessageRequired"`
	AdditionalProperties map[string]interface{}
}

type _GetReportResolutionListResult GetReportResolutionListResult

// NewGetReportResolutionListResult instantiates a new GetReportResolutionListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetReportResolutionListResult(resolutions []ResolutionList, isMessageRequired bool) *GetReportResolutionListResult {
	this := GetReportResolutionListResult{}
	this.Resolutions = resolutions
	this.IsMessageRequired = isMessageRequired
	return &this
}

// NewGetReportResolutionListResultWithDefaults instantiates a new GetReportResolutionListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetReportResolutionListResultWithDefaults() *GetReportResolutionListResult {
	this := GetReportResolutionListResult{}
	return &this
}

// GetResolutions returns the Resolutions field value
func (o *GetReportResolutionListResult) GetResolutions() []ResolutionList {
	if o == nil {
		var ret []ResolutionList
		return ret
	}

	return o.Resolutions
}

// GetResolutionsOk returns a tuple with the Resolutions field value
// and a boolean to check if the value has been set.
func (o *GetReportResolutionListResult) GetResolutionsOk() ([]ResolutionList, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resolutions, true
}

// SetResolutions sets field value
func (o *GetReportResolutionListResult) SetResolutions(v []ResolutionList) {
	o.Resolutions = v
}

// GetIsMessageRequired returns the IsMessageRequired field value
func (o *GetReportResolutionListResult) GetIsMessageRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMessageRequired
}

// GetIsMessageRequiredOk returns a tuple with the IsMessageRequired field value
// and a boolean to check if the value has been set.
func (o *GetReportResolutionListResult) GetIsMessageRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMessageRequired, true
}

// SetIsMessageRequired sets field value
func (o *GetReportResolutionListResult) SetIsMessageRequired(v bool) {
	o.IsMessageRequired = v
}

func (o GetReportResolutionListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetReportResolutionListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resolutions"] = o.Resolutions
	toSerialize["isMessageRequired"] = o.IsMessageRequired

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetReportResolutionListResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resolutions",
		"isMessageRequired",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetReportResolutionListResult := _GetReportResolutionListResult{}

	err = json.Unmarshal(data, &varGetReportResolutionListResult)

	if err != nil {
		return err
	}

	*o = GetReportResolutionListResult(varGetReportResolutionListResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "resolutions")
		delete(additionalProperties, "isMessageRequired")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetReportResolutionListResult struct {
	value *GetReportResolutionListResult
	isSet bool
}

func (v NullableGetReportResolutionListResult) Get() *GetReportResolutionListResult {
	return v.value
}

func (v *NullableGetReportResolutionListResult) Set(val *GetReportResolutionListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetReportResolutionListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetReportResolutionListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetReportResolutionListResult(val *GetReportResolutionListResult) *NullableGetReportResolutionListResult {
	return &NullableGetReportResolutionListResult{value: val, isSet: true}
}

func (v NullableGetReportResolutionListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetReportResolutionListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


