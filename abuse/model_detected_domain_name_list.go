/*
Leaseweb API for Abuse Handling

This API provides ways to manage the abuse reports you might receive from Leaseweb. To use this API, please request access via your account manager and/or compliance officer. **LIMITED ACCESS** 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package abuse

import (
	"encoding/json"
)

// checks if the DetectedDomainNameList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetectedDomainNameList{}

// DetectedDomainNameList struct for DetectedDomainNameList
type DetectedDomainNameList struct {
	// The domain.
	Name *string `json:"name,omitempty"`
	// The IP-addresses the domain resolves to.
	IpAddresses []string `json:"ipAddresses,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DetectedDomainNameList DetectedDomainNameList

// NewDetectedDomainNameList instantiates a new DetectedDomainNameList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetectedDomainNameList() *DetectedDomainNameList {
	this := DetectedDomainNameList{}
	return &this
}

// NewDetectedDomainNameListWithDefaults instantiates a new DetectedDomainNameList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetectedDomainNameListWithDefaults() *DetectedDomainNameList {
	this := DetectedDomainNameList{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DetectedDomainNameList) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedDomainNameList) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DetectedDomainNameList) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DetectedDomainNameList) SetName(v string) {
	o.Name = &v
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise.
func (o *DetectedDomainNameList) GetIpAddresses() []string {
	if o == nil || IsNil(o.IpAddresses) {
		var ret []string
		return ret
	}
	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedDomainNameList) GetIpAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.IpAddresses) {
		return nil, false
	}
	return o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *DetectedDomainNameList) HasIpAddresses() bool {
	if o != nil && !IsNil(o.IpAddresses) {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []string and assigns it to the IpAddresses field.
func (o *DetectedDomainNameList) SetIpAddresses(v []string) {
	o.IpAddresses = v
}

func (o DetectedDomainNameList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetectedDomainNameList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IpAddresses) {
		toSerialize["ipAddresses"] = o.IpAddresses
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DetectedDomainNameList) UnmarshalJSON(data []byte) (err error) {
	varDetectedDomainNameList := _DetectedDomainNameList{}

	err = json.Unmarshal(data, &varDetectedDomainNameList)

	if err != nil {
		return err
	}

	*o = DetectedDomainNameList(varDetectedDomainNameList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "ipAddresses")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDetectedDomainNameList struct {
	value *DetectedDomainNameList
	isSet bool
}

func (v NullableDetectedDomainNameList) Get() *DetectedDomainNameList {
	return v.value
}

func (v *NullableDetectedDomainNameList) Set(val *DetectedDomainNameList) {
	v.value = val
	v.isSet = true
}

func (v NullableDetectedDomainNameList) IsSet() bool {
	return v.isSet
}

func (v *NullableDetectedDomainNameList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetectedDomainNameList(val *DetectedDomainNameList) *NullableDetectedDomainNameList {
	return &NullableDetectedDomainNameList{value: val, isSet: true}
}

func (v NullableDetectedDomainNameList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetectedDomainNameList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


