/*
Leaseweb API for aggregation packs

This documents the rest api aggregation packs provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aggregationpack

import (
	"encoding/json"
	"fmt"
)

// NetworkPerformanceType the model 'NetworkPerformanceType'
type NetworkPerformanceType string

// List of networkPerformanceType
const (
	NETWORKPERFORMANCETYPE_VOLUME NetworkPerformanceType = "VOLUME"
	NETWORKPERFORMANCETYPE_PREMIUM NetworkPerformanceType = "PREMIUM"
)

// All allowed values of NetworkPerformanceType enum
var AllowedNetworkPerformanceTypeEnumValues = []NetworkPerformanceType{
	"VOLUME",
	"PREMIUM",
}

func (v *NetworkPerformanceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkPerformanceType(value)
	for _, existing := range AllowedNetworkPerformanceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkPerformanceType", value)
}

// NewNetworkPerformanceTypeFromValue returns a pointer to a valid NetworkPerformanceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkPerformanceTypeFromValue(v string) (*NetworkPerformanceType, error) {
	ev := NetworkPerformanceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkPerformanceType: valid values are %v", v, AllowedNetworkPerformanceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkPerformanceType) IsValid() bool {
	for _, existing := range AllowedNetworkPerformanceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to networkPerformanceType value
func (v NetworkPerformanceType) Ptr() *NetworkPerformanceType {
	return &v
}

type NullableNetworkPerformanceType struct {
	value *NetworkPerformanceType
	isSet bool
}

func (v NullableNetworkPerformanceType) Get() *NetworkPerformanceType {
	return v.value
}

func (v *NullableNetworkPerformanceType) Set(val *NetworkPerformanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkPerformanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkPerformanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkPerformanceType(val *NetworkPerformanceType) *NullableNetworkPerformanceType {
	return &NullableNetworkPerformanceType{value: val, isSet: true}
}

func (v NullableNetworkPerformanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkPerformanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

