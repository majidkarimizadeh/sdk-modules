/*
Leaseweb API for aggregation packs

This documents the rest api aggregation packs provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aggregationpack

import (
	"encoding/json"
	"fmt"
)

// DataTrafficCommitUnit the model 'DataTrafficCommitUnit'
type DataTrafficCommitUnit string

// List of dataTrafficCommitUnit
const (
	DATATRAFFICCOMMITUNIT_GBPS DataTrafficCommitUnit = "Gbps"
	DATATRAFFICCOMMITUNIT_MBPS DataTrafficCommitUnit = "Mbps"
	DATATRAFFICCOMMITUNIT_TB DataTrafficCommitUnit = "TB"
)

// All allowed values of DataTrafficCommitUnit enum
var AllowedDataTrafficCommitUnitEnumValues = []DataTrafficCommitUnit{
	"Gbps",
	"Mbps",
	"TB",
}

func (v *DataTrafficCommitUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataTrafficCommitUnit(value)
	for _, existing := range AllowedDataTrafficCommitUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataTrafficCommitUnit", value)
}

// NewDataTrafficCommitUnitFromValue returns a pointer to a valid DataTrafficCommitUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataTrafficCommitUnitFromValue(v string) (*DataTrafficCommitUnit, error) {
	ev := DataTrafficCommitUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataTrafficCommitUnit: valid values are %v", v, AllowedDataTrafficCommitUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataTrafficCommitUnit) IsValid() bool {
	for _, existing := range AllowedDataTrafficCommitUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dataTrafficCommitUnit value
func (v DataTrafficCommitUnit) Ptr() *DataTrafficCommitUnit {
	return &v
}

type NullableDataTrafficCommitUnit struct {
	value *DataTrafficCommitUnit
	isSet bool
}

func (v NullableDataTrafficCommitUnit) Get() *DataTrafficCommitUnit {
	return v.value
}

func (v *NullableDataTrafficCommitUnit) Set(val *DataTrafficCommitUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTrafficCommitUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTrafficCommitUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTrafficCommitUnit(val *DataTrafficCommitUnit) *NullableDataTrafficCommitUnit {
	return &NullableDataTrafficCommitUnit{value: val, isSet: true}
}

func (v NullableDataTrafficCommitUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTrafficCommitUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

