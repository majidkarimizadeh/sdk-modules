/*
Leaseweb API for aggregation packs

This documents the rest api aggregation packs provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aggregationpack

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the AggregationPack type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggregationPack{}

// AggregationPack struct for AggregationPack
type AggregationPack struct {
	// Id of the aggregation pack
	Id string `json:"id"`
	CustomerId string `json:"customerId"`
	SalesOrgId string `json:"salesOrgId"`
	ContractStartDate time.Time `json:"contractStartDate"`
	BillingType string `json:"billingType"`
	ConnectivityType string `json:"connectivityType"`
	ContractTerm int32 `json:"contractTerm"`
	DataTrafficCommit int32 `json:"dataTrafficCommit"`
	DataTrafficCommitUnit DataTrafficCommitUnit `json:"dataTrafficCommitUnit"`
	NetworkPerformanceType NetworkPerformanceType `json:"networkPerformanceType"`
	AggregationType AggregationType `json:"aggregationType"`
	AdditionalProperties map[string]interface{}
}

type _AggregationPack AggregationPack

// NewAggregationPack instantiates a new AggregationPack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregationPack(id string, customerId string, salesOrgId string, contractStartDate time.Time, billingType string, connectivityType string, contractTerm int32, dataTrafficCommit int32, dataTrafficCommitUnit DataTrafficCommitUnit, networkPerformanceType NetworkPerformanceType, aggregationType AggregationType) *AggregationPack {
	this := AggregationPack{}
	this.Id = id
	this.CustomerId = customerId
	this.SalesOrgId = salesOrgId
	this.ContractStartDate = contractStartDate
	this.BillingType = billingType
	this.ConnectivityType = connectivityType
	this.ContractTerm = contractTerm
	this.DataTrafficCommit = dataTrafficCommit
	this.DataTrafficCommitUnit = dataTrafficCommitUnit
	this.NetworkPerformanceType = networkPerformanceType
	this.AggregationType = aggregationType
	return &this
}

// NewAggregationPackWithDefaults instantiates a new AggregationPack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregationPackWithDefaults() *AggregationPack {
	this := AggregationPack{}
	return &this
}

// GetId returns the Id field value
func (o *AggregationPack) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AggregationPack) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AggregationPack) SetId(v string) {
	o.Id = v
}

// GetCustomerId returns the CustomerId field value
func (o *AggregationPack) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *AggregationPack) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *AggregationPack) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetSalesOrgId returns the SalesOrgId field value
func (o *AggregationPack) GetSalesOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SalesOrgId
}

// GetSalesOrgIdOk returns a tuple with the SalesOrgId field value
// and a boolean to check if the value has been set.
func (o *AggregationPack) GetSalesOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SalesOrgId, true
}

// SetSalesOrgId sets field value
func (o *AggregationPack) SetSalesOrgId(v string) {
	o.SalesOrgId = v
}

// GetContractStartDate returns the ContractStartDate field value
func (o *AggregationPack) GetContractStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ContractStartDate
}

// GetContractStartDateOk returns a tuple with the ContractStartDate field value
// and a boolean to check if the value has been set.
func (o *AggregationPack) GetContractStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractStartDate, true
}

// SetContractStartDate sets field value
func (o *AggregationPack) SetContractStartDate(v time.Time) {
	o.ContractStartDate = v
}

// GetBillingType returns the BillingType field value
func (o *AggregationPack) GetBillingType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BillingType
}

// GetBillingTypeOk returns a tuple with the BillingType field value
// and a boolean to check if the value has been set.
func (o *AggregationPack) GetBillingTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingType, true
}

// SetBillingType sets field value
func (o *AggregationPack) SetBillingType(v string) {
	o.BillingType = v
}

// GetConnectivityType returns the ConnectivityType field value
func (o *AggregationPack) GetConnectivityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectivityType
}

// GetConnectivityTypeOk returns a tuple with the ConnectivityType field value
// and a boolean to check if the value has been set.
func (o *AggregationPack) GetConnectivityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectivityType, true
}

// SetConnectivityType sets field value
func (o *AggregationPack) SetConnectivityType(v string) {
	o.ConnectivityType = v
}

// GetContractTerm returns the ContractTerm field value
func (o *AggregationPack) GetContractTerm() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ContractTerm
}

// GetContractTermOk returns a tuple with the ContractTerm field value
// and a boolean to check if the value has been set.
func (o *AggregationPack) GetContractTermOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractTerm, true
}

// SetContractTerm sets field value
func (o *AggregationPack) SetContractTerm(v int32) {
	o.ContractTerm = v
}

// GetDataTrafficCommit returns the DataTrafficCommit field value
func (o *AggregationPack) GetDataTrafficCommit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DataTrafficCommit
}

// GetDataTrafficCommitOk returns a tuple with the DataTrafficCommit field value
// and a boolean to check if the value has been set.
func (o *AggregationPack) GetDataTrafficCommitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataTrafficCommit, true
}

// SetDataTrafficCommit sets field value
func (o *AggregationPack) SetDataTrafficCommit(v int32) {
	o.DataTrafficCommit = v
}

// GetDataTrafficCommitUnit returns the DataTrafficCommitUnit field value
func (o *AggregationPack) GetDataTrafficCommitUnit() DataTrafficCommitUnit {
	if o == nil {
		var ret DataTrafficCommitUnit
		return ret
	}

	return o.DataTrafficCommitUnit
}

// GetDataTrafficCommitUnitOk returns a tuple with the DataTrafficCommitUnit field value
// and a boolean to check if the value has been set.
func (o *AggregationPack) GetDataTrafficCommitUnitOk() (*DataTrafficCommitUnit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataTrafficCommitUnit, true
}

// SetDataTrafficCommitUnit sets field value
func (o *AggregationPack) SetDataTrafficCommitUnit(v DataTrafficCommitUnit) {
	o.DataTrafficCommitUnit = v
}

// GetNetworkPerformanceType returns the NetworkPerformanceType field value
func (o *AggregationPack) GetNetworkPerformanceType() NetworkPerformanceType {
	if o == nil {
		var ret NetworkPerformanceType
		return ret
	}

	return o.NetworkPerformanceType
}

// GetNetworkPerformanceTypeOk returns a tuple with the NetworkPerformanceType field value
// and a boolean to check if the value has been set.
func (o *AggregationPack) GetNetworkPerformanceTypeOk() (*NetworkPerformanceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkPerformanceType, true
}

// SetNetworkPerformanceType sets field value
func (o *AggregationPack) SetNetworkPerformanceType(v NetworkPerformanceType) {
	o.NetworkPerformanceType = v
}

// GetAggregationType returns the AggregationType field value
func (o *AggregationPack) GetAggregationType() AggregationType {
	if o == nil {
		var ret AggregationType
		return ret
	}

	return o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value
// and a boolean to check if the value has been set.
func (o *AggregationPack) GetAggregationTypeOk() (*AggregationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregationType, true
}

// SetAggregationType sets field value
func (o *AggregationPack) SetAggregationType(v AggregationType) {
	o.AggregationType = v
}

func (o AggregationPack) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggregationPack) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["customerId"] = o.CustomerId
	toSerialize["salesOrgId"] = o.SalesOrgId
	toSerialize["contractStartDate"] = o.ContractStartDate
	toSerialize["billingType"] = o.BillingType
	toSerialize["connectivityType"] = o.ConnectivityType
	toSerialize["contractTerm"] = o.ContractTerm
	toSerialize["dataTrafficCommit"] = o.DataTrafficCommit
	toSerialize["dataTrafficCommitUnit"] = o.DataTrafficCommitUnit
	toSerialize["networkPerformanceType"] = o.NetworkPerformanceType
	toSerialize["aggregationType"] = o.AggregationType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AggregationPack) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"customerId",
		"salesOrgId",
		"contractStartDate",
		"billingType",
		"connectivityType",
		"contractTerm",
		"dataTrafficCommit",
		"dataTrafficCommitUnit",
		"networkPerformanceType",
		"aggregationType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAggregationPack := _AggregationPack{}

	err = json.Unmarshal(data, &varAggregationPack)

	if err != nil {
		return err
	}

	*o = AggregationPack(varAggregationPack)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "customerId")
		delete(additionalProperties, "salesOrgId")
		delete(additionalProperties, "contractStartDate")
		delete(additionalProperties, "billingType")
		delete(additionalProperties, "connectivityType")
		delete(additionalProperties, "contractTerm")
		delete(additionalProperties, "dataTrafficCommit")
		delete(additionalProperties, "dataTrafficCommitUnit")
		delete(additionalProperties, "networkPerformanceType")
		delete(additionalProperties, "aggregationType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAggregationPack struct {
	value *AggregationPack
	isSet bool
}

func (v NullableAggregationPack) Get() *AggregationPack {
	return v.value
}

func (v *NullableAggregationPack) Set(val *AggregationPack) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregationPack) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregationPack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregationPack(val *AggregationPack) *NullableAggregationPack {
	return &NullableAggregationPack{value: val, isSet: true}
}

func (v NullableAggregationPack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregationPack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


