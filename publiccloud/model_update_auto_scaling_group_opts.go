/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"time"
)

// checks if the UpdateAutoScalingGroupOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAutoScalingGroupOpts{}

// UpdateAutoScalingGroupOpts struct for UpdateAutoScalingGroupOpts
type UpdateAutoScalingGroupOpts struct {
	// When \"SCHEDULED\", the number of instances that need to be running at the specified date and time.    When \"MANUAL\", the number of instances that to be launched immediately.
	DesiredAmount *int32 `json:"desiredAmount,omitempty"`
	// The minimum number of instances that should be running
	MinimumAmount *int32 `json:"minimumAmount,omitempty"`
	// Only for \"CPU_BASED\" auto scaling group. The maximum number of instances that can be running
	MaximumAmount *int32 `json:"maximumAmount,omitempty"`
	// Only for \"CPU_BASED\" auto scaling group. The target average CPU utilization for scaling
	CpuThreshold *int32 `json:"cpuThreshold,omitempty"`
	// Only for \"CPU_BASED\" auto scaling group. Warm-up time in seconds for new instances
	WarmupTime *int32 `json:"warmupTime,omitempty"`
	// Only for \"CPU_BASED\" auto scaling group. Cool-down time in seconds for new instances
	CooldownTime *int32 `json:"cooldownTime,omitempty"`
	// The identifying name set to the auto scaling group
	Reference *string `json:"reference,omitempty"`
	// Only for \"SCHEDULED\" auto scaling group. Date and time (UTC) that the instances need to be launched. Must be changed along with \"endsAt\"
	StartsAt *time.Time `json:"startsAt,omitempty"`
	// Only for \"SCHEDULED\" auto scaling group. Date and time (UTC) that the instances need to be terminated. Must be changed along with \"startsAt\"
	EndsAt *time.Time `json:"endsAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateAutoScalingGroupOpts UpdateAutoScalingGroupOpts

// NewUpdateAutoScalingGroupOpts instantiates a new UpdateAutoScalingGroupOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAutoScalingGroupOpts() *UpdateAutoScalingGroupOpts {
	this := UpdateAutoScalingGroupOpts{}
	return &this
}

// NewUpdateAutoScalingGroupOptsWithDefaults instantiates a new UpdateAutoScalingGroupOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAutoScalingGroupOptsWithDefaults() *UpdateAutoScalingGroupOpts {
	this := UpdateAutoScalingGroupOpts{}
	return &this
}

// GetDesiredAmount returns the DesiredAmount field value if set, zero value otherwise.
func (o *UpdateAutoScalingGroupOpts) GetDesiredAmount() int32 {
	if o == nil || IsNil(o.DesiredAmount) {
		var ret int32
		return ret
	}
	return *o.DesiredAmount
}

// GetDesiredAmountOk returns a tuple with the DesiredAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAutoScalingGroupOpts) GetDesiredAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.DesiredAmount) {
		return nil, false
	}
	return o.DesiredAmount, true
}

// HasDesiredAmount returns a boolean if a field has been set.
func (o *UpdateAutoScalingGroupOpts) HasDesiredAmount() bool {
	if o != nil && !IsNil(o.DesiredAmount) {
		return true
	}

	return false
}

// SetDesiredAmount gets a reference to the given int32 and assigns it to the DesiredAmount field.
func (o *UpdateAutoScalingGroupOpts) SetDesiredAmount(v int32) {
	o.DesiredAmount = &v
}

// GetMinimumAmount returns the MinimumAmount field value if set, zero value otherwise.
func (o *UpdateAutoScalingGroupOpts) GetMinimumAmount() int32 {
	if o == nil || IsNil(o.MinimumAmount) {
		var ret int32
		return ret
	}
	return *o.MinimumAmount
}

// GetMinimumAmountOk returns a tuple with the MinimumAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAutoScalingGroupOpts) GetMinimumAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumAmount) {
		return nil, false
	}
	return o.MinimumAmount, true
}

// HasMinimumAmount returns a boolean if a field has been set.
func (o *UpdateAutoScalingGroupOpts) HasMinimumAmount() bool {
	if o != nil && !IsNil(o.MinimumAmount) {
		return true
	}

	return false
}

// SetMinimumAmount gets a reference to the given int32 and assigns it to the MinimumAmount field.
func (o *UpdateAutoScalingGroupOpts) SetMinimumAmount(v int32) {
	o.MinimumAmount = &v
}

// GetMaximumAmount returns the MaximumAmount field value if set, zero value otherwise.
func (o *UpdateAutoScalingGroupOpts) GetMaximumAmount() int32 {
	if o == nil || IsNil(o.MaximumAmount) {
		var ret int32
		return ret
	}
	return *o.MaximumAmount
}

// GetMaximumAmountOk returns a tuple with the MaximumAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAutoScalingGroupOpts) GetMaximumAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumAmount) {
		return nil, false
	}
	return o.MaximumAmount, true
}

// HasMaximumAmount returns a boolean if a field has been set.
func (o *UpdateAutoScalingGroupOpts) HasMaximumAmount() bool {
	if o != nil && !IsNil(o.MaximumAmount) {
		return true
	}

	return false
}

// SetMaximumAmount gets a reference to the given int32 and assigns it to the MaximumAmount field.
func (o *UpdateAutoScalingGroupOpts) SetMaximumAmount(v int32) {
	o.MaximumAmount = &v
}

// GetCpuThreshold returns the CpuThreshold field value if set, zero value otherwise.
func (o *UpdateAutoScalingGroupOpts) GetCpuThreshold() int32 {
	if o == nil || IsNil(o.CpuThreshold) {
		var ret int32
		return ret
	}
	return *o.CpuThreshold
}

// GetCpuThresholdOk returns a tuple with the CpuThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAutoScalingGroupOpts) GetCpuThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.CpuThreshold) {
		return nil, false
	}
	return o.CpuThreshold, true
}

// HasCpuThreshold returns a boolean if a field has been set.
func (o *UpdateAutoScalingGroupOpts) HasCpuThreshold() bool {
	if o != nil && !IsNil(o.CpuThreshold) {
		return true
	}

	return false
}

// SetCpuThreshold gets a reference to the given int32 and assigns it to the CpuThreshold field.
func (o *UpdateAutoScalingGroupOpts) SetCpuThreshold(v int32) {
	o.CpuThreshold = &v
}

// GetWarmupTime returns the WarmupTime field value if set, zero value otherwise.
func (o *UpdateAutoScalingGroupOpts) GetWarmupTime() int32 {
	if o == nil || IsNil(o.WarmupTime) {
		var ret int32
		return ret
	}
	return *o.WarmupTime
}

// GetWarmupTimeOk returns a tuple with the WarmupTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAutoScalingGroupOpts) GetWarmupTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.WarmupTime) {
		return nil, false
	}
	return o.WarmupTime, true
}

// HasWarmupTime returns a boolean if a field has been set.
func (o *UpdateAutoScalingGroupOpts) HasWarmupTime() bool {
	if o != nil && !IsNil(o.WarmupTime) {
		return true
	}

	return false
}

// SetWarmupTime gets a reference to the given int32 and assigns it to the WarmupTime field.
func (o *UpdateAutoScalingGroupOpts) SetWarmupTime(v int32) {
	o.WarmupTime = &v
}

// GetCooldownTime returns the CooldownTime field value if set, zero value otherwise.
func (o *UpdateAutoScalingGroupOpts) GetCooldownTime() int32 {
	if o == nil || IsNil(o.CooldownTime) {
		var ret int32
		return ret
	}
	return *o.CooldownTime
}

// GetCooldownTimeOk returns a tuple with the CooldownTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAutoScalingGroupOpts) GetCooldownTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.CooldownTime) {
		return nil, false
	}
	return o.CooldownTime, true
}

// HasCooldownTime returns a boolean if a field has been set.
func (o *UpdateAutoScalingGroupOpts) HasCooldownTime() bool {
	if o != nil && !IsNil(o.CooldownTime) {
		return true
	}

	return false
}

// SetCooldownTime gets a reference to the given int32 and assigns it to the CooldownTime field.
func (o *UpdateAutoScalingGroupOpts) SetCooldownTime(v int32) {
	o.CooldownTime = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *UpdateAutoScalingGroupOpts) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAutoScalingGroupOpts) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *UpdateAutoScalingGroupOpts) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *UpdateAutoScalingGroupOpts) SetReference(v string) {
	o.Reference = &v
}

// GetStartsAt returns the StartsAt field value if set, zero value otherwise.
func (o *UpdateAutoScalingGroupOpts) GetStartsAt() time.Time {
	if o == nil || IsNil(o.StartsAt) {
		var ret time.Time
		return ret
	}
	return *o.StartsAt
}

// GetStartsAtOk returns a tuple with the StartsAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAutoScalingGroupOpts) GetStartsAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartsAt) {
		return nil, false
	}
	return o.StartsAt, true
}

// HasStartsAt returns a boolean if a field has been set.
func (o *UpdateAutoScalingGroupOpts) HasStartsAt() bool {
	if o != nil && !IsNil(o.StartsAt) {
		return true
	}

	return false
}

// SetStartsAt gets a reference to the given time.Time and assigns it to the StartsAt field.
func (o *UpdateAutoScalingGroupOpts) SetStartsAt(v time.Time) {
	o.StartsAt = &v
}

// GetEndsAt returns the EndsAt field value if set, zero value otherwise.
func (o *UpdateAutoScalingGroupOpts) GetEndsAt() time.Time {
	if o == nil || IsNil(o.EndsAt) {
		var ret time.Time
		return ret
	}
	return *o.EndsAt
}

// GetEndsAtOk returns a tuple with the EndsAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAutoScalingGroupOpts) GetEndsAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndsAt) {
		return nil, false
	}
	return o.EndsAt, true
}

// HasEndsAt returns a boolean if a field has been set.
func (o *UpdateAutoScalingGroupOpts) HasEndsAt() bool {
	if o != nil && !IsNil(o.EndsAt) {
		return true
	}

	return false
}

// SetEndsAt gets a reference to the given time.Time and assigns it to the EndsAt field.
func (o *UpdateAutoScalingGroupOpts) SetEndsAt(v time.Time) {
	o.EndsAt = &v
}

func (o UpdateAutoScalingGroupOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAutoScalingGroupOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DesiredAmount) {
		toSerialize["desiredAmount"] = o.DesiredAmount
	}
	if !IsNil(o.MinimumAmount) {
		toSerialize["minimumAmount"] = o.MinimumAmount
	}
	if !IsNil(o.MaximumAmount) {
		toSerialize["maximumAmount"] = o.MaximumAmount
	}
	if !IsNil(o.CpuThreshold) {
		toSerialize["cpuThreshold"] = o.CpuThreshold
	}
	if !IsNil(o.WarmupTime) {
		toSerialize["warmupTime"] = o.WarmupTime
	}
	if !IsNil(o.CooldownTime) {
		toSerialize["cooldownTime"] = o.CooldownTime
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.StartsAt) {
		toSerialize["startsAt"] = o.StartsAt
	}
	if !IsNil(o.EndsAt) {
		toSerialize["endsAt"] = o.EndsAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateAutoScalingGroupOpts) UnmarshalJSON(data []byte) (err error) {
	varUpdateAutoScalingGroupOpts := _UpdateAutoScalingGroupOpts{}

	err = json.Unmarshal(data, &varUpdateAutoScalingGroupOpts)

	if err != nil {
		return err
	}

	*o = UpdateAutoScalingGroupOpts(varUpdateAutoScalingGroupOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "desiredAmount")
		delete(additionalProperties, "minimumAmount")
		delete(additionalProperties, "maximumAmount")
		delete(additionalProperties, "cpuThreshold")
		delete(additionalProperties, "warmupTime")
		delete(additionalProperties, "cooldownTime")
		delete(additionalProperties, "reference")
		delete(additionalProperties, "startsAt")
		delete(additionalProperties, "endsAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateAutoScalingGroupOpts struct {
	value *UpdateAutoScalingGroupOpts
	isSet bool
}

func (v NullableUpdateAutoScalingGroupOpts) Get() *UpdateAutoScalingGroupOpts {
	return v.value
}

func (v *NullableUpdateAutoScalingGroupOpts) Set(val *UpdateAutoScalingGroupOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAutoScalingGroupOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAutoScalingGroupOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAutoScalingGroupOpts(val *UpdateAutoScalingGroupOpts) *NullableUpdateAutoScalingGroupOpts {
	return &NullableUpdateAutoScalingGroupOpts{value: val, isSet: true}
}

func (v NullableUpdateAutoScalingGroupOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAutoScalingGroupOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


