/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
)

// checks if the GetExpensesResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetExpensesResult{}

// GetExpensesResult struct for GetExpensesResult
type GetExpensesResult struct {
	Billing *Billing `json:"billing,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetExpensesResult GetExpensesResult

// NewGetExpensesResult instantiates a new GetExpensesResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetExpensesResult() *GetExpensesResult {
	this := GetExpensesResult{}
	return &this
}

// NewGetExpensesResultWithDefaults instantiates a new GetExpensesResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetExpensesResultWithDefaults() *GetExpensesResult {
	this := GetExpensesResult{}
	return &this
}

// GetBilling returns the Billing field value if set, zero value otherwise.
func (o *GetExpensesResult) GetBilling() Billing {
	if o == nil || IsNil(o.Billing) {
		var ret Billing
		return ret
	}
	return *o.Billing
}

// GetBillingOk returns a tuple with the Billing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetExpensesResult) GetBillingOk() (*Billing, bool) {
	if o == nil || IsNil(o.Billing) {
		return nil, false
	}
	return o.Billing, true
}

// HasBilling returns a boolean if a field has been set.
func (o *GetExpensesResult) HasBilling() bool {
	if o != nil && !IsNil(o.Billing) {
		return true
	}

	return false
}

// SetBilling gets a reference to the given Billing and assigns it to the Billing field.
func (o *GetExpensesResult) SetBilling(v Billing) {
	o.Billing = &v
}

func (o GetExpensesResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetExpensesResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Billing) {
		toSerialize["billing"] = o.Billing
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetExpensesResult) UnmarshalJSON(data []byte) (err error) {
	varGetExpensesResult := _GetExpensesResult{}

	err = json.Unmarshal(data, &varGetExpensesResult)

	if err != nil {
		return err
	}

	*o = GetExpensesResult(varGetExpensesResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "billing")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetExpensesResult struct {
	value *GetExpensesResult
	isSet bool
}

func (v NullableGetExpensesResult) Get() *GetExpensesResult {
	return v.value
}

func (v *NullableGetExpensesResult) Set(val *GetExpensesResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetExpensesResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetExpensesResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetExpensesResult(val *GetExpensesResult) *NullableGetExpensesResult {
	return &NullableGetExpensesResult{value: val, isSet: true}
}

func (v NullableGetExpensesResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetExpensesResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


