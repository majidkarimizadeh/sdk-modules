/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the PrivateNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateNetwork{}

// PrivateNetwork struct for PrivateNetwork
type PrivateNetwork struct {
	PrivateNetworkId string `json:"privateNetworkId"`
	Status string `json:"status"`
	Subnet string `json:"subnet"`
	AdditionalProperties map[string]interface{}
}

type _PrivateNetwork PrivateNetwork

// NewPrivateNetwork instantiates a new PrivateNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateNetwork(privateNetworkId string, status string, subnet string) *PrivateNetwork {
	this := PrivateNetwork{}
	this.PrivateNetworkId = privateNetworkId
	this.Status = status
	this.Subnet = subnet
	return &this
}

// NewPrivateNetworkWithDefaults instantiates a new PrivateNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateNetworkWithDefaults() *PrivateNetwork {
	this := PrivateNetwork{}
	return &this
}

// GetPrivateNetworkId returns the PrivateNetworkId field value
func (o *PrivateNetwork) GetPrivateNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateNetworkId
}

// GetPrivateNetworkIdOk returns a tuple with the PrivateNetworkId field value
// and a boolean to check if the value has been set.
func (o *PrivateNetwork) GetPrivateNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateNetworkId, true
}

// SetPrivateNetworkId sets field value
func (o *PrivateNetwork) SetPrivateNetworkId(v string) {
	o.PrivateNetworkId = v
}

// GetStatus returns the Status field value
func (o *PrivateNetwork) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PrivateNetwork) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PrivateNetwork) SetStatus(v string) {
	o.Status = v
}

// GetSubnet returns the Subnet field value
func (o *PrivateNetwork) GetSubnet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value
// and a boolean to check if the value has been set.
func (o *PrivateNetwork) GetSubnetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subnet, true
}

// SetSubnet sets field value
func (o *PrivateNetwork) SetSubnet(v string) {
	o.Subnet = v
}

func (o PrivateNetwork) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["privateNetworkId"] = o.PrivateNetworkId
	toSerialize["status"] = o.Status
	toSerialize["subnet"] = o.Subnet

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrivateNetwork) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"privateNetworkId",
		"status",
		"subnet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrivateNetwork := _PrivateNetwork{}

	err = json.Unmarshal(data, &varPrivateNetwork)

	if err != nil {
		return err
	}

	*o = PrivateNetwork(varPrivateNetwork)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "privateNetworkId")
		delete(additionalProperties, "status")
		delete(additionalProperties, "subnet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrivateNetwork struct {
	value *PrivateNetwork
	isSet bool
}

func (v NullablePrivateNetwork) Get() *PrivateNetwork {
	return v.value
}

func (v *NullablePrivateNetwork) Set(val *PrivateNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateNetwork(val *PrivateNetwork) *NullablePrivateNetwork {
	return &NullablePrivateNetwork{value: val, isSet: true}
}

func (v NullablePrivateNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


