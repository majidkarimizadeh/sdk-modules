/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the VpsList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpsList{}

// VpsList struct for VpsList
type VpsList struct {
	Id string `json:"id"`
	Pack VpsPackType `json:"pack"`
	Resources BaseResources `json:"resources"`
	Region RegionName `json:"region"`
	Datacenter Datacenter `json:"datacenter"`
	// The identifying name set to the instance
	Reference string `json:"reference"`
	Image Image `json:"image"`
	MarketAppId *MarketAppId `json:"marketAppId,omitempty"`
	State VpsState `json:"state"`
	HasPublicIpV4 bool `json:"hasPublicIpV4"`
	// The root disk's size in GB. Must be at least 5 GB for Linux and FreeBSD instances and 50 GB for Windows instances
	RootDiskSize int32 `json:"rootDiskSize"`
	// Date and time when the VPS was started for the first time, right after launching it
	StartedAt NullableTime `json:"startedAt"`
	Contract VpsContract `json:"contract"`
	Ips []Ip `json:"ips"`
	AdditionalProperties map[string]interface{}
}

type _VpsList VpsList

// NewVpsList instantiates a new VpsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpsList(id string, pack VpsPackType, resources BaseResources, region RegionName, datacenter Datacenter, reference string, image Image, state VpsState, hasPublicIpV4 bool, rootDiskSize int32, startedAt NullableTime, contract VpsContract, ips []Ip) *VpsList {
	this := VpsList{}
	this.Id = id
	this.Pack = pack
	this.Resources = resources
	this.Region = region
	this.Datacenter = datacenter
	this.Reference = reference
	this.Image = image
	this.State = state
	this.HasPublicIpV4 = hasPublicIpV4
	this.RootDiskSize = rootDiskSize
	this.StartedAt = startedAt
	this.Contract = contract
	this.Ips = ips
	return &this
}

// NewVpsListWithDefaults instantiates a new VpsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpsListWithDefaults() *VpsList {
	this := VpsList{}
	return &this
}

// GetId returns the Id field value
func (o *VpsList) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VpsList) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VpsList) SetId(v string) {
	o.Id = v
}

// GetPack returns the Pack field value
func (o *VpsList) GetPack() VpsPackType {
	if o == nil {
		var ret VpsPackType
		return ret
	}

	return o.Pack
}

// GetPackOk returns a tuple with the Pack field value
// and a boolean to check if the value has been set.
func (o *VpsList) GetPackOk() (*VpsPackType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pack, true
}

// SetPack sets field value
func (o *VpsList) SetPack(v VpsPackType) {
	o.Pack = v
}

// GetResources returns the Resources field value
func (o *VpsList) GetResources() BaseResources {
	if o == nil {
		var ret BaseResources
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *VpsList) GetResourcesOk() (*BaseResources, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resources, true
}

// SetResources sets field value
func (o *VpsList) SetResources(v BaseResources) {
	o.Resources = v
}

// GetRegion returns the Region field value
func (o *VpsList) GetRegion() RegionName {
	if o == nil {
		var ret RegionName
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *VpsList) GetRegionOk() (*RegionName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *VpsList) SetRegion(v RegionName) {
	o.Region = v
}

// GetDatacenter returns the Datacenter field value
func (o *VpsList) GetDatacenter() Datacenter {
	if o == nil {
		var ret Datacenter
		return ret
	}

	return o.Datacenter
}

// GetDatacenterOk returns a tuple with the Datacenter field value
// and a boolean to check if the value has been set.
func (o *VpsList) GetDatacenterOk() (*Datacenter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datacenter, true
}

// SetDatacenter sets field value
func (o *VpsList) SetDatacenter(v Datacenter) {
	o.Datacenter = v
}

// GetReference returns the Reference field value
func (o *VpsList) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *VpsList) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *VpsList) SetReference(v string) {
	o.Reference = v
}

// GetImage returns the Image field value
func (o *VpsList) GetImage() Image {
	if o == nil {
		var ret Image
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *VpsList) GetImageOk() (*Image, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *VpsList) SetImage(v Image) {
	o.Image = v
}

// GetMarketAppId returns the MarketAppId field value if set, zero value otherwise.
func (o *VpsList) GetMarketAppId() MarketAppId {
	if o == nil || IsNil(o.MarketAppId) {
		var ret MarketAppId
		return ret
	}
	return *o.MarketAppId
}

// GetMarketAppIdOk returns a tuple with the MarketAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpsList) GetMarketAppIdOk() (*MarketAppId, bool) {
	if o == nil || IsNil(o.MarketAppId) {
		return nil, false
	}
	return o.MarketAppId, true
}

// HasMarketAppId returns a boolean if a field has been set.
func (o *VpsList) HasMarketAppId() bool {
	if o != nil && !IsNil(o.MarketAppId) {
		return true
	}

	return false
}

// SetMarketAppId gets a reference to the given MarketAppId and assigns it to the MarketAppId field.
func (o *VpsList) SetMarketAppId(v MarketAppId) {
	o.MarketAppId = &v
}

// GetState returns the State field value
func (o *VpsList) GetState() VpsState {
	if o == nil {
		var ret VpsState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *VpsList) GetStateOk() (*VpsState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *VpsList) SetState(v VpsState) {
	o.State = v
}

// GetHasPublicIpV4 returns the HasPublicIpV4 field value
func (o *VpsList) GetHasPublicIpV4() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasPublicIpV4
}

// GetHasPublicIpV4Ok returns a tuple with the HasPublicIpV4 field value
// and a boolean to check if the value has been set.
func (o *VpsList) GetHasPublicIpV4Ok() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasPublicIpV4, true
}

// SetHasPublicIpV4 sets field value
func (o *VpsList) SetHasPublicIpV4(v bool) {
	o.HasPublicIpV4 = v
}

// GetRootDiskSize returns the RootDiskSize field value
func (o *VpsList) GetRootDiskSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RootDiskSize
}

// GetRootDiskSizeOk returns a tuple with the RootDiskSize field value
// and a boolean to check if the value has been set.
func (o *VpsList) GetRootDiskSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootDiskSize, true
}

// SetRootDiskSize sets field value
func (o *VpsList) SetRootDiskSize(v int32) {
	o.RootDiskSize = v
}

// GetStartedAt returns the StartedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *VpsList) GetStartedAt() time.Time {
	if o == nil || o.StartedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.StartedAt.Get()
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VpsList) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedAt.Get(), o.StartedAt.IsSet()
}

// SetStartedAt sets field value
func (o *VpsList) SetStartedAt(v time.Time) {
	o.StartedAt.Set(&v)
}

// GetContract returns the Contract field value
func (o *VpsList) GetContract() VpsContract {
	if o == nil {
		var ret VpsContract
		return ret
	}

	return o.Contract
}

// GetContractOk returns a tuple with the Contract field value
// and a boolean to check if the value has been set.
func (o *VpsList) GetContractOk() (*VpsContract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contract, true
}

// SetContract sets field value
func (o *VpsList) SetContract(v VpsContract) {
	o.Contract = v
}

// GetIps returns the Ips field value
func (o *VpsList) GetIps() []Ip {
	if o == nil {
		var ret []Ip
		return ret
	}

	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value
// and a boolean to check if the value has been set.
func (o *VpsList) GetIpsOk() ([]Ip, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ips, true
}

// SetIps sets field value
func (o *VpsList) SetIps(v []Ip) {
	o.Ips = v
}

func (o VpsList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpsList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["pack"] = o.Pack
	toSerialize["resources"] = o.Resources
	toSerialize["region"] = o.Region
	toSerialize["datacenter"] = o.Datacenter
	toSerialize["reference"] = o.Reference
	toSerialize["image"] = o.Image
	if !IsNil(o.MarketAppId) {
		toSerialize["marketAppId"] = o.MarketAppId
	}
	toSerialize["state"] = o.State
	toSerialize["hasPublicIpV4"] = o.HasPublicIpV4
	toSerialize["rootDiskSize"] = o.RootDiskSize
	toSerialize["startedAt"] = o.StartedAt.Get()
	toSerialize["contract"] = o.Contract
	toSerialize["ips"] = o.Ips

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VpsList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"pack",
		"resources",
		"region",
		"datacenter",
		"reference",
		"image",
		"state",
		"hasPublicIpV4",
		"rootDiskSize",
		"startedAt",
		"contract",
		"ips",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpsList := _VpsList{}

	err = json.Unmarshal(data, &varVpsList)

	if err != nil {
		return err
	}

	*o = VpsList(varVpsList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "pack")
		delete(additionalProperties, "resources")
		delete(additionalProperties, "region")
		delete(additionalProperties, "datacenter")
		delete(additionalProperties, "reference")
		delete(additionalProperties, "image")
		delete(additionalProperties, "marketAppId")
		delete(additionalProperties, "state")
		delete(additionalProperties, "hasPublicIpV4")
		delete(additionalProperties, "rootDiskSize")
		delete(additionalProperties, "startedAt")
		delete(additionalProperties, "contract")
		delete(additionalProperties, "ips")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVpsList struct {
	value *VpsList
	isSet bool
}

func (v NullableVpsList) Get() *VpsList {
	return v.value
}

func (v *NullableVpsList) Set(val *VpsList) {
	v.value = val
	v.isSet = true
}

func (v NullableVpsList) IsSet() bool {
	return v.isSet
}

func (v *NullableVpsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpsList(val *VpsList) *NullableVpsList {
	return &NullableVpsList{value: val, isSet: true}
}

func (v NullableVpsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


