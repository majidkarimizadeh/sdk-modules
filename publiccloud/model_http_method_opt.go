/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// HttpMethodOpt HTTP method to be used for health check - Required if `protocol` is HTTP or HTTPS. Not allowed if `protocol` is TCP
type HttpMethodOpt string

// List of httpMethodOpt
const (
	HTTPMETHODOPT_GET HttpMethodOpt = "GET"
	HTTPMETHODOPT_HEAD HttpMethodOpt = "HEAD"
	HTTPMETHODOPT_POST HttpMethodOpt = "POST"
	HTTPMETHODOPT_OPTIONS HttpMethodOpt = "OPTIONS"
)

// All allowed values of HttpMethodOpt enum
var AllowedHttpMethodOptEnumValues = []HttpMethodOpt{
	"GET",
	"HEAD",
	"POST",
	"OPTIONS",
}

func (v *HttpMethodOpt) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HttpMethodOpt(value)
	for _, existing := range AllowedHttpMethodOptEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HttpMethodOpt", value)
}

// NewHttpMethodOptFromValue returns a pointer to a valid HttpMethodOpt
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHttpMethodOptFromValue(v string) (*HttpMethodOpt, error) {
	ev := HttpMethodOpt(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HttpMethodOpt: valid values are %v", v, AllowedHttpMethodOptEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HttpMethodOpt) IsValid() bool {
	for _, existing := range AllowedHttpMethodOptEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to httpMethodOpt value
func (v HttpMethodOpt) Ptr() *HttpMethodOpt {
	return &v
}

type NullableHttpMethodOpt struct {
	value *HttpMethodOpt
	isSet bool
}

func (v NullableHttpMethodOpt) Get() *HttpMethodOpt {
	return v.value
}

func (v *NullableHttpMethodOpt) Set(val *HttpMethodOpt) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpMethodOpt) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpMethodOpt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpMethodOpt(val *HttpMethodOpt) *NullableHttpMethodOpt {
	return &NullableHttpMethodOpt{value: val, isSet: true}
}

func (v NullableHttpMethodOpt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpMethodOpt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

