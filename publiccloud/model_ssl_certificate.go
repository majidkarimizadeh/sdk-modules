/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the SslCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SslCertificate{}

// SslCertificate struct for SslCertificate
type SslCertificate struct {
	// Client Private Key. Required only if protocol is HTTPS
	PrivateKey string `json:"privateKey"`
	// Client Certificate. Required only if protocol is HTTPS
	Certificate string `json:"certificate"`
	// CA certificate. Not required, but can be added if protocol is HTTPS
	Chain *string `json:"chain,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SslCertificate SslCertificate

// NewSslCertificate instantiates a new SslCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslCertificate(privateKey string, certificate string) *SslCertificate {
	this := SslCertificate{}
	this.PrivateKey = privateKey
	this.Certificate = certificate
	return &this
}

// NewSslCertificateWithDefaults instantiates a new SslCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslCertificateWithDefaults() *SslCertificate {
	this := SslCertificate{}
	return &this
}

// GetPrivateKey returns the PrivateKey field value
func (o *SslCertificate) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *SslCertificate) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *SslCertificate) SetPrivateKey(v string) {
	o.PrivateKey = v
}

// GetCertificate returns the Certificate field value
func (o *SslCertificate) GetCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
func (o *SslCertificate) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Certificate, true
}

// SetCertificate sets field value
func (o *SslCertificate) SetCertificate(v string) {
	o.Certificate = v
}

// GetChain returns the Chain field value if set, zero value otherwise.
func (o *SslCertificate) GetChain() string {
	if o == nil || IsNil(o.Chain) {
		var ret string
		return ret
	}
	return *o.Chain
}

// GetChainOk returns a tuple with the Chain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCertificate) GetChainOk() (*string, bool) {
	if o == nil || IsNil(o.Chain) {
		return nil, false
	}
	return o.Chain, true
}

// HasChain returns a boolean if a field has been set.
func (o *SslCertificate) HasChain() bool {
	if o != nil && !IsNil(o.Chain) {
		return true
	}

	return false
}

// SetChain gets a reference to the given string and assigns it to the Chain field.
func (o *SslCertificate) SetChain(v string) {
	o.Chain = &v
}

func (o SslCertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SslCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["privateKey"] = o.PrivateKey
	toSerialize["certificate"] = o.Certificate
	if !IsNil(o.Chain) {
		toSerialize["chain"] = o.Chain
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SslCertificate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"privateKey",
		"certificate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSslCertificate := _SslCertificate{}

	err = json.Unmarshal(data, &varSslCertificate)

	if err != nil {
		return err
	}

	*o = SslCertificate(varSslCertificate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "privateKey")
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "chain")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSslCertificate struct {
	value *SslCertificate
	isSet bool
}

func (v NullableSslCertificate) Get() *SslCertificate {
	return v.value
}

func (v *NullableSslCertificate) Set(val *SslCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableSslCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableSslCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslCertificate(val *SslCertificate) *NullableSslCertificate {
	return &NullableSslCertificate{value: val, isSet: true}
}

func (v NullableSslCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


