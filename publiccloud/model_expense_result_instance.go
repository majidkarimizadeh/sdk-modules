/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"time"
)

// checks if the ExpenseResultInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpenseResultInstance{}

// ExpenseResultInstance struct for ExpenseResultInstance
type ExpenseResultInstance struct {
	// The unique identifier for the instance.
	Id *string `json:"id,omitempty"`
	// The reference of the instance.
	Reference *string `json:"reference,omitempty"`
	Resources *Resources `json:"resources,omitempty"`
	Contract *Contract `json:"contract,omitempty"`
	// Date when the instance was started
	StartedAt *time.Time `json:"startedAt,omitempty"`
	// Date when the instance ended
	EndedAt *time.Time `json:"endedAt,omitempty"`
	// The root disk's size in GB. Must be at least 5 GB for Linux and FreeBSD instances and 50 GB for Windows instances
	RootDiskSize *int32 `json:"rootDiskSize,omitempty"`
	RootDiskStorageType *StorageType `json:"rootDiskStorageType,omitempty"`
	// The billing type of the instance. PREPAID is used for monthly commited instances, POSTPAID for hourly instances.
	BillingType *string `json:"billingType,omitempty"`
	// The number of hours the instance has been running.
	Hours *int32 `json:"hours,omitempty"`
	// The start date of the billing period.
	From *time.Time `json:"from,omitempty"`
	// The end date of the billing period.
	To *time.Time `json:"to,omitempty"`
	// The price of the instance for the billing period.
	Price *string `json:"price,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExpenseResultInstance ExpenseResultInstance

// NewExpenseResultInstance instantiates a new ExpenseResultInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpenseResultInstance() *ExpenseResultInstance {
	this := ExpenseResultInstance{}
	return &this
}

// NewExpenseResultInstanceWithDefaults instantiates a new ExpenseResultInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpenseResultInstanceWithDefaults() *ExpenseResultInstance {
	this := ExpenseResultInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExpenseResultInstance) SetId(v string) {
	o.Id = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *ExpenseResultInstance) SetReference(v string) {
	o.Reference = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetResources() Resources {
	if o == nil || IsNil(o.Resources) {
		var ret Resources
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetResourcesOk() (*Resources, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given Resources and assigns it to the Resources field.
func (o *ExpenseResultInstance) SetResources(v Resources) {
	o.Resources = &v
}

// GetContract returns the Contract field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetContract() Contract {
	if o == nil || IsNil(o.Contract) {
		var ret Contract
		return ret
	}
	return *o.Contract
}

// GetContractOk returns a tuple with the Contract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetContractOk() (*Contract, bool) {
	if o == nil || IsNil(o.Contract) {
		return nil, false
	}
	return o.Contract, true
}

// HasContract returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasContract() bool {
	if o != nil && !IsNil(o.Contract) {
		return true
	}

	return false
}

// SetContract gets a reference to the given Contract and assigns it to the Contract field.
func (o *ExpenseResultInstance) SetContract(v Contract) {
	o.Contract = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *ExpenseResultInstance) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetEndedAt() time.Time {
	if o == nil || IsNil(o.EndedAt) {
		var ret time.Time
		return ret
	}
	return *o.EndedAt
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetEndedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndedAt) {
		return nil, false
	}
	return o.EndedAt, true
}

// HasEndedAt returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasEndedAt() bool {
	if o != nil && !IsNil(o.EndedAt) {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given time.Time and assigns it to the EndedAt field.
func (o *ExpenseResultInstance) SetEndedAt(v time.Time) {
	o.EndedAt = &v
}

// GetRootDiskSize returns the RootDiskSize field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetRootDiskSize() int32 {
	if o == nil || IsNil(o.RootDiskSize) {
		var ret int32
		return ret
	}
	return *o.RootDiskSize
}

// GetRootDiskSizeOk returns a tuple with the RootDiskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetRootDiskSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.RootDiskSize) {
		return nil, false
	}
	return o.RootDiskSize, true
}

// HasRootDiskSize returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasRootDiskSize() bool {
	if o != nil && !IsNil(o.RootDiskSize) {
		return true
	}

	return false
}

// SetRootDiskSize gets a reference to the given int32 and assigns it to the RootDiskSize field.
func (o *ExpenseResultInstance) SetRootDiskSize(v int32) {
	o.RootDiskSize = &v
}

// GetRootDiskStorageType returns the RootDiskStorageType field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetRootDiskStorageType() StorageType {
	if o == nil || IsNil(o.RootDiskStorageType) {
		var ret StorageType
		return ret
	}
	return *o.RootDiskStorageType
}

// GetRootDiskStorageTypeOk returns a tuple with the RootDiskStorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetRootDiskStorageTypeOk() (*StorageType, bool) {
	if o == nil || IsNil(o.RootDiskStorageType) {
		return nil, false
	}
	return o.RootDiskStorageType, true
}

// HasRootDiskStorageType returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasRootDiskStorageType() bool {
	if o != nil && !IsNil(o.RootDiskStorageType) {
		return true
	}

	return false
}

// SetRootDiskStorageType gets a reference to the given StorageType and assigns it to the RootDiskStorageType field.
func (o *ExpenseResultInstance) SetRootDiskStorageType(v StorageType) {
	o.RootDiskStorageType = &v
}

// GetBillingType returns the BillingType field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetBillingType() string {
	if o == nil || IsNil(o.BillingType) {
		var ret string
		return ret
	}
	return *o.BillingType
}

// GetBillingTypeOk returns a tuple with the BillingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetBillingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BillingType) {
		return nil, false
	}
	return o.BillingType, true
}

// HasBillingType returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasBillingType() bool {
	if o != nil && !IsNil(o.BillingType) {
		return true
	}

	return false
}

// SetBillingType gets a reference to the given string and assigns it to the BillingType field.
func (o *ExpenseResultInstance) SetBillingType(v string) {
	o.BillingType = &v
}

// GetHours returns the Hours field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetHours() int32 {
	if o == nil || IsNil(o.Hours) {
		var ret int32
		return ret
	}
	return *o.Hours
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetHoursOk() (*int32, bool) {
	if o == nil || IsNil(o.Hours) {
		return nil, false
	}
	return o.Hours, true
}

// HasHours returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasHours() bool {
	if o != nil && !IsNil(o.Hours) {
		return true
	}

	return false
}

// SetHours gets a reference to the given int32 and assigns it to the Hours field.
func (o *ExpenseResultInstance) SetHours(v int32) {
	o.Hours = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetFrom() time.Time {
	if o == nil || IsNil(o.From) {
		var ret time.Time
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given time.Time and assigns it to the From field.
func (o *ExpenseResultInstance) SetFrom(v time.Time) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetTo() time.Time {
	if o == nil || IsNil(o.To) {
		var ret time.Time
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetToOk() (*time.Time, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given time.Time and assigns it to the To field.
func (o *ExpenseResultInstance) SetTo(v time.Time) {
	o.To = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ExpenseResultInstance) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseResultInstance) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ExpenseResultInstance) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *ExpenseResultInstance) SetPrice(v string) {
	o.Price = &v
}

func (o ExpenseResultInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpenseResultInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.Contract) {
		toSerialize["contract"] = o.Contract
	}
	if !IsNil(o.StartedAt) {
		toSerialize["startedAt"] = o.StartedAt
	}
	if !IsNil(o.EndedAt) {
		toSerialize["endedAt"] = o.EndedAt
	}
	if !IsNil(o.RootDiskSize) {
		toSerialize["rootDiskSize"] = o.RootDiskSize
	}
	if !IsNil(o.RootDiskStorageType) {
		toSerialize["rootDiskStorageType"] = o.RootDiskStorageType
	}
	if !IsNil(o.BillingType) {
		toSerialize["billingType"] = o.BillingType
	}
	if !IsNil(o.Hours) {
		toSerialize["hours"] = o.Hours
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExpenseResultInstance) UnmarshalJSON(data []byte) (err error) {
	varExpenseResultInstance := _ExpenseResultInstance{}

	err = json.Unmarshal(data, &varExpenseResultInstance)

	if err != nil {
		return err
	}

	*o = ExpenseResultInstance(varExpenseResultInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "reference")
		delete(additionalProperties, "resources")
		delete(additionalProperties, "contract")
		delete(additionalProperties, "startedAt")
		delete(additionalProperties, "endedAt")
		delete(additionalProperties, "rootDiskSize")
		delete(additionalProperties, "rootDiskStorageType")
		delete(additionalProperties, "billingType")
		delete(additionalProperties, "hours")
		delete(additionalProperties, "from")
		delete(additionalProperties, "to")
		delete(additionalProperties, "price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExpenseResultInstance struct {
	value *ExpenseResultInstance
	isSet bool
}

func (v NullableExpenseResultInstance) Get() *ExpenseResultInstance {
	return v.value
}

func (v *NullableExpenseResultInstance) Set(val *ExpenseResultInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableExpenseResultInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableExpenseResultInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpenseResultInstance(val *ExpenseResultInstance) *NullableExpenseResultInstance {
	return &NullableExpenseResultInstance{value: val, isSet: true}
}

func (v NullableExpenseResultInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpenseResultInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


