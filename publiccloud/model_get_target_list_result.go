/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
)

// checks if the GetTargetListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetTargetListResult{}

// GetTargetListResult struct for GetTargetListResult
type GetTargetListResult struct {
	Targets []Target `json:"targets,omitempty"`
	Metadata *Metadata `json:"_metadata,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetTargetListResult GetTargetListResult

// NewGetTargetListResult instantiates a new GetTargetListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetTargetListResult() *GetTargetListResult {
	this := GetTargetListResult{}
	return &this
}

// NewGetTargetListResultWithDefaults instantiates a new GetTargetListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetTargetListResultWithDefaults() *GetTargetListResult {
	this := GetTargetListResult{}
	return &this
}

// GetTargets returns the Targets field value if set, zero value otherwise.
func (o *GetTargetListResult) GetTargets() []Target {
	if o == nil || IsNil(o.Targets) {
		var ret []Target
		return ret
	}
	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTargetListResult) GetTargetsOk() ([]Target, bool) {
	if o == nil || IsNil(o.Targets) {
		return nil, false
	}
	return o.Targets, true
}

// HasTargets returns a boolean if a field has been set.
func (o *GetTargetListResult) HasTargets() bool {
	if o != nil && !IsNil(o.Targets) {
		return true
	}

	return false
}

// SetTargets gets a reference to the given []Target and assigns it to the Targets field.
func (o *GetTargetListResult) SetTargets(v []Target) {
	o.Targets = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *GetTargetListResult) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTargetListResult) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *GetTargetListResult) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *GetTargetListResult) SetMetadata(v Metadata) {
	o.Metadata = &v
}

func (o GetTargetListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetTargetListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Targets) {
		toSerialize["targets"] = o.Targets
	}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetTargetListResult) UnmarshalJSON(data []byte) (err error) {
	varGetTargetListResult := _GetTargetListResult{}

	err = json.Unmarshal(data, &varGetTargetListResult)

	if err != nil {
		return err
	}

	*o = GetTargetListResult(varGetTargetListResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "targets")
		delete(additionalProperties, "_metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetTargetListResult struct {
	value *GetTargetListResult
	isSet bool
}

func (v NullableGetTargetListResult) Get() *GetTargetListResult {
	return v.value
}

func (v *NullableGetTargetListResult) Set(val *GetTargetListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTargetListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTargetListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTargetListResult(val *GetTargetListResult) *NullableGetTargetListResult {
	return &NullableGetTargetListResult{value: val, isSet: true}
}

func (v NullableGetTargetListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTargetListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


