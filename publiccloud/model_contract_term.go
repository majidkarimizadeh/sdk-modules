/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// ContractTerm Contract commitment. Used only when contract type is MONTHLY
type ContractTerm int32

// List of contractTerm
const (
	CONTRACTTERM__0 ContractTerm = 0
	CONTRACTTERM__1 ContractTerm = 1
	CONTRACTTERM__3 ContractTerm = 3
	CONTRACTTERM__6 ContractTerm = 6
	CONTRACTTERM__12 ContractTerm = 12
)

// All allowed values of ContractTerm enum
var AllowedContractTermEnumValues = []ContractTerm{
	0,
	1,
	3,
	6,
	12,
}

func (v *ContractTerm) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContractTerm(value)
	for _, existing := range AllowedContractTermEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContractTerm", value)
}

// NewContractTermFromValue returns a pointer to a valid ContractTerm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContractTermFromValue(v int32) (*ContractTerm, error) {
	ev := ContractTerm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContractTerm: valid values are %v", v, AllowedContractTermEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContractTerm) IsValid() bool {
	for _, existing := range AllowedContractTermEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to contractTerm value
func (v ContractTerm) Ptr() *ContractTerm {
	return &v
}

type NullableContractTerm struct {
	value *ContractTerm
	isSet bool
}

func (v NullableContractTerm) Get() *ContractTerm {
	return v.value
}

func (v *NullableContractTerm) Set(val *ContractTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableContractTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableContractTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractTerm(val *ContractTerm) *NullableContractTerm {
	return &NullableContractTerm{value: val, isSet: true}
}

func (v NullableContractTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

