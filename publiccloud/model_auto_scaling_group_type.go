/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// AutoScalingGroupType Auto Scaling Group type
type AutoScalingGroupType string

// List of autoScalingGroupType
const (
	AUTOSCALINGGROUPTYPE_MANUAL AutoScalingGroupType = "MANUAL"
	AUTOSCALINGGROUPTYPE_SCHEDULED AutoScalingGroupType = "SCHEDULED"
	AUTOSCALINGGROUPTYPE_CPU_BASED AutoScalingGroupType = "CPU_BASED"
)

// All allowed values of AutoScalingGroupType enum
var AllowedAutoScalingGroupTypeEnumValues = []AutoScalingGroupType{
	"MANUAL",
	"SCHEDULED",
	"CPU_BASED",
}

func (v *AutoScalingGroupType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AutoScalingGroupType(value)
	for _, existing := range AllowedAutoScalingGroupTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AutoScalingGroupType", value)
}

// NewAutoScalingGroupTypeFromValue returns a pointer to a valid AutoScalingGroupType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAutoScalingGroupTypeFromValue(v string) (*AutoScalingGroupType, error) {
	ev := AutoScalingGroupType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AutoScalingGroupType: valid values are %v", v, AllowedAutoScalingGroupTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AutoScalingGroupType) IsValid() bool {
	for _, existing := range AllowedAutoScalingGroupTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to autoScalingGroupType value
func (v AutoScalingGroupType) Ptr() *AutoScalingGroupType {
	return &v
}

type NullableAutoScalingGroupType struct {
	value *AutoScalingGroupType
	isSet bool
}

func (v NullableAutoScalingGroupType) Get() *AutoScalingGroupType {
	return v.value
}

func (v *NullableAutoScalingGroupType) Set(val *AutoScalingGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoScalingGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoScalingGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoScalingGroupType(val *AutoScalingGroupType) *NullableAutoScalingGroupType {
	return &NullableAutoScalingGroupType{value: val, isSet: true}
}

func (v NullableAutoScalingGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoScalingGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

