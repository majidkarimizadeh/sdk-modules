/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CreateAutoScalingGroupOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAutoScalingGroupOpts{}

// CreateAutoScalingGroupOpts struct for CreateAutoScalingGroupOpts
type CreateAutoScalingGroupOpts struct {
	// Required for \"MANUAL\" and \"SCHEDULED\" auto scaling group. Number of instances to be launched
	DesiredAmount *int32 `json:"desiredAmount,omitempty"`
	// Required for \"CPU_BASED\". The minimum number of instances that should be running
	MinimumAmount *int32 `json:"minimumAmount,omitempty"`
	// Required for \"CPU_BASED\" auto scaling group. The maximum number of instances that can be running
	MaximumAmount *int32 `json:"maximumAmount,omitempty"`
	// Required for \"CPU_BASED\" auto scaling group. The target average CPU utilization for scaling
	CpuThreshold *int32 `json:"cpuThreshold,omitempty"`
	// Required for \"CPU_BASED\" auto scaling group. Warm-up time in seconds for new instances
	WarmupTime *int32 `json:"warmupTime,omitempty"`
	// Required for \"CPU_BASED\" auto scaling group. Cool-down time in seconds for new instances
	CooldownTime *int32 `json:"cooldownTime,omitempty"`
	// The instance on which instances will be based on. This instance needs to be either Running or Stopped
	InstanceId string `json:"instanceId"`
	// The identifying name set to the auto scaling group
	Reference string `json:"reference"`
	Type string `json:"type"`
	// Required for \"SCHEDULED\" auto scaling group. Date and time (UTC) that the instances need to be launched
	StartsAt *time.Time `json:"startsAt,omitempty"`
	// Required for \"SCHEDULED\" auto scaling group. Date and time (UTC) that the instances need to be terminated
	EndsAt *time.Time `json:"endsAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateAutoScalingGroupOpts CreateAutoScalingGroupOpts

// NewCreateAutoScalingGroupOpts instantiates a new CreateAutoScalingGroupOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAutoScalingGroupOpts(instanceId string, reference string, type_ string) *CreateAutoScalingGroupOpts {
	this := CreateAutoScalingGroupOpts{}
	this.InstanceId = instanceId
	this.Reference = reference
	this.Type = type_
	return &this
}

// NewCreateAutoScalingGroupOptsWithDefaults instantiates a new CreateAutoScalingGroupOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAutoScalingGroupOptsWithDefaults() *CreateAutoScalingGroupOpts {
	this := CreateAutoScalingGroupOpts{}
	return &this
}

// GetDesiredAmount returns the DesiredAmount field value if set, zero value otherwise.
func (o *CreateAutoScalingGroupOpts) GetDesiredAmount() int32 {
	if o == nil || IsNil(o.DesiredAmount) {
		var ret int32
		return ret
	}
	return *o.DesiredAmount
}

// GetDesiredAmountOk returns a tuple with the DesiredAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAutoScalingGroupOpts) GetDesiredAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.DesiredAmount) {
		return nil, false
	}
	return o.DesiredAmount, true
}

// HasDesiredAmount returns a boolean if a field has been set.
func (o *CreateAutoScalingGroupOpts) HasDesiredAmount() bool {
	if o != nil && !IsNil(o.DesiredAmount) {
		return true
	}

	return false
}

// SetDesiredAmount gets a reference to the given int32 and assigns it to the DesiredAmount field.
func (o *CreateAutoScalingGroupOpts) SetDesiredAmount(v int32) {
	o.DesiredAmount = &v
}

// GetMinimumAmount returns the MinimumAmount field value if set, zero value otherwise.
func (o *CreateAutoScalingGroupOpts) GetMinimumAmount() int32 {
	if o == nil || IsNil(o.MinimumAmount) {
		var ret int32
		return ret
	}
	return *o.MinimumAmount
}

// GetMinimumAmountOk returns a tuple with the MinimumAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAutoScalingGroupOpts) GetMinimumAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumAmount) {
		return nil, false
	}
	return o.MinimumAmount, true
}

// HasMinimumAmount returns a boolean if a field has been set.
func (o *CreateAutoScalingGroupOpts) HasMinimumAmount() bool {
	if o != nil && !IsNil(o.MinimumAmount) {
		return true
	}

	return false
}

// SetMinimumAmount gets a reference to the given int32 and assigns it to the MinimumAmount field.
func (o *CreateAutoScalingGroupOpts) SetMinimumAmount(v int32) {
	o.MinimumAmount = &v
}

// GetMaximumAmount returns the MaximumAmount field value if set, zero value otherwise.
func (o *CreateAutoScalingGroupOpts) GetMaximumAmount() int32 {
	if o == nil || IsNil(o.MaximumAmount) {
		var ret int32
		return ret
	}
	return *o.MaximumAmount
}

// GetMaximumAmountOk returns a tuple with the MaximumAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAutoScalingGroupOpts) GetMaximumAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumAmount) {
		return nil, false
	}
	return o.MaximumAmount, true
}

// HasMaximumAmount returns a boolean if a field has been set.
func (o *CreateAutoScalingGroupOpts) HasMaximumAmount() bool {
	if o != nil && !IsNil(o.MaximumAmount) {
		return true
	}

	return false
}

// SetMaximumAmount gets a reference to the given int32 and assigns it to the MaximumAmount field.
func (o *CreateAutoScalingGroupOpts) SetMaximumAmount(v int32) {
	o.MaximumAmount = &v
}

// GetCpuThreshold returns the CpuThreshold field value if set, zero value otherwise.
func (o *CreateAutoScalingGroupOpts) GetCpuThreshold() int32 {
	if o == nil || IsNil(o.CpuThreshold) {
		var ret int32
		return ret
	}
	return *o.CpuThreshold
}

// GetCpuThresholdOk returns a tuple with the CpuThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAutoScalingGroupOpts) GetCpuThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.CpuThreshold) {
		return nil, false
	}
	return o.CpuThreshold, true
}

// HasCpuThreshold returns a boolean if a field has been set.
func (o *CreateAutoScalingGroupOpts) HasCpuThreshold() bool {
	if o != nil && !IsNil(o.CpuThreshold) {
		return true
	}

	return false
}

// SetCpuThreshold gets a reference to the given int32 and assigns it to the CpuThreshold field.
func (o *CreateAutoScalingGroupOpts) SetCpuThreshold(v int32) {
	o.CpuThreshold = &v
}

// GetWarmupTime returns the WarmupTime field value if set, zero value otherwise.
func (o *CreateAutoScalingGroupOpts) GetWarmupTime() int32 {
	if o == nil || IsNil(o.WarmupTime) {
		var ret int32
		return ret
	}
	return *o.WarmupTime
}

// GetWarmupTimeOk returns a tuple with the WarmupTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAutoScalingGroupOpts) GetWarmupTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.WarmupTime) {
		return nil, false
	}
	return o.WarmupTime, true
}

// HasWarmupTime returns a boolean if a field has been set.
func (o *CreateAutoScalingGroupOpts) HasWarmupTime() bool {
	if o != nil && !IsNil(o.WarmupTime) {
		return true
	}

	return false
}

// SetWarmupTime gets a reference to the given int32 and assigns it to the WarmupTime field.
func (o *CreateAutoScalingGroupOpts) SetWarmupTime(v int32) {
	o.WarmupTime = &v
}

// GetCooldownTime returns the CooldownTime field value if set, zero value otherwise.
func (o *CreateAutoScalingGroupOpts) GetCooldownTime() int32 {
	if o == nil || IsNil(o.CooldownTime) {
		var ret int32
		return ret
	}
	return *o.CooldownTime
}

// GetCooldownTimeOk returns a tuple with the CooldownTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAutoScalingGroupOpts) GetCooldownTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.CooldownTime) {
		return nil, false
	}
	return o.CooldownTime, true
}

// HasCooldownTime returns a boolean if a field has been set.
func (o *CreateAutoScalingGroupOpts) HasCooldownTime() bool {
	if o != nil && !IsNil(o.CooldownTime) {
		return true
	}

	return false
}

// SetCooldownTime gets a reference to the given int32 and assigns it to the CooldownTime field.
func (o *CreateAutoScalingGroupOpts) SetCooldownTime(v int32) {
	o.CooldownTime = &v
}

// GetInstanceId returns the InstanceId field value
func (o *CreateAutoScalingGroupOpts) GetInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *CreateAutoScalingGroupOpts) GetInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *CreateAutoScalingGroupOpts) SetInstanceId(v string) {
	o.InstanceId = v
}

// GetReference returns the Reference field value
func (o *CreateAutoScalingGroupOpts) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *CreateAutoScalingGroupOpts) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *CreateAutoScalingGroupOpts) SetReference(v string) {
	o.Reference = v
}

// GetType returns the Type field value
func (o *CreateAutoScalingGroupOpts) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateAutoScalingGroupOpts) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateAutoScalingGroupOpts) SetType(v string) {
	o.Type = v
}

// GetStartsAt returns the StartsAt field value if set, zero value otherwise.
func (o *CreateAutoScalingGroupOpts) GetStartsAt() time.Time {
	if o == nil || IsNil(o.StartsAt) {
		var ret time.Time
		return ret
	}
	return *o.StartsAt
}

// GetStartsAtOk returns a tuple with the StartsAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAutoScalingGroupOpts) GetStartsAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartsAt) {
		return nil, false
	}
	return o.StartsAt, true
}

// HasStartsAt returns a boolean if a field has been set.
func (o *CreateAutoScalingGroupOpts) HasStartsAt() bool {
	if o != nil && !IsNil(o.StartsAt) {
		return true
	}

	return false
}

// SetStartsAt gets a reference to the given time.Time and assigns it to the StartsAt field.
func (o *CreateAutoScalingGroupOpts) SetStartsAt(v time.Time) {
	o.StartsAt = &v
}

// GetEndsAt returns the EndsAt field value if set, zero value otherwise.
func (o *CreateAutoScalingGroupOpts) GetEndsAt() time.Time {
	if o == nil || IsNil(o.EndsAt) {
		var ret time.Time
		return ret
	}
	return *o.EndsAt
}

// GetEndsAtOk returns a tuple with the EndsAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAutoScalingGroupOpts) GetEndsAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndsAt) {
		return nil, false
	}
	return o.EndsAt, true
}

// HasEndsAt returns a boolean if a field has been set.
func (o *CreateAutoScalingGroupOpts) HasEndsAt() bool {
	if o != nil && !IsNil(o.EndsAt) {
		return true
	}

	return false
}

// SetEndsAt gets a reference to the given time.Time and assigns it to the EndsAt field.
func (o *CreateAutoScalingGroupOpts) SetEndsAt(v time.Time) {
	o.EndsAt = &v
}

func (o CreateAutoScalingGroupOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAutoScalingGroupOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DesiredAmount) {
		toSerialize["desiredAmount"] = o.DesiredAmount
	}
	if !IsNil(o.MinimumAmount) {
		toSerialize["minimumAmount"] = o.MinimumAmount
	}
	if !IsNil(o.MaximumAmount) {
		toSerialize["maximumAmount"] = o.MaximumAmount
	}
	if !IsNil(o.CpuThreshold) {
		toSerialize["cpuThreshold"] = o.CpuThreshold
	}
	if !IsNil(o.WarmupTime) {
		toSerialize["warmupTime"] = o.WarmupTime
	}
	if !IsNil(o.CooldownTime) {
		toSerialize["cooldownTime"] = o.CooldownTime
	}
	toSerialize["instanceId"] = o.InstanceId
	toSerialize["reference"] = o.Reference
	toSerialize["type"] = o.Type
	if !IsNil(o.StartsAt) {
		toSerialize["startsAt"] = o.StartsAt
	}
	if !IsNil(o.EndsAt) {
		toSerialize["endsAt"] = o.EndsAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateAutoScalingGroupOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instanceId",
		"reference",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAutoScalingGroupOpts := _CreateAutoScalingGroupOpts{}

	err = json.Unmarshal(data, &varCreateAutoScalingGroupOpts)

	if err != nil {
		return err
	}

	*o = CreateAutoScalingGroupOpts(varCreateAutoScalingGroupOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "desiredAmount")
		delete(additionalProperties, "minimumAmount")
		delete(additionalProperties, "maximumAmount")
		delete(additionalProperties, "cpuThreshold")
		delete(additionalProperties, "warmupTime")
		delete(additionalProperties, "cooldownTime")
		delete(additionalProperties, "instanceId")
		delete(additionalProperties, "reference")
		delete(additionalProperties, "type")
		delete(additionalProperties, "startsAt")
		delete(additionalProperties, "endsAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateAutoScalingGroupOpts struct {
	value *CreateAutoScalingGroupOpts
	isSet bool
}

func (v NullableCreateAutoScalingGroupOpts) Get() *CreateAutoScalingGroupOpts {
	return v.value
}

func (v *NullableCreateAutoScalingGroupOpts) Set(val *CreateAutoScalingGroupOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAutoScalingGroupOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAutoScalingGroupOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAutoScalingGroupOpts(val *CreateAutoScalingGroupOpts) *NullableCreateAutoScalingGroupOpts {
	return &NullableCreateAutoScalingGroupOpts{value: val, isSet: true}
}

func (v NullableCreateAutoScalingGroupOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAutoScalingGroupOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


