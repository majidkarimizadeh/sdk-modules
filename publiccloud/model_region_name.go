/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// RegionName region name
type RegionName string

// List of regionName
const (
	REGIONNAME_EU_WEST_3 RegionName = "eu-west-3"
	REGIONNAME_US_EAST_1 RegionName = "us-east-1"
	REGIONNAME_EU_CENTRAL_1 RegionName = "eu-central-1"
	REGIONNAME_AP_SOUTHEAST_1 RegionName = "ap-southeast-1"
	REGIONNAME_US_WEST_1 RegionName = "us-west-1"
	REGIONNAME_EU_WEST_2 RegionName = "eu-west-2"
	REGIONNAME_CA_CENTRAL_1 RegionName = "ca-central-1"
)

// All allowed values of RegionName enum
var AllowedRegionNameEnumValues = []RegionName{
	"eu-west-3",
	"us-east-1",
	"eu-central-1",
	"ap-southeast-1",
	"us-west-1",
	"eu-west-2",
	"ca-central-1",
}

func (v *RegionName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RegionName(value)
	for _, existing := range AllowedRegionNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RegionName", value)
}

// NewRegionNameFromValue returns a pointer to a valid RegionName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegionNameFromValue(v string) (*RegionName, error) {
	ev := RegionName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RegionName: valid values are %v", v, AllowedRegionNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegionName) IsValid() bool {
	for _, existing := range AllowedRegionNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to regionName value
func (v RegionName) Ptr() *RegionName {
	return &v
}

type NullableRegionName struct {
	value *RegionName
	isSet bool
}

func (v NullableRegionName) Get() *RegionName {
	return v.value
}

func (v *NullableRegionName) Set(val *RegionName) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionName) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionName(val *RegionName) *NullableRegionName {
	return &NullableRegionName{value: val, isSet: true}
}

func (v NullableRegionName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

