/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
)

// checks if the LoadBalancerListenerOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadBalancerListenerOpts{}

// LoadBalancerListenerOpts struct for LoadBalancerListenerOpts
type LoadBalancerListenerOpts struct {
	Protocol *Protocol `json:"protocol,omitempty"`
	// Port that the listener listens to
	Port *int32 `json:"port,omitempty"`
	Certificate *SslCertificate `json:"certificate,omitempty"`
	DefaultRule *LoadBalancerListenerDefaultRule `json:"defaultRule,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LoadBalancerListenerOpts LoadBalancerListenerOpts

// NewLoadBalancerListenerOpts instantiates a new LoadBalancerListenerOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadBalancerListenerOpts() *LoadBalancerListenerOpts {
	this := LoadBalancerListenerOpts{}
	return &this
}

// NewLoadBalancerListenerOptsWithDefaults instantiates a new LoadBalancerListenerOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadBalancerListenerOptsWithDefaults() *LoadBalancerListenerOpts {
	this := LoadBalancerListenerOpts{}
	return &this
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *LoadBalancerListenerOpts) GetProtocol() Protocol {
	if o == nil || IsNil(o.Protocol) {
		var ret Protocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerListenerOpts) GetProtocolOk() (*Protocol, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *LoadBalancerListenerOpts) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given Protocol and assigns it to the Protocol field.
func (o *LoadBalancerListenerOpts) SetProtocol(v Protocol) {
	o.Protocol = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *LoadBalancerListenerOpts) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerListenerOpts) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *LoadBalancerListenerOpts) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *LoadBalancerListenerOpts) SetPort(v int32) {
	o.Port = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *LoadBalancerListenerOpts) GetCertificate() SslCertificate {
	if o == nil || IsNil(o.Certificate) {
		var ret SslCertificate
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerListenerOpts) GetCertificateOk() (*SslCertificate, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *LoadBalancerListenerOpts) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given SslCertificate and assigns it to the Certificate field.
func (o *LoadBalancerListenerOpts) SetCertificate(v SslCertificate) {
	o.Certificate = &v
}

// GetDefaultRule returns the DefaultRule field value if set, zero value otherwise.
func (o *LoadBalancerListenerOpts) GetDefaultRule() LoadBalancerListenerDefaultRule {
	if o == nil || IsNil(o.DefaultRule) {
		var ret LoadBalancerListenerDefaultRule
		return ret
	}
	return *o.DefaultRule
}

// GetDefaultRuleOk returns a tuple with the DefaultRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerListenerOpts) GetDefaultRuleOk() (*LoadBalancerListenerDefaultRule, bool) {
	if o == nil || IsNil(o.DefaultRule) {
		return nil, false
	}
	return o.DefaultRule, true
}

// HasDefaultRule returns a boolean if a field has been set.
func (o *LoadBalancerListenerOpts) HasDefaultRule() bool {
	if o != nil && !IsNil(o.DefaultRule) {
		return true
	}

	return false
}

// SetDefaultRule gets a reference to the given LoadBalancerListenerDefaultRule and assigns it to the DefaultRule field.
func (o *LoadBalancerListenerOpts) SetDefaultRule(v LoadBalancerListenerDefaultRule) {
	o.DefaultRule = &v
}

func (o LoadBalancerListenerOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadBalancerListenerOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.DefaultRule) {
		toSerialize["defaultRule"] = o.DefaultRule
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LoadBalancerListenerOpts) UnmarshalJSON(data []byte) (err error) {
	varLoadBalancerListenerOpts := _LoadBalancerListenerOpts{}

	err = json.Unmarshal(data, &varLoadBalancerListenerOpts)

	if err != nil {
		return err
	}

	*o = LoadBalancerListenerOpts(varLoadBalancerListenerOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "port")
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "defaultRule")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLoadBalancerListenerOpts struct {
	value *LoadBalancerListenerOpts
	isSet bool
}

func (v NullableLoadBalancerListenerOpts) Get() *LoadBalancerListenerOpts {
	return v.value
}

func (v *NullableLoadBalancerListenerOpts) Set(val *LoadBalancerListenerOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerListenerOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerListenerOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerListenerOpts(val *LoadBalancerListenerOpts) *NullableLoadBalancerListenerOpts {
	return &NullableLoadBalancerListenerOpts{value: val, isSet: true}
}

func (v NullableLoadBalancerListenerOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerListenerOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


