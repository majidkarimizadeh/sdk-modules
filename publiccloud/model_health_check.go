/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the HealthCheck type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthCheck{}

// HealthCheck struct for HealthCheck
type HealthCheck struct {
	Protocol Protocol `json:"protocol"`
	Method NullableHttpMethod `json:"method"`
	// URI to check in the target instances
	Uri string `json:"uri"`
	// Host for the health check if any
	Host NullableString `json:"host"`
	// Port number
	Port int32 `json:"port"`
	AdditionalProperties map[string]interface{}
}

type _HealthCheck HealthCheck

// NewHealthCheck instantiates a new HealthCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthCheck(protocol Protocol, method NullableHttpMethod, uri string, host NullableString, port int32) *HealthCheck {
	this := HealthCheck{}
	this.Protocol = protocol
	this.Method = method
	this.Uri = uri
	this.Host = host
	this.Port = port
	return &this
}

// NewHealthCheckWithDefaults instantiates a new HealthCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthCheckWithDefaults() *HealthCheck {
	this := HealthCheck{}
	return &this
}

// GetProtocol returns the Protocol field value
func (o *HealthCheck) GetProtocol() Protocol {
	if o == nil {
		var ret Protocol
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *HealthCheck) GetProtocolOk() (*Protocol, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *HealthCheck) SetProtocol(v Protocol) {
	o.Protocol = v
}

// GetMethod returns the Method field value
// If the value is explicit nil, the zero value for HttpMethod will be returned
func (o *HealthCheck) GetMethod() HttpMethod {
	if o == nil || o.Method.Get() == nil {
		var ret HttpMethod
		return ret
	}

	return *o.Method.Get()
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthCheck) GetMethodOk() (*HttpMethod, bool) {
	if o == nil {
		return nil, false
	}
	return o.Method.Get(), o.Method.IsSet()
}

// SetMethod sets field value
func (o *HealthCheck) SetMethod(v HttpMethod) {
	o.Method.Set(&v)
}

// GetUri returns the Uri field value
func (o *HealthCheck) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *HealthCheck) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *HealthCheck) SetUri(v string) {
	o.Uri = v
}

// GetHost returns the Host field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HealthCheck) GetHost() string {
	if o == nil || o.Host.Get() == nil {
		var ret string
		return ret
	}

	return *o.Host.Get()
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthCheck) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Host.Get(), o.Host.IsSet()
}

// SetHost sets field value
func (o *HealthCheck) SetHost(v string) {
	o.Host.Set(&v)
}

// GetPort returns the Port field value
func (o *HealthCheck) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *HealthCheck) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *HealthCheck) SetPort(v int32) {
	o.Port = v
}

func (o HealthCheck) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthCheck) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["protocol"] = o.Protocol
	toSerialize["method"] = o.Method.Get()
	toSerialize["uri"] = o.Uri
	toSerialize["host"] = o.Host.Get()
	toSerialize["port"] = o.Port

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HealthCheck) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"protocol",
		"method",
		"uri",
		"host",
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHealthCheck := _HealthCheck{}

	err = json.Unmarshal(data, &varHealthCheck)

	if err != nil {
		return err
	}

	*o = HealthCheck(varHealthCheck)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "method")
		delete(additionalProperties, "uri")
		delete(additionalProperties, "host")
		delete(additionalProperties, "port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHealthCheck struct {
	value *HealthCheck
	isSet bool
}

func (v NullableHealthCheck) Get() *HealthCheck {
	return v.value
}

func (v *NullableHealthCheck) Set(val *HealthCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthCheck(val *HealthCheck) *NullableHealthCheck {
	return &NullableHealthCheck{value: val, isSet: true}
}

func (v NullableHealthCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


