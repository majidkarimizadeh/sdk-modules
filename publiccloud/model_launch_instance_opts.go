/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the LaunchInstanceOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LaunchInstanceOpts{}

// LaunchInstanceOpts struct for LaunchInstanceOpts
type LaunchInstanceOpts struct {
	Region RegionName `json:"region"`
	Type TypeName `json:"type"`
	// imageId can be either an Operating System or a UUID in case of a Custom Image
	ImageId string `json:"imageId"`
	// Market App ID that must be installed into the instance
	MarketAppId *string `json:"marketAppId,omitempty"`
	// An identifying name you can refer to the instance
	Reference *string `json:"reference,omitempty"`
	ContractType ContractType `json:"contractType"`
	ContractTerm ContractTerm `json:"contractTerm"`
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	// The root disk's size in GB. Must be at least 5 GB for Linux and FreeBSD instances and 50 GB for Windows instances
	RootDiskSize *int32 `json:"rootDiskSize,omitempty"`
	RootDiskStorageType StorageType `json:"rootDiskStorageType"`
	// Public SSH key to be installed into the instance. Must be used only on Linux/FreeBSD instances
	SshKey *string `json:"sshKey,omitempty"`
	// User data to be installed into the instance. Please note that this setting cannot be used in combination with the 'sshKey' setting. Send the user data as plain text, not encoded as base64.
	UserData *string `json:"userData,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LaunchInstanceOpts LaunchInstanceOpts

// NewLaunchInstanceOpts instantiates a new LaunchInstanceOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLaunchInstanceOpts(region RegionName, type_ TypeName, imageId string, contractType ContractType, contractTerm ContractTerm, billingFrequency BillingFrequency, rootDiskStorageType StorageType) *LaunchInstanceOpts {
	this := LaunchInstanceOpts{}
	this.Region = region
	this.Type = type_
	this.ImageId = imageId
	this.ContractType = contractType
	this.ContractTerm = contractTerm
	this.BillingFrequency = billingFrequency
	this.RootDiskStorageType = rootDiskStorageType
	return &this
}

// NewLaunchInstanceOptsWithDefaults instantiates a new LaunchInstanceOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLaunchInstanceOptsWithDefaults() *LaunchInstanceOpts {
	this := LaunchInstanceOpts{}
	return &this
}

// GetRegion returns the Region field value
func (o *LaunchInstanceOpts) GetRegion() RegionName {
	if o == nil {
		var ret RegionName
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *LaunchInstanceOpts) GetRegionOk() (*RegionName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *LaunchInstanceOpts) SetRegion(v RegionName) {
	o.Region = v
}

// GetType returns the Type field value
func (o *LaunchInstanceOpts) GetType() TypeName {
	if o == nil {
		var ret TypeName
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LaunchInstanceOpts) GetTypeOk() (*TypeName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LaunchInstanceOpts) SetType(v TypeName) {
	o.Type = v
}

// GetImageId returns the ImageId field value
func (o *LaunchInstanceOpts) GetImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value
// and a boolean to check if the value has been set.
func (o *LaunchInstanceOpts) GetImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageId, true
}

// SetImageId sets field value
func (o *LaunchInstanceOpts) SetImageId(v string) {
	o.ImageId = v
}

// GetMarketAppId returns the MarketAppId field value if set, zero value otherwise.
func (o *LaunchInstanceOpts) GetMarketAppId() string {
	if o == nil || IsNil(o.MarketAppId) {
		var ret string
		return ret
	}
	return *o.MarketAppId
}

// GetMarketAppIdOk returns a tuple with the MarketAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LaunchInstanceOpts) GetMarketAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.MarketAppId) {
		return nil, false
	}
	return o.MarketAppId, true
}

// HasMarketAppId returns a boolean if a field has been set.
func (o *LaunchInstanceOpts) HasMarketAppId() bool {
	if o != nil && !IsNil(o.MarketAppId) {
		return true
	}

	return false
}

// SetMarketAppId gets a reference to the given string and assigns it to the MarketAppId field.
func (o *LaunchInstanceOpts) SetMarketAppId(v string) {
	o.MarketAppId = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *LaunchInstanceOpts) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LaunchInstanceOpts) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *LaunchInstanceOpts) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *LaunchInstanceOpts) SetReference(v string) {
	o.Reference = &v
}

// GetContractType returns the ContractType field value
func (o *LaunchInstanceOpts) GetContractType() ContractType {
	if o == nil {
		var ret ContractType
		return ret
	}

	return o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value
// and a boolean to check if the value has been set.
func (o *LaunchInstanceOpts) GetContractTypeOk() (*ContractType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractType, true
}

// SetContractType sets field value
func (o *LaunchInstanceOpts) SetContractType(v ContractType) {
	o.ContractType = v
}

// GetContractTerm returns the ContractTerm field value
func (o *LaunchInstanceOpts) GetContractTerm() ContractTerm {
	if o == nil {
		var ret ContractTerm
		return ret
	}

	return o.ContractTerm
}

// GetContractTermOk returns a tuple with the ContractTerm field value
// and a boolean to check if the value has been set.
func (o *LaunchInstanceOpts) GetContractTermOk() (*ContractTerm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractTerm, true
}

// SetContractTerm sets field value
func (o *LaunchInstanceOpts) SetContractTerm(v ContractTerm) {
	o.ContractTerm = v
}

// GetBillingFrequency returns the BillingFrequency field value
func (o *LaunchInstanceOpts) GetBillingFrequency() BillingFrequency {
	if o == nil {
		var ret BillingFrequency
		return ret
	}

	return o.BillingFrequency
}

// GetBillingFrequencyOk returns a tuple with the BillingFrequency field value
// and a boolean to check if the value has been set.
func (o *LaunchInstanceOpts) GetBillingFrequencyOk() (*BillingFrequency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingFrequency, true
}

// SetBillingFrequency sets field value
func (o *LaunchInstanceOpts) SetBillingFrequency(v BillingFrequency) {
	o.BillingFrequency = v
}

// GetRootDiskSize returns the RootDiskSize field value if set, zero value otherwise.
func (o *LaunchInstanceOpts) GetRootDiskSize() int32 {
	if o == nil || IsNil(o.RootDiskSize) {
		var ret int32
		return ret
	}
	return *o.RootDiskSize
}

// GetRootDiskSizeOk returns a tuple with the RootDiskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LaunchInstanceOpts) GetRootDiskSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.RootDiskSize) {
		return nil, false
	}
	return o.RootDiskSize, true
}

// HasRootDiskSize returns a boolean if a field has been set.
func (o *LaunchInstanceOpts) HasRootDiskSize() bool {
	if o != nil && !IsNil(o.RootDiskSize) {
		return true
	}

	return false
}

// SetRootDiskSize gets a reference to the given int32 and assigns it to the RootDiskSize field.
func (o *LaunchInstanceOpts) SetRootDiskSize(v int32) {
	o.RootDiskSize = &v
}

// GetRootDiskStorageType returns the RootDiskStorageType field value
func (o *LaunchInstanceOpts) GetRootDiskStorageType() StorageType {
	if o == nil {
		var ret StorageType
		return ret
	}

	return o.RootDiskStorageType
}

// GetRootDiskStorageTypeOk returns a tuple with the RootDiskStorageType field value
// and a boolean to check if the value has been set.
func (o *LaunchInstanceOpts) GetRootDiskStorageTypeOk() (*StorageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootDiskStorageType, true
}

// SetRootDiskStorageType sets field value
func (o *LaunchInstanceOpts) SetRootDiskStorageType(v StorageType) {
	o.RootDiskStorageType = v
}

// GetSshKey returns the SshKey field value if set, zero value otherwise.
func (o *LaunchInstanceOpts) GetSshKey() string {
	if o == nil || IsNil(o.SshKey) {
		var ret string
		return ret
	}
	return *o.SshKey
}

// GetSshKeyOk returns a tuple with the SshKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LaunchInstanceOpts) GetSshKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SshKey) {
		return nil, false
	}
	return o.SshKey, true
}

// HasSshKey returns a boolean if a field has been set.
func (o *LaunchInstanceOpts) HasSshKey() bool {
	if o != nil && !IsNil(o.SshKey) {
		return true
	}

	return false
}

// SetSshKey gets a reference to the given string and assigns it to the SshKey field.
func (o *LaunchInstanceOpts) SetSshKey(v string) {
	o.SshKey = &v
}

// GetUserData returns the UserData field value if set, zero value otherwise.
func (o *LaunchInstanceOpts) GetUserData() string {
	if o == nil || IsNil(o.UserData) {
		var ret string
		return ret
	}
	return *o.UserData
}

// GetUserDataOk returns a tuple with the UserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LaunchInstanceOpts) GetUserDataOk() (*string, bool) {
	if o == nil || IsNil(o.UserData) {
		return nil, false
	}
	return o.UserData, true
}

// HasUserData returns a boolean if a field has been set.
func (o *LaunchInstanceOpts) HasUserData() bool {
	if o != nil && !IsNil(o.UserData) {
		return true
	}

	return false
}

// SetUserData gets a reference to the given string and assigns it to the UserData field.
func (o *LaunchInstanceOpts) SetUserData(v string) {
	o.UserData = &v
}

func (o LaunchInstanceOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LaunchInstanceOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region"] = o.Region
	toSerialize["type"] = o.Type
	toSerialize["imageId"] = o.ImageId
	if !IsNil(o.MarketAppId) {
		toSerialize["marketAppId"] = o.MarketAppId
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	toSerialize["contractType"] = o.ContractType
	toSerialize["contractTerm"] = o.ContractTerm
	toSerialize["billingFrequency"] = o.BillingFrequency
	if !IsNil(o.RootDiskSize) {
		toSerialize["rootDiskSize"] = o.RootDiskSize
	}
	toSerialize["rootDiskStorageType"] = o.RootDiskStorageType
	if !IsNil(o.SshKey) {
		toSerialize["sshKey"] = o.SshKey
	}
	if !IsNil(o.UserData) {
		toSerialize["userData"] = o.UserData
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LaunchInstanceOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
		"type",
		"imageId",
		"contractType",
		"contractTerm",
		"billingFrequency",
		"rootDiskStorageType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLaunchInstanceOpts := _LaunchInstanceOpts{}

	err = json.Unmarshal(data, &varLaunchInstanceOpts)

	if err != nil {
		return err
	}

	*o = LaunchInstanceOpts(varLaunchInstanceOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "region")
		delete(additionalProperties, "type")
		delete(additionalProperties, "imageId")
		delete(additionalProperties, "marketAppId")
		delete(additionalProperties, "reference")
		delete(additionalProperties, "contractType")
		delete(additionalProperties, "contractTerm")
		delete(additionalProperties, "billingFrequency")
		delete(additionalProperties, "rootDiskSize")
		delete(additionalProperties, "rootDiskStorageType")
		delete(additionalProperties, "sshKey")
		delete(additionalProperties, "userData")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLaunchInstanceOpts struct {
	value *LaunchInstanceOpts
	isSet bool
}

func (v NullableLaunchInstanceOpts) Get() *LaunchInstanceOpts {
	return v.value
}

func (v *NullableLaunchInstanceOpts) Set(val *LaunchInstanceOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableLaunchInstanceOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableLaunchInstanceOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLaunchInstanceOpts(val *LaunchInstanceOpts) *NullableLaunchInstanceOpts {
	return &NullableLaunchInstanceOpts{value: val, isSet: true}
}

func (v NullableLaunchInstanceOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLaunchInstanceOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


