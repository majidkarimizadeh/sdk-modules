/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the BaseContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseContract{}

// BaseContract struct for BaseContract
type BaseContract struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	Term ContractTerm `json:"term"`
	Type ContractType `json:"type"`
	EndsAt NullableTime `json:"endsAt"`
	// Date when the contract was created
	CreatedAt time.Time `json:"createdAt"`
	State ContractState `json:"state"`
	AdditionalProperties map[string]interface{}
}

type _BaseContract BaseContract

// NewBaseContract instantiates a new BaseContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseContract(billingFrequency BillingFrequency, term ContractTerm, type_ ContractType, endsAt NullableTime, createdAt time.Time, state ContractState) *BaseContract {
	this := BaseContract{}
	this.BillingFrequency = billingFrequency
	this.Term = term
	this.Type = type_
	this.EndsAt = endsAt
	this.CreatedAt = createdAt
	this.State = state
	return &this
}

// NewBaseContractWithDefaults instantiates a new BaseContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseContractWithDefaults() *BaseContract {
	this := BaseContract{}
	return &this
}

// GetBillingFrequency returns the BillingFrequency field value
func (o *BaseContract) GetBillingFrequency() BillingFrequency {
	if o == nil {
		var ret BillingFrequency
		return ret
	}

	return o.BillingFrequency
}

// GetBillingFrequencyOk returns a tuple with the BillingFrequency field value
// and a boolean to check if the value has been set.
func (o *BaseContract) GetBillingFrequencyOk() (*BillingFrequency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingFrequency, true
}

// SetBillingFrequency sets field value
func (o *BaseContract) SetBillingFrequency(v BillingFrequency) {
	o.BillingFrequency = v
}

// GetTerm returns the Term field value
func (o *BaseContract) GetTerm() ContractTerm {
	if o == nil {
		var ret ContractTerm
		return ret
	}

	return o.Term
}

// GetTermOk returns a tuple with the Term field value
// and a boolean to check if the value has been set.
func (o *BaseContract) GetTermOk() (*ContractTerm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Term, true
}

// SetTerm sets field value
func (o *BaseContract) SetTerm(v ContractTerm) {
	o.Term = v
}

// GetType returns the Type field value
func (o *BaseContract) GetType() ContractType {
	if o == nil {
		var ret ContractType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BaseContract) GetTypeOk() (*ContractType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BaseContract) SetType(v ContractType) {
	o.Type = v
}

// GetEndsAt returns the EndsAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *BaseContract) GetEndsAt() time.Time {
	if o == nil || o.EndsAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.EndsAt.Get()
}

// GetEndsAtOk returns a tuple with the EndsAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseContract) GetEndsAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndsAt.Get(), o.EndsAt.IsSet()
}

// SetEndsAt sets field value
func (o *BaseContract) SetEndsAt(v time.Time) {
	o.EndsAt.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *BaseContract) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *BaseContract) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *BaseContract) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetState returns the State field value
func (o *BaseContract) GetState() ContractState {
	if o == nil {
		var ret ContractState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *BaseContract) GetStateOk() (*ContractState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *BaseContract) SetState(v ContractState) {
	o.State = v
}

func (o BaseContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["billingFrequency"] = o.BillingFrequency
	toSerialize["term"] = o.Term
	toSerialize["type"] = o.Type
	toSerialize["endsAt"] = o.EndsAt.Get()
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["state"] = o.State

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BaseContract) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"billingFrequency",
		"term",
		"type",
		"endsAt",
		"createdAt",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBaseContract := _BaseContract{}

	err = json.Unmarshal(data, &varBaseContract)

	if err != nil {
		return err
	}

	*o = BaseContract(varBaseContract)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "billingFrequency")
		delete(additionalProperties, "term")
		delete(additionalProperties, "type")
		delete(additionalProperties, "endsAt")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBaseContract struct {
	value *BaseContract
	isSet bool
}

func (v NullableBaseContract) Get() *BaseContract {
	return v.value
}

func (v *NullableBaseContract) Set(val *BaseContract) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseContract) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseContract(val *BaseContract) *NullableBaseContract {
	return &NullableBaseContract{value: val, isSet: true}
}

func (v NullableBaseContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


