/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
)

// checks if the GetCredentialResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCredentialResult{}

// GetCredentialResult struct for GetCredentialResult
type GetCredentialResult struct {
	Type *CredentialType `json:"type,omitempty"`
	Username *string `json:"username,omitempty"`
	Password *string `json:"password,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetCredentialResult GetCredentialResult

// NewGetCredentialResult instantiates a new GetCredentialResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCredentialResult() *GetCredentialResult {
	this := GetCredentialResult{}
	return &this
}

// NewGetCredentialResultWithDefaults instantiates a new GetCredentialResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCredentialResultWithDefaults() *GetCredentialResult {
	this := GetCredentialResult{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetCredentialResult) GetType() CredentialType {
	if o == nil || IsNil(o.Type) {
		var ret CredentialType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCredentialResult) GetTypeOk() (*CredentialType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetCredentialResult) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CredentialType and assigns it to the Type field.
func (o *GetCredentialResult) SetType(v CredentialType) {
	o.Type = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *GetCredentialResult) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCredentialResult) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *GetCredentialResult) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *GetCredentialResult) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *GetCredentialResult) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCredentialResult) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *GetCredentialResult) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *GetCredentialResult) SetPassword(v string) {
	o.Password = &v
}

func (o GetCredentialResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetCredentialResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetCredentialResult) UnmarshalJSON(data []byte) (err error) {
	varGetCredentialResult := _GetCredentialResult{}

	err = json.Unmarshal(data, &varGetCredentialResult)

	if err != nil {
		return err
	}

	*o = GetCredentialResult(varGetCredentialResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetCredentialResult struct {
	value *GetCredentialResult
	isSet bool
}

func (v NullableGetCredentialResult) Get() *GetCredentialResult {
	return v.value
}

func (v *NullableGetCredentialResult) Set(val *GetCredentialResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCredentialResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCredentialResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCredentialResult(val *GetCredentialResult) *NullableGetCredentialResult {
	return &NullableGetCredentialResult{value: val, isSet: true}
}

func (v NullableGetCredentialResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCredentialResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


