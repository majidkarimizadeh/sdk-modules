/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateCredentialOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCredentialOpts{}

// UpdateCredentialOpts struct for UpdateCredentialOpts
type UpdateCredentialOpts struct {
	// The new password
	Password string `json:"password"`
	AdditionalProperties map[string]interface{}
}

type _UpdateCredentialOpts UpdateCredentialOpts

// NewUpdateCredentialOpts instantiates a new UpdateCredentialOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCredentialOpts(password string) *UpdateCredentialOpts {
	this := UpdateCredentialOpts{}
	this.Password = password
	return &this
}

// NewUpdateCredentialOptsWithDefaults instantiates a new UpdateCredentialOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCredentialOptsWithDefaults() *UpdateCredentialOpts {
	this := UpdateCredentialOpts{}
	return &this
}

// GetPassword returns the Password field value
func (o *UpdateCredentialOpts) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *UpdateCredentialOpts) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *UpdateCredentialOpts) SetPassword(v string) {
	o.Password = v
}

func (o UpdateCredentialOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCredentialOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateCredentialOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateCredentialOpts := _UpdateCredentialOpts{}

	err = json.Unmarshal(data, &varUpdateCredentialOpts)

	if err != nil {
		return err
	}

	*o = UpdateCredentialOpts(varUpdateCredentialOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateCredentialOpts struct {
	value *UpdateCredentialOpts
	isSet bool
}

func (v NullableUpdateCredentialOpts) Get() *UpdateCredentialOpts {
	return v.value
}

func (v *NullableUpdateCredentialOpts) Set(val *UpdateCredentialOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCredentialOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCredentialOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCredentialOpts(val *UpdateCredentialOpts) *NullableUpdateCredentialOpts {
	return &NullableUpdateCredentialOpts{value: val, isSet: true}
}

func (v NullableUpdateCredentialOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCredentialOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


