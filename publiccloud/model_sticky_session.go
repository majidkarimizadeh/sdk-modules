/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the StickySession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StickySession{}

// StickySession struct for StickySession
type StickySession struct {
	// If sticky session is enabled or not
	Enabled bool `json:"enabled"`
	// Time that the Load Balancer routes the requests from one requester to the same target instance
	MaxLifeTime int32 `json:"maxLifeTime"`
	AdditionalProperties map[string]interface{}
}

type _StickySession StickySession

// NewStickySession instantiates a new StickySession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStickySession(enabled bool, maxLifeTime int32) *StickySession {
	this := StickySession{}
	this.Enabled = enabled
	this.MaxLifeTime = maxLifeTime
	return &this
}

// NewStickySessionWithDefaults instantiates a new StickySession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStickySessionWithDefaults() *StickySession {
	this := StickySession{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *StickySession) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *StickySession) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *StickySession) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMaxLifeTime returns the MaxLifeTime field value
func (o *StickySession) GetMaxLifeTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxLifeTime
}

// GetMaxLifeTimeOk returns a tuple with the MaxLifeTime field value
// and a boolean to check if the value has been set.
func (o *StickySession) GetMaxLifeTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxLifeTime, true
}

// SetMaxLifeTime sets field value
func (o *StickySession) SetMaxLifeTime(v int32) {
	o.MaxLifeTime = v
}

func (o StickySession) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StickySession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["maxLifeTime"] = o.MaxLifeTime

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StickySession) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"maxLifeTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStickySession := _StickySession{}

	err = json.Unmarshal(data, &varStickySession)

	if err != nil {
		return err
	}

	*o = StickySession(varStickySession)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "maxLifeTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStickySession struct {
	value *StickySession
	isSet bool
}

func (v NullableStickySession) Get() *StickySession {
	return v.value
}

func (v *NullableStickySession) Set(val *StickySession) {
	v.value = val
	v.isSet = true
}

func (v NullableStickySession) IsSet() bool {
	return v.isSet
}

func (v *NullableStickySession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStickySession(val *StickySession) *NullableStickySession {
	return &NullableStickySession{value: val, isSet: true}
}

func (v NullableStickySession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStickySession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


