/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the TargetGroupIdOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetGroupIdOpts{}

// TargetGroupIdOpts struct for TargetGroupIdOpts
type TargetGroupIdOpts struct {
	// The target group unique identifier
	TargetGroupId string `json:"targetGroupId"`
	AdditionalProperties map[string]interface{}
}

type _TargetGroupIdOpts TargetGroupIdOpts

// NewTargetGroupIdOpts instantiates a new TargetGroupIdOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetGroupIdOpts(targetGroupId string) *TargetGroupIdOpts {
	this := TargetGroupIdOpts{}
	this.TargetGroupId = targetGroupId
	return &this
}

// NewTargetGroupIdOptsWithDefaults instantiates a new TargetGroupIdOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetGroupIdOptsWithDefaults() *TargetGroupIdOpts {
	this := TargetGroupIdOpts{}
	return &this
}

// GetTargetGroupId returns the TargetGroupId field value
func (o *TargetGroupIdOpts) GetTargetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetGroupId
}

// GetTargetGroupIdOk returns a tuple with the TargetGroupId field value
// and a boolean to check if the value has been set.
func (o *TargetGroupIdOpts) GetTargetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetGroupId, true
}

// SetTargetGroupId sets field value
func (o *TargetGroupIdOpts) SetTargetGroupId(v string) {
	o.TargetGroupId = v
}

func (o TargetGroupIdOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetGroupIdOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["targetGroupId"] = o.TargetGroupId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TargetGroupIdOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targetGroupId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTargetGroupIdOpts := _TargetGroupIdOpts{}

	err = json.Unmarshal(data, &varTargetGroupIdOpts)

	if err != nil {
		return err
	}

	*o = TargetGroupIdOpts(varTargetGroupIdOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "targetGroupId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTargetGroupIdOpts struct {
	value *TargetGroupIdOpts
	isSet bool
}

func (v NullableTargetGroupIdOpts) Get() *TargetGroupIdOpts {
	return v.value
}

func (v *NullableTargetGroupIdOpts) Set(val *TargetGroupIdOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetGroupIdOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetGroupIdOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetGroupIdOpts(val *TargetGroupIdOpts) *NullableTargetGroupIdOpts {
	return &NullableTargetGroupIdOpts{value: val, isSet: true}
}

func (v NullableTargetGroupIdOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetGroupIdOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


