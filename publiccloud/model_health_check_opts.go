/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the HealthCheckOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthCheckOpts{}

// HealthCheckOpts struct for HealthCheckOpts
type HealthCheckOpts struct {
	Protocol Protocol `json:"protocol"`
	Method *HttpMethodOpt `json:"method,omitempty"`
	// URI to check in the target instances
	Uri string `json:"uri"`
	// Host for the health check if any
	Host *string `json:"host,omitempty"`
	// Port number
	Port int32 `json:"port"`
	AdditionalProperties map[string]interface{}
}

type _HealthCheckOpts HealthCheckOpts

// NewHealthCheckOpts instantiates a new HealthCheckOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthCheckOpts(protocol Protocol, uri string, port int32) *HealthCheckOpts {
	this := HealthCheckOpts{}
	this.Protocol = protocol
	this.Uri = uri
	this.Port = port
	return &this
}

// NewHealthCheckOptsWithDefaults instantiates a new HealthCheckOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthCheckOptsWithDefaults() *HealthCheckOpts {
	this := HealthCheckOpts{}
	return &this
}

// GetProtocol returns the Protocol field value
func (o *HealthCheckOpts) GetProtocol() Protocol {
	if o == nil {
		var ret Protocol
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *HealthCheckOpts) GetProtocolOk() (*Protocol, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *HealthCheckOpts) SetProtocol(v Protocol) {
	o.Protocol = v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *HealthCheckOpts) GetMethod() HttpMethodOpt {
	if o == nil || IsNil(o.Method) {
		var ret HttpMethodOpt
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthCheckOpts) GetMethodOk() (*HttpMethodOpt, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *HealthCheckOpts) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given HttpMethodOpt and assigns it to the Method field.
func (o *HealthCheckOpts) SetMethod(v HttpMethodOpt) {
	o.Method = &v
}

// GetUri returns the Uri field value
func (o *HealthCheckOpts) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *HealthCheckOpts) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *HealthCheckOpts) SetUri(v string) {
	o.Uri = v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *HealthCheckOpts) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthCheckOpts) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *HealthCheckOpts) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *HealthCheckOpts) SetHost(v string) {
	o.Host = &v
}

// GetPort returns the Port field value
func (o *HealthCheckOpts) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *HealthCheckOpts) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *HealthCheckOpts) SetPort(v int32) {
	o.Port = v
}

func (o HealthCheckOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthCheckOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["protocol"] = o.Protocol
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	toSerialize["uri"] = o.Uri
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	toSerialize["port"] = o.Port

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HealthCheckOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"protocol",
		"uri",
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHealthCheckOpts := _HealthCheckOpts{}

	err = json.Unmarshal(data, &varHealthCheckOpts)

	if err != nil {
		return err
	}

	*o = HealthCheckOpts(varHealthCheckOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "method")
		delete(additionalProperties, "uri")
		delete(additionalProperties, "host")
		delete(additionalProperties, "port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHealthCheckOpts struct {
	value *HealthCheckOpts
	isSet bool
}

func (v NullableHealthCheckOpts) Get() *HealthCheckOpts {
	return v.value
}

func (v *NullableHealthCheckOpts) Set(val *HealthCheckOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthCheckOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthCheckOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthCheckOpts(val *HealthCheckOpts) *NullableHealthCheckOpts {
	return &NullableHealthCheckOpts{value: val, isSet: true}
}

func (v NullableHealthCheckOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthCheckOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


