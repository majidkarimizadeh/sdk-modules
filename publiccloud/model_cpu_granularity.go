/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// CpuGranularity Defines the time interval for data aggregation
type CpuGranularity string

// List of cpuGranularity
const (
	CPUGRANULARITY__5M CpuGranularity = "5m"
	CPUGRANULARITY__10M CpuGranularity = "10m"
	CPUGRANULARITY__30M CpuGranularity = "30m"
	CPUGRANULARITY__60M CpuGranularity = "60m"
	CPUGRANULARITY_DAY CpuGranularity = "DAY"
)

// All allowed values of CpuGranularity enum
var AllowedCpuGranularityEnumValues = []CpuGranularity{
	"5m",
	"10m",
	"30m",
	"60m",
	"DAY",
}

func (v *CpuGranularity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CpuGranularity(value)
	for _, existing := range AllowedCpuGranularityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CpuGranularity", value)
}

// NewCpuGranularityFromValue returns a pointer to a valid CpuGranularity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCpuGranularityFromValue(v string) (*CpuGranularity, error) {
	ev := CpuGranularity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CpuGranularity: valid values are %v", v, AllowedCpuGranularityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CpuGranularity) IsValid() bool {
	for _, existing := range AllowedCpuGranularityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cpuGranularity value
func (v CpuGranularity) Ptr() *CpuGranularity {
	return &v
}

type NullableCpuGranularity struct {
	value *CpuGranularity
	isSet bool
}

func (v NullableCpuGranularity) Get() *CpuGranularity {
	return v.value
}

func (v *NullableCpuGranularity) Set(val *CpuGranularity) {
	v.value = val
	v.isSet = true
}

func (v NullableCpuGranularity) IsSet() bool {
	return v.isSet
}

func (v *NullableCpuGranularity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCpuGranularity(val *CpuGranularity) *NullableCpuGranularity {
	return &NullableCpuGranularity{value: val, isSet: true}
}

func (v NullableCpuGranularity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCpuGranularity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

