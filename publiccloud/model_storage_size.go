/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the StorageSize type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageSize{}

// StorageSize struct for StorageSize
type StorageSize struct {
	// The storage size
	Size float32 `json:"size"`
	// The storage size unit
	Unit string `json:"unit"`
	AdditionalProperties map[string]interface{}
}

type _StorageSize StorageSize

// NewStorageSize instantiates a new StorageSize object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageSize(size float32, unit string) *StorageSize {
	this := StorageSize{}
	this.Size = size
	this.Unit = unit
	return &this
}

// NewStorageSizeWithDefaults instantiates a new StorageSize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageSizeWithDefaults() *StorageSize {
	this := StorageSize{}
	return &this
}

// GetSize returns the Size field value
func (o *StorageSize) GetSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *StorageSize) GetSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *StorageSize) SetSize(v float32) {
	o.Size = v
}

// GetUnit returns the Unit field value
func (o *StorageSize) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *StorageSize) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *StorageSize) SetUnit(v string) {
	o.Unit = v
}

func (o StorageSize) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageSize) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["size"] = o.Size
	toSerialize["unit"] = o.Unit

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageSize) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"size",
		"unit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageSize := _StorageSize{}

	err = json.Unmarshal(data, &varStorageSize)

	if err != nil {
		return err
	}

	*o = StorageSize(varStorageSize)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "size")
		delete(additionalProperties, "unit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageSize struct {
	value *StorageSize
	isSet bool
}

func (v NullableStorageSize) Get() *StorageSize {
	return v.value
}

func (v *NullableStorageSize) Set(val *StorageSize) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageSize) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageSize(val *StorageSize) *NullableStorageSize {
	return &NullableStorageSize{value: val, isSet: true}
}

func (v NullableStorageSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


