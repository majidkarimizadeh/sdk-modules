/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
)

// checks if the GetVpsListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetVpsListResult{}

// GetVpsListResult struct for GetVpsListResult
type GetVpsListResult struct {
	Vps []VpsList `json:"vps,omitempty"`
	Metadata *Metadata `json:"_metadata,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetVpsListResult GetVpsListResult

// NewGetVpsListResult instantiates a new GetVpsListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetVpsListResult() *GetVpsListResult {
	this := GetVpsListResult{}
	return &this
}

// NewGetVpsListResultWithDefaults instantiates a new GetVpsListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetVpsListResultWithDefaults() *GetVpsListResult {
	this := GetVpsListResult{}
	return &this
}

// GetVps returns the Vps field value if set, zero value otherwise.
func (o *GetVpsListResult) GetVps() []VpsList {
	if o == nil || IsNil(o.Vps) {
		var ret []VpsList
		return ret
	}
	return o.Vps
}

// GetVpsOk returns a tuple with the Vps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVpsListResult) GetVpsOk() ([]VpsList, bool) {
	if o == nil || IsNil(o.Vps) {
		return nil, false
	}
	return o.Vps, true
}

// HasVps returns a boolean if a field has been set.
func (o *GetVpsListResult) HasVps() bool {
	if o != nil && !IsNil(o.Vps) {
		return true
	}

	return false
}

// SetVps gets a reference to the given []VpsList and assigns it to the Vps field.
func (o *GetVpsListResult) SetVps(v []VpsList) {
	o.Vps = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *GetVpsListResult) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVpsListResult) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *GetVpsListResult) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *GetVpsListResult) SetMetadata(v Metadata) {
	o.Metadata = &v
}

func (o GetVpsListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetVpsListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vps) {
		toSerialize["vps"] = o.Vps
	}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetVpsListResult) UnmarshalJSON(data []byte) (err error) {
	varGetVpsListResult := _GetVpsListResult{}

	err = json.Unmarshal(data, &varGetVpsListResult)

	if err != nil {
		return err
	}

	*o = GetVpsListResult(varGetVpsListResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vps")
		delete(additionalProperties, "_metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetVpsListResult struct {
	value *GetVpsListResult
	isSet bool
}

func (v NullableGetVpsListResult) Get() *GetVpsListResult {
	return v.value
}

func (v *NullableGetVpsListResult) Set(val *GetVpsListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetVpsListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetVpsListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetVpsListResult(val *GetVpsListResult) *NullableGetVpsListResult {
	return &NullableGetVpsListResult{value: val, isSet: true}
}

func (v NullableGetVpsListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetVpsListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


