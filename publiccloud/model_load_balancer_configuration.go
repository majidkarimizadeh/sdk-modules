/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the LoadBalancerConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadBalancerConfiguration{}

// LoadBalancerConfiguration Different configuration assigned for the load balancer
type LoadBalancerConfiguration struct {
	StickySession NullableStickySession `json:"stickySession"`
	Balance Balance `json:"balance"`
	// Is xForwardedFor header enabled or not
	XForwardedFor bool `json:"xForwardedFor"`
	// Time to close the connection if load balancer is idle
	IdleTimeOut int32 `json:"idleTimeOut"`
	AdditionalProperties map[string]interface{}
}

type _LoadBalancerConfiguration LoadBalancerConfiguration

// NewLoadBalancerConfiguration instantiates a new LoadBalancerConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadBalancerConfiguration(stickySession NullableStickySession, balance Balance, xForwardedFor bool, idleTimeOut int32) *LoadBalancerConfiguration {
	this := LoadBalancerConfiguration{}
	this.StickySession = stickySession
	this.Balance = balance
	this.XForwardedFor = xForwardedFor
	this.IdleTimeOut = idleTimeOut
	return &this
}

// NewLoadBalancerConfigurationWithDefaults instantiates a new LoadBalancerConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadBalancerConfigurationWithDefaults() *LoadBalancerConfiguration {
	this := LoadBalancerConfiguration{}
	return &this
}

// GetStickySession returns the StickySession field value
// If the value is explicit nil, the zero value for StickySession will be returned
func (o *LoadBalancerConfiguration) GetStickySession() StickySession {
	if o == nil || o.StickySession.Get() == nil {
		var ret StickySession
		return ret
	}

	return *o.StickySession.Get()
}

// GetStickySessionOk returns a tuple with the StickySession field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LoadBalancerConfiguration) GetStickySessionOk() (*StickySession, bool) {
	if o == nil {
		return nil, false
	}
	return o.StickySession.Get(), o.StickySession.IsSet()
}

// SetStickySession sets field value
func (o *LoadBalancerConfiguration) SetStickySession(v StickySession) {
	o.StickySession.Set(&v)
}

// GetBalance returns the Balance field value
func (o *LoadBalancerConfiguration) GetBalance() Balance {
	if o == nil {
		var ret Balance
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *LoadBalancerConfiguration) GetBalanceOk() (*Balance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *LoadBalancerConfiguration) SetBalance(v Balance) {
	o.Balance = v
}

// GetXForwardedFor returns the XForwardedFor field value
func (o *LoadBalancerConfiguration) GetXForwardedFor() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.XForwardedFor
}

// GetXForwardedForOk returns a tuple with the XForwardedFor field value
// and a boolean to check if the value has been set.
func (o *LoadBalancerConfiguration) GetXForwardedForOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.XForwardedFor, true
}

// SetXForwardedFor sets field value
func (o *LoadBalancerConfiguration) SetXForwardedFor(v bool) {
	o.XForwardedFor = v
}

// GetIdleTimeOut returns the IdleTimeOut field value
func (o *LoadBalancerConfiguration) GetIdleTimeOut() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IdleTimeOut
}

// GetIdleTimeOutOk returns a tuple with the IdleTimeOut field value
// and a boolean to check if the value has been set.
func (o *LoadBalancerConfiguration) GetIdleTimeOutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdleTimeOut, true
}

// SetIdleTimeOut sets field value
func (o *LoadBalancerConfiguration) SetIdleTimeOut(v int32) {
	o.IdleTimeOut = v
}

func (o LoadBalancerConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadBalancerConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["stickySession"] = o.StickySession.Get()
	toSerialize["balance"] = o.Balance
	toSerialize["xForwardedFor"] = o.XForwardedFor
	toSerialize["idleTimeOut"] = o.IdleTimeOut

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LoadBalancerConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"stickySession",
		"balance",
		"xForwardedFor",
		"idleTimeOut",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoadBalancerConfiguration := _LoadBalancerConfiguration{}

	err = json.Unmarshal(data, &varLoadBalancerConfiguration)

	if err != nil {
		return err
	}

	*o = LoadBalancerConfiguration(varLoadBalancerConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "stickySession")
		delete(additionalProperties, "balance")
		delete(additionalProperties, "xForwardedFor")
		delete(additionalProperties, "idleTimeOut")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLoadBalancerConfiguration struct {
	value *LoadBalancerConfiguration
	isSet bool
}

func (v NullableLoadBalancerConfiguration) Get() *LoadBalancerConfiguration {
	return v.value
}

func (v *NullableLoadBalancerConfiguration) Set(val *LoadBalancerConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerConfiguration(val *LoadBalancerConfiguration) *NullableLoadBalancerConfiguration {
	return &NullableLoadBalancerConfiguration{value: val, isSet: true}
}

func (v NullableLoadBalancerConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


