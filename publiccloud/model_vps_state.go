/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// VpsState The current state
type VpsState string

// List of vpsState
const (
	VPSSTATE_RUNNING VpsState = "RUNNING"
	VPSSTATE_STARTING VpsState = "STARTING"
	VPSSTATE_STOPPED VpsState = "STOPPED"
	VPSSTATE_STOPPING VpsState = "STOPPING"
)

// All allowed values of VpsState enum
var AllowedVpsStateEnumValues = []VpsState{
	"RUNNING",
	"STARTING",
	"STOPPED",
	"STOPPING",
}

func (v *VpsState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpsState(value)
	for _, existing := range AllowedVpsStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpsState", value)
}

// NewVpsStateFromValue returns a pointer to a valid VpsState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpsStateFromValue(v string) (*VpsState, error) {
	ev := VpsState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpsState: valid values are %v", v, AllowedVpsStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpsState) IsValid() bool {
	for _, existing := range AllowedVpsStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vpsState value
func (v VpsState) Ptr() *VpsState {
	return &v
}

type NullableVpsState struct {
	value *VpsState
	isSet bool
}

func (v NullableVpsState) Get() *VpsState {
	return v.value
}

func (v *NullableVpsState) Set(val *VpsState) {
	v.value = val
	v.isSet = true
}

func (v NullableVpsState) IsSet() bool {
	return v.isSet
}

func (v *NullableVpsState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpsState(val *VpsState) *NullableVpsState {
	return &NullableVpsState{value: val, isSet: true}
}

func (v NullableVpsState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpsState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

