/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
)

// checks if the DataTransferredMetrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTransferredMetrics{}

// DataTransferredMetrics struct for DataTransferredMetrics
type DataTransferredMetrics struct {
	DataIn *MetricsProperties `json:"dataIn,omitempty"`
	DataOut *MetricsProperties `json:"dataOut,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DataTransferredMetrics DataTransferredMetrics

// NewDataTransferredMetrics instantiates a new DataTransferredMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTransferredMetrics() *DataTransferredMetrics {
	this := DataTransferredMetrics{}
	return &this
}

// NewDataTransferredMetricsWithDefaults instantiates a new DataTransferredMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTransferredMetricsWithDefaults() *DataTransferredMetrics {
	this := DataTransferredMetrics{}
	return &this
}

// GetDataIn returns the DataIn field value if set, zero value otherwise.
func (o *DataTransferredMetrics) GetDataIn() MetricsProperties {
	if o == nil || IsNil(o.DataIn) {
		var ret MetricsProperties
		return ret
	}
	return *o.DataIn
}

// GetDataInOk returns a tuple with the DataIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTransferredMetrics) GetDataInOk() (*MetricsProperties, bool) {
	if o == nil || IsNil(o.DataIn) {
		return nil, false
	}
	return o.DataIn, true
}

// HasDataIn returns a boolean if a field has been set.
func (o *DataTransferredMetrics) HasDataIn() bool {
	if o != nil && !IsNil(o.DataIn) {
		return true
	}

	return false
}

// SetDataIn gets a reference to the given MetricsProperties and assigns it to the DataIn field.
func (o *DataTransferredMetrics) SetDataIn(v MetricsProperties) {
	o.DataIn = &v
}

// GetDataOut returns the DataOut field value if set, zero value otherwise.
func (o *DataTransferredMetrics) GetDataOut() MetricsProperties {
	if o == nil || IsNil(o.DataOut) {
		var ret MetricsProperties
		return ret
	}
	return *o.DataOut
}

// GetDataOutOk returns a tuple with the DataOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTransferredMetrics) GetDataOutOk() (*MetricsProperties, bool) {
	if o == nil || IsNil(o.DataOut) {
		return nil, false
	}
	return o.DataOut, true
}

// HasDataOut returns a boolean if a field has been set.
func (o *DataTransferredMetrics) HasDataOut() bool {
	if o != nil && !IsNil(o.DataOut) {
		return true
	}

	return false
}

// SetDataOut gets a reference to the given MetricsProperties and assigns it to the DataOut field.
func (o *DataTransferredMetrics) SetDataOut(v MetricsProperties) {
	o.DataOut = &v
}

func (o DataTransferredMetrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTransferredMetrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataIn) {
		toSerialize["dataIn"] = o.DataIn
	}
	if !IsNil(o.DataOut) {
		toSerialize["dataOut"] = o.DataOut
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DataTransferredMetrics) UnmarshalJSON(data []byte) (err error) {
	varDataTransferredMetrics := _DataTransferredMetrics{}

	err = json.Unmarshal(data, &varDataTransferredMetrics)

	if err != nil {
		return err
	}

	*o = DataTransferredMetrics(varDataTransferredMetrics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dataIn")
		delete(additionalProperties, "dataOut")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDataTransferredMetrics struct {
	value *DataTransferredMetrics
	isSet bool
}

func (v NullableDataTransferredMetrics) Get() *DataTransferredMetrics {
	return v.value
}

func (v *NullableDataTransferredMetrics) Set(val *DataTransferredMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTransferredMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTransferredMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTransferredMetrics(val *DataTransferredMetrics) *NullableDataTransferredMetrics {
	return &NullableDataTransferredMetrics{value: val, isSet: true}
}

func (v NullableDataTransferredMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTransferredMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


