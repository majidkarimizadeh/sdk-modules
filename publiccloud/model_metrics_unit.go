/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// MetricsUnit The unit of the metric
type MetricsUnit string

// List of metricsUnit
const (
	METRICSUNIT_PERCENT MetricsUnit = "%"
	METRICSUNIT_B MetricsUnit = "B"
	METRICSUNIT_B_S MetricsUnit = "b/s"
	METRICSUNIT_REQUESTS MetricsUnit = "requests"
	METRICSUNIT_REQUESTS_SEC MetricsUnit = "requests/sec"
	METRICSUNIT_RESPONSES MetricsUnit = "responses"
	METRICSUNIT_RESPONSES_S MetricsUnit = "responses/s"
	METRICSUNIT_CONNECTIONS MetricsUnit = "connections"
	METRICSUNIT_CONNECTIONS_S MetricsUnit = "connections/s"
)

// All allowed values of MetricsUnit enum
var AllowedMetricsUnitEnumValues = []MetricsUnit{
	"%",
	"B",
	"b/s",
	"requests",
	"requests/sec",
	"responses",
	"responses/s",
	"connections",
	"connections/s",
}

func (v *MetricsUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricsUnit(value)
	for _, existing := range AllowedMetricsUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricsUnit", value)
}

// NewMetricsUnitFromValue returns a pointer to a valid MetricsUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricsUnitFromValue(v string) (*MetricsUnit, error) {
	ev := MetricsUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricsUnit: valid values are %v", v, AllowedMetricsUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricsUnit) IsValid() bool {
	for _, existing := range AllowedMetricsUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to metricsUnit value
func (v MetricsUnit) Ptr() *MetricsUnit {
	return &v
}

type NullableMetricsUnit struct {
	value *MetricsUnit
	isSet bool
}

func (v NullableMetricsUnit) Get() *MetricsUnit {
	return v.value
}

func (v *NullableMetricsUnit) Set(val *MetricsUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsUnit(val *MetricsUnit) *NullableMetricsUnit {
	return &NullableMetricsUnit{value: val, isSet: true}
}

func (v NullableMetricsUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

