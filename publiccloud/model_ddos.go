/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the Ddos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ddos{}

// Ddos struct for Ddos
type Ddos struct {
	DetectionProfile string `json:"detectionProfile"`
	ProtectionType string `json:"protectionType"`
	AdditionalProperties map[string]interface{}
}

type _Ddos Ddos

// NewDdos instantiates a new Ddos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDdos(detectionProfile string, protectionType string) *Ddos {
	this := Ddos{}
	this.DetectionProfile = detectionProfile
	this.ProtectionType = protectionType
	return &this
}

// NewDdosWithDefaults instantiates a new Ddos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDdosWithDefaults() *Ddos {
	this := Ddos{}
	return &this
}

// GetDetectionProfile returns the DetectionProfile field value
func (o *Ddos) GetDetectionProfile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DetectionProfile
}

// GetDetectionProfileOk returns a tuple with the DetectionProfile field value
// and a boolean to check if the value has been set.
func (o *Ddos) GetDetectionProfileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DetectionProfile, true
}

// SetDetectionProfile sets field value
func (o *Ddos) SetDetectionProfile(v string) {
	o.DetectionProfile = v
}

// GetProtectionType returns the ProtectionType field value
func (o *Ddos) GetProtectionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProtectionType
}

// GetProtectionTypeOk returns a tuple with the ProtectionType field value
// and a boolean to check if the value has been set.
func (o *Ddos) GetProtectionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtectionType, true
}

// SetProtectionType sets field value
func (o *Ddos) SetProtectionType(v string) {
	o.ProtectionType = v
}

func (o Ddos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ddos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["detectionProfile"] = o.DetectionProfile
	toSerialize["protectionType"] = o.ProtectionType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Ddos) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"detectionProfile",
		"protectionType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDdos := _Ddos{}

	err = json.Unmarshal(data, &varDdos)

	if err != nil {
		return err
	}

	*o = Ddos(varDdos)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "detectionProfile")
		delete(additionalProperties, "protectionType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDdos struct {
	value *Ddos
	isSet bool
}

func (v NullableDdos) Get() *Ddos {
	return v.value
}

func (v *NullableDdos) Set(val *Ddos) {
	v.value = val
	v.isSet = true
}

func (v NullableDdos) IsSet() bool {
	return v.isSet
}

func (v *NullableDdos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDdos(val *Ddos) *NullableDdos {
	return &NullableDdos{value: val, isSet: true}
}

func (v NullableDdos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDdos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


