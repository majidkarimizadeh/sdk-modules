/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the Storage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Storage{}

// Storage struct for Storage
type Storage struct {
	Local Price `json:"local"`
	Central Price `json:"central"`
	AdditionalProperties map[string]interface{}
}

type _Storage Storage

// NewStorage instantiates a new Storage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorage(local Price, central Price) *Storage {
	this := Storage{}
	this.Local = local
	this.Central = central
	return &this
}

// NewStorageWithDefaults instantiates a new Storage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageWithDefaults() *Storage {
	this := Storage{}
	return &this
}

// GetLocal returns the Local field value
func (o *Storage) GetLocal() Price {
	if o == nil {
		var ret Price
		return ret
	}

	return o.Local
}

// GetLocalOk returns a tuple with the Local field value
// and a boolean to check if the value has been set.
func (o *Storage) GetLocalOk() (*Price, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Local, true
}

// SetLocal sets field value
func (o *Storage) SetLocal(v Price) {
	o.Local = v
}

// GetCentral returns the Central field value
func (o *Storage) GetCentral() Price {
	if o == nil {
		var ret Price
		return ret
	}

	return o.Central
}

// GetCentralOk returns a tuple with the Central field value
// and a boolean to check if the value has been set.
func (o *Storage) GetCentralOk() (*Price, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Central, true
}

// SetCentral sets field value
func (o *Storage) SetCentral(v Price) {
	o.Central = v
}

func (o Storage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Storage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["local"] = o.Local
	toSerialize["central"] = o.Central

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Storage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"local",
		"central",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorage := _Storage{}

	err = json.Unmarshal(data, &varStorage)

	if err != nil {
		return err
	}

	*o = Storage(varStorage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "local")
		delete(additionalProperties, "central")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorage struct {
	value *Storage
	isSet bool
}

func (v NullableStorage) Get() *Storage {
	return v.value
}

func (v *NullableStorage) Set(val *Storage) {
	v.value = val
	v.isSet = true
}

func (v NullableStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorage(val *Storage) *NullableStorage {
	return &NullableStorage{value: val, isSet: true}
}

func (v NullableStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


