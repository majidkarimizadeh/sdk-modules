/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
)

// checks if the Values type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Values{}

// Values struct for Values
type Values struct {
	Tier0 *Tier `json:"tier_0,omitempty"`
	Tier1 *Tier `json:"tier_1,omitempty"`
	Tier2 *Tier `json:"tier_2,omitempty"`
	Tier3 *Tier `json:"tier_3,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Values Values

// NewValues instantiates a new Values object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValues() *Values {
	this := Values{}
	return &this
}

// NewValuesWithDefaults instantiates a new Values object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValuesWithDefaults() *Values {
	this := Values{}
	return &this
}

// GetTier0 returns the Tier0 field value if set, zero value otherwise.
func (o *Values) GetTier0() Tier {
	if o == nil || IsNil(o.Tier0) {
		var ret Tier
		return ret
	}
	return *o.Tier0
}

// GetTier0Ok returns a tuple with the Tier0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Values) GetTier0Ok() (*Tier, bool) {
	if o == nil || IsNil(o.Tier0) {
		return nil, false
	}
	return o.Tier0, true
}

// HasTier0 returns a boolean if a field has been set.
func (o *Values) HasTier0() bool {
	if o != nil && !IsNil(o.Tier0) {
		return true
	}

	return false
}

// SetTier0 gets a reference to the given Tier and assigns it to the Tier0 field.
func (o *Values) SetTier0(v Tier) {
	o.Tier0 = &v
}

// GetTier1 returns the Tier1 field value if set, zero value otherwise.
func (o *Values) GetTier1() Tier {
	if o == nil || IsNil(o.Tier1) {
		var ret Tier
		return ret
	}
	return *o.Tier1
}

// GetTier1Ok returns a tuple with the Tier1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Values) GetTier1Ok() (*Tier, bool) {
	if o == nil || IsNil(o.Tier1) {
		return nil, false
	}
	return o.Tier1, true
}

// HasTier1 returns a boolean if a field has been set.
func (o *Values) HasTier1() bool {
	if o != nil && !IsNil(o.Tier1) {
		return true
	}

	return false
}

// SetTier1 gets a reference to the given Tier and assigns it to the Tier1 field.
func (o *Values) SetTier1(v Tier) {
	o.Tier1 = &v
}

// GetTier2 returns the Tier2 field value if set, zero value otherwise.
func (o *Values) GetTier2() Tier {
	if o == nil || IsNil(o.Tier2) {
		var ret Tier
		return ret
	}
	return *o.Tier2
}

// GetTier2Ok returns a tuple with the Tier2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Values) GetTier2Ok() (*Tier, bool) {
	if o == nil || IsNil(o.Tier2) {
		return nil, false
	}
	return o.Tier2, true
}

// HasTier2 returns a boolean if a field has been set.
func (o *Values) HasTier2() bool {
	if o != nil && !IsNil(o.Tier2) {
		return true
	}

	return false
}

// SetTier2 gets a reference to the given Tier and assigns it to the Tier2 field.
func (o *Values) SetTier2(v Tier) {
	o.Tier2 = &v
}

// GetTier3 returns the Tier3 field value if set, zero value otherwise.
func (o *Values) GetTier3() Tier {
	if o == nil || IsNil(o.Tier3) {
		var ret Tier
		return ret
	}
	return *o.Tier3
}

// GetTier3Ok returns a tuple with the Tier3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Values) GetTier3Ok() (*Tier, bool) {
	if o == nil || IsNil(o.Tier3) {
		return nil, false
	}
	return o.Tier3, true
}

// HasTier3 returns a boolean if a field has been set.
func (o *Values) HasTier3() bool {
	if o != nil && !IsNil(o.Tier3) {
		return true
	}

	return false
}

// SetTier3 gets a reference to the given Tier and assigns it to the Tier3 field.
func (o *Values) SetTier3(v Tier) {
	o.Tier3 = &v
}

func (o Values) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Values) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tier0) {
		toSerialize["tier_0"] = o.Tier0
	}
	if !IsNil(o.Tier1) {
		toSerialize["tier_1"] = o.Tier1
	}
	if !IsNil(o.Tier2) {
		toSerialize["tier_2"] = o.Tier2
	}
	if !IsNil(o.Tier3) {
		toSerialize["tier_3"] = o.Tier3
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Values) UnmarshalJSON(data []byte) (err error) {
	varValues := _Values{}

	err = json.Unmarshal(data, &varValues)

	if err != nil {
		return err
	}

	*o = Values(varValues)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tier_0")
		delete(additionalProperties, "tier_1")
		delete(additionalProperties, "tier_2")
		delete(additionalProperties, "tier_3")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableValues struct {
	value *Values
	isSet bool
}

func (v NullableValues) Get() *Values {
	return v.value
}

func (v *NullableValues) Set(val *Values) {
	v.value = val
	v.isSet = true
}

func (v NullableValues) IsSet() bool {
	return v.isSet
}

func (v *NullableValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValues(val *Values) *NullableValues {
	return &NullableValues{value: val, isSet: true}
}

func (v NullableValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


