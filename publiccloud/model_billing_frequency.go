/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// BillingFrequency The billing frequency (in months) of the instance.
type BillingFrequency int32

// List of billingFrequency
const (
	BILLINGFREQUENCY__1 BillingFrequency = 1
	BILLINGFREQUENCY__3 BillingFrequency = 3
	BILLINGFREQUENCY__6 BillingFrequency = 6
	BILLINGFREQUENCY__12 BillingFrequency = 12
)

// All allowed values of BillingFrequency enum
var AllowedBillingFrequencyEnumValues = []BillingFrequency{
	1,
	3,
	6,
	12,
}

func (v *BillingFrequency) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingFrequency(value)
	for _, existing := range AllowedBillingFrequencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingFrequency", value)
}

// NewBillingFrequencyFromValue returns a pointer to a valid BillingFrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingFrequencyFromValue(v int32) (*BillingFrequency, error) {
	ev := BillingFrequency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingFrequency: valid values are %v", v, AllowedBillingFrequencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingFrequency) IsValid() bool {
	for _, existing := range AllowedBillingFrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to billingFrequency value
func (v BillingFrequency) Ptr() *BillingFrequency {
	return &v
}

type NullableBillingFrequency struct {
	value *BillingFrequency
	isSet bool
}

func (v NullableBillingFrequency) Get() *BillingFrequency {
	return v.value
}

func (v *NullableBillingFrequency) Set(val *BillingFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingFrequency(val *BillingFrequency) *NullableBillingFrequency {
	return &NullableBillingFrequency{value: val, isSet: true}
}

func (v NullableBillingFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

