/*
LeaseWeb API for launching and managing Public Cloud instances

> The base URL for this API is: **https://api.leaseweb.com/publicCloud/v1/_**  This API provides ways to launch and manage Public Cloud instances.  <div class=\"badge\">BETA</div> This API is in BETA. Documentation might be incorrect or incomplete. Functionality might change with the final release.>

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package publiccloud

import (
	"encoding/json"
	"fmt"
)

// checks if the Target type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Target{}

// Target struct for Target
type Target struct {
	// The ID of the target
	Id string `json:"id"`
	// The reference of the target
	Reference string `json:"reference"`
	Image Image `json:"image"`
	// The state of the target
	State string `json:"state"`
	// The IP addresses of the target
	Ips []Ip `json:"ips"`
	HealthCheck NullableSchemasHealthCheckStatus `json:"healthCheck"`
	AdditionalProperties map[string]interface{}
}

type _Target Target

// NewTarget instantiates a new Target object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTarget(id string, reference string, image Image, state string, ips []Ip, healthCheck NullableSchemasHealthCheckStatus) *Target {
	this := Target{}
	this.Id = id
	this.Reference = reference
	this.Image = image
	this.State = state
	this.Ips = ips
	this.HealthCheck = healthCheck
	return &this
}

// NewTargetWithDefaults instantiates a new Target object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetWithDefaults() *Target {
	this := Target{}
	return &this
}

// GetId returns the Id field value
func (o *Target) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Target) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Target) SetId(v string) {
	o.Id = v
}

// GetReference returns the Reference field value
func (o *Target) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *Target) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *Target) SetReference(v string) {
	o.Reference = v
}

// GetImage returns the Image field value
func (o *Target) GetImage() Image {
	if o == nil {
		var ret Image
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *Target) GetImageOk() (*Image, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *Target) SetImage(v Image) {
	o.Image = v
}

// GetState returns the State field value
func (o *Target) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Target) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Target) SetState(v string) {
	o.State = v
}

// GetIps returns the Ips field value
func (o *Target) GetIps() []Ip {
	if o == nil {
		var ret []Ip
		return ret
	}

	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value
// and a boolean to check if the value has been set.
func (o *Target) GetIpsOk() ([]Ip, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ips, true
}

// SetIps sets field value
func (o *Target) SetIps(v []Ip) {
	o.Ips = v
}

// GetHealthCheck returns the HealthCheck field value
// If the value is explicit nil, the zero value for SchemasHealthCheckStatus will be returned
func (o *Target) GetHealthCheck() SchemasHealthCheckStatus {
	if o == nil || o.HealthCheck.Get() == nil {
		var ret SchemasHealthCheckStatus
		return ret
	}

	return *o.HealthCheck.Get()
}

// GetHealthCheckOk returns a tuple with the HealthCheck field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Target) GetHealthCheckOk() (*SchemasHealthCheckStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.HealthCheck.Get(), o.HealthCheck.IsSet()
}

// SetHealthCheck sets field value
func (o *Target) SetHealthCheck(v SchemasHealthCheckStatus) {
	o.HealthCheck.Set(&v)
}

func (o Target) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Target) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["reference"] = o.Reference
	toSerialize["image"] = o.Image
	toSerialize["state"] = o.State
	toSerialize["ips"] = o.Ips
	toSerialize["healthCheck"] = o.HealthCheck.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Target) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"reference",
		"image",
		"state",
		"ips",
		"healthCheck",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTarget := _Target{}

	err = json.Unmarshal(data, &varTarget)

	if err != nil {
		return err
	}

	*o = Target(varTarget)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "reference")
		delete(additionalProperties, "image")
		delete(additionalProperties, "state")
		delete(additionalProperties, "ips")
		delete(additionalProperties, "healthCheck")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTarget struct {
	value *Target
	isSet bool
}

func (v NullableTarget) Get() *Target {
	return v.value
}

func (v *NullableTarget) Set(val *Target) {
	v.value = val
	v.isSet = true
}

func (v NullableTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTarget(val *Target) *NullableTarget {
	return &NullableTarget{value: val, isSet: true}
}

func (v NullableTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


