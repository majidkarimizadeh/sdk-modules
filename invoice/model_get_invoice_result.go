/*
Invoices

> The base URL for this API is: **https://api.leaseweb.com/invoices/v1/_**

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoice

import (
	"encoding/json"
)

// checks if the GetInvoiceResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetInvoiceResult{}

// GetInvoiceResult struct for GetInvoiceResult
type GetInvoiceResult struct {
	// All the credits attached to the invoice
	Credits []Credit `json:"credits,omitempty"`
	// The currency of the invoice.
	Currency *string `json:"currency,omitempty"`
	// The date the invoice was issued
	Date *string `json:"date,omitempty"`
	// The date the invoice is due for payment
	DueDate *string `json:"dueDate,omitempty"`
	// The unique id of the invoice
	Id *string `json:"id,omitempty"`
	// The invoice can be paid partially
	IsPartialPaymentAllowed *bool `json:"isPartialPaymentAllowed,omitempty"`
	// All the line items attached to the invoice
	LineItems []LineItem `json:"lineItems,omitempty"`
	// The open amount of the invoice
	OpenAmount *float32 `json:"openAmount,omitempty"`
	// The status of the invoice.
	Status *string `json:"status,omitempty"`
	// The tax amount of the invoice
	TaxAmount *float32 `json:"taxAmount,omitempty"`
	// The total amount of the invoice
	Total *float32 `json:"total,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetInvoiceResult GetInvoiceResult

// NewGetInvoiceResult instantiates a new GetInvoiceResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetInvoiceResult() *GetInvoiceResult {
	this := GetInvoiceResult{}
	return &this
}

// NewGetInvoiceResultWithDefaults instantiates a new GetInvoiceResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetInvoiceResultWithDefaults() *GetInvoiceResult {
	this := GetInvoiceResult{}
	return &this
}

// GetCredits returns the Credits field value if set, zero value otherwise.
func (o *GetInvoiceResult) GetCredits() []Credit {
	if o == nil || IsNil(o.Credits) {
		var ret []Credit
		return ret
	}
	return o.Credits
}

// GetCreditsOk returns a tuple with the Credits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInvoiceResult) GetCreditsOk() ([]Credit, bool) {
	if o == nil || IsNil(o.Credits) {
		return nil, false
	}
	return o.Credits, true
}

// HasCredits returns a boolean if a field has been set.
func (o *GetInvoiceResult) HasCredits() bool {
	if o != nil && !IsNil(o.Credits) {
		return true
	}

	return false
}

// SetCredits gets a reference to the given []Credit and assigns it to the Credits field.
func (o *GetInvoiceResult) SetCredits(v []Credit) {
	o.Credits = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *GetInvoiceResult) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInvoiceResult) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *GetInvoiceResult) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *GetInvoiceResult) SetCurrency(v string) {
	o.Currency = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *GetInvoiceResult) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInvoiceResult) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *GetInvoiceResult) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *GetInvoiceResult) SetDate(v string) {
	o.Date = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *GetInvoiceResult) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInvoiceResult) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *GetInvoiceResult) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *GetInvoiceResult) SetDueDate(v string) {
	o.DueDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetInvoiceResult) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInvoiceResult) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetInvoiceResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GetInvoiceResult) SetId(v string) {
	o.Id = &v
}

// GetIsPartialPaymentAllowed returns the IsPartialPaymentAllowed field value if set, zero value otherwise.
func (o *GetInvoiceResult) GetIsPartialPaymentAllowed() bool {
	if o == nil || IsNil(o.IsPartialPaymentAllowed) {
		var ret bool
		return ret
	}
	return *o.IsPartialPaymentAllowed
}

// GetIsPartialPaymentAllowedOk returns a tuple with the IsPartialPaymentAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInvoiceResult) GetIsPartialPaymentAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPartialPaymentAllowed) {
		return nil, false
	}
	return o.IsPartialPaymentAllowed, true
}

// HasIsPartialPaymentAllowed returns a boolean if a field has been set.
func (o *GetInvoiceResult) HasIsPartialPaymentAllowed() bool {
	if o != nil && !IsNil(o.IsPartialPaymentAllowed) {
		return true
	}

	return false
}

// SetIsPartialPaymentAllowed gets a reference to the given bool and assigns it to the IsPartialPaymentAllowed field.
func (o *GetInvoiceResult) SetIsPartialPaymentAllowed(v bool) {
	o.IsPartialPaymentAllowed = &v
}

// GetLineItems returns the LineItems field value if set, zero value otherwise.
func (o *GetInvoiceResult) GetLineItems() []LineItem {
	if o == nil || IsNil(o.LineItems) {
		var ret []LineItem
		return ret
	}
	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInvoiceResult) GetLineItemsOk() ([]LineItem, bool) {
	if o == nil || IsNil(o.LineItems) {
		return nil, false
	}
	return o.LineItems, true
}

// HasLineItems returns a boolean if a field has been set.
func (o *GetInvoiceResult) HasLineItems() bool {
	if o != nil && !IsNil(o.LineItems) {
		return true
	}

	return false
}

// SetLineItems gets a reference to the given []LineItem and assigns it to the LineItems field.
func (o *GetInvoiceResult) SetLineItems(v []LineItem) {
	o.LineItems = v
}

// GetOpenAmount returns the OpenAmount field value if set, zero value otherwise.
func (o *GetInvoiceResult) GetOpenAmount() float32 {
	if o == nil || IsNil(o.OpenAmount) {
		var ret float32
		return ret
	}
	return *o.OpenAmount
}

// GetOpenAmountOk returns a tuple with the OpenAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInvoiceResult) GetOpenAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.OpenAmount) {
		return nil, false
	}
	return o.OpenAmount, true
}

// HasOpenAmount returns a boolean if a field has been set.
func (o *GetInvoiceResult) HasOpenAmount() bool {
	if o != nil && !IsNil(o.OpenAmount) {
		return true
	}

	return false
}

// SetOpenAmount gets a reference to the given float32 and assigns it to the OpenAmount field.
func (o *GetInvoiceResult) SetOpenAmount(v float32) {
	o.OpenAmount = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GetInvoiceResult) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInvoiceResult) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GetInvoiceResult) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *GetInvoiceResult) SetStatus(v string) {
	o.Status = &v
}

// GetTaxAmount returns the TaxAmount field value if set, zero value otherwise.
func (o *GetInvoiceResult) GetTaxAmount() float32 {
	if o == nil || IsNil(o.TaxAmount) {
		var ret float32
		return ret
	}
	return *o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInvoiceResult) GetTaxAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxAmount) {
		return nil, false
	}
	return o.TaxAmount, true
}

// HasTaxAmount returns a boolean if a field has been set.
func (o *GetInvoiceResult) HasTaxAmount() bool {
	if o != nil && !IsNil(o.TaxAmount) {
		return true
	}

	return false
}

// SetTaxAmount gets a reference to the given float32 and assigns it to the TaxAmount field.
func (o *GetInvoiceResult) SetTaxAmount(v float32) {
	o.TaxAmount = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *GetInvoiceResult) GetTotal() float32 {
	if o == nil || IsNil(o.Total) {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInvoiceResult) GetTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *GetInvoiceResult) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *GetInvoiceResult) SetTotal(v float32) {
	o.Total = &v
}

func (o GetInvoiceResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetInvoiceResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Credits) {
		toSerialize["credits"] = o.Credits
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsPartialPaymentAllowed) {
		toSerialize["isPartialPaymentAllowed"] = o.IsPartialPaymentAllowed
	}
	if !IsNil(o.LineItems) {
		toSerialize["lineItems"] = o.LineItems
	}
	if !IsNil(o.OpenAmount) {
		toSerialize["openAmount"] = o.OpenAmount
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TaxAmount) {
		toSerialize["taxAmount"] = o.TaxAmount
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetInvoiceResult) UnmarshalJSON(data []byte) (err error) {
	varGetInvoiceResult := _GetInvoiceResult{}

	err = json.Unmarshal(data, &varGetInvoiceResult)

	if err != nil {
		return err
	}

	*o = GetInvoiceResult(varGetInvoiceResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "credits")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "date")
		delete(additionalProperties, "dueDate")
		delete(additionalProperties, "id")
		delete(additionalProperties, "isPartialPaymentAllowed")
		delete(additionalProperties, "lineItems")
		delete(additionalProperties, "openAmount")
		delete(additionalProperties, "status")
		delete(additionalProperties, "taxAmount")
		delete(additionalProperties, "total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetInvoiceResult struct {
	value *GetInvoiceResult
	isSet bool
}

func (v NullableGetInvoiceResult) Get() *GetInvoiceResult {
	return v.value
}

func (v *NullableGetInvoiceResult) Set(val *GetInvoiceResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetInvoiceResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetInvoiceResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetInvoiceResult(val *GetInvoiceResult) *NullableGetInvoiceResult {
	return &NullableGetInvoiceResult{value: val, isSet: true}
}

func (v NullableGetInvoiceResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetInvoiceResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


