/*
Invoices

> The base URL for this API is: **https://api.leaseweb.com/invoices/v1/_**

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invoice

import (
	"encoding/json"
)

// checks if the ContractItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractItem{}

// ContractItem struct for ContractItem
type ContractItem struct {
	// The unique id of the contract
	ContractId *string `json:"contractId,omitempty"`
	// The currency of the pro forma contract item
	Currency *string `json:"currency,omitempty"`
	// The end date of the contract
	EndDate *string `json:"endDate,omitempty"`
	// The unique id of the equipment
	EquipmentId *string `json:"equipmentId,omitempty"`
	// The purchase order number.
	PoNumber *string `json:"poNumber,omitempty"`
	// The price of the contract item.
	Price *float32 `json:"price,omitempty"`
	// The identifier of a product.
	Product *string `json:"product,omitempty"`
	// The reference a customer gave to the service
	Reference *string `json:"reference,omitempty"`
	// The start date of the contract
	StartDate *string `json:"startDate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ContractItem ContractItem

// NewContractItem instantiates a new ContractItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractItem() *ContractItem {
	this := ContractItem{}
	return &this
}

// NewContractItemWithDefaults instantiates a new ContractItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractItemWithDefaults() *ContractItem {
	this := ContractItem{}
	return &this
}

// GetContractId returns the ContractId field value if set, zero value otherwise.
func (o *ContractItem) GetContractId() string {
	if o == nil || IsNil(o.ContractId) {
		var ret string
		return ret
	}
	return *o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractItem) GetContractIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContractId) {
		return nil, false
	}
	return o.ContractId, true
}

// HasContractId returns a boolean if a field has been set.
func (o *ContractItem) HasContractId() bool {
	if o != nil && !IsNil(o.ContractId) {
		return true
	}

	return false
}

// SetContractId gets a reference to the given string and assigns it to the ContractId field.
func (o *ContractItem) SetContractId(v string) {
	o.ContractId = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *ContractItem) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractItem) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *ContractItem) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *ContractItem) SetCurrency(v string) {
	o.Currency = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ContractItem) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractItem) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ContractItem) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ContractItem) SetEndDate(v string) {
	o.EndDate = &v
}

// GetEquipmentId returns the EquipmentId field value if set, zero value otherwise.
func (o *ContractItem) GetEquipmentId() string {
	if o == nil || IsNil(o.EquipmentId) {
		var ret string
		return ret
	}
	return *o.EquipmentId
}

// GetEquipmentIdOk returns a tuple with the EquipmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractItem) GetEquipmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EquipmentId) {
		return nil, false
	}
	return o.EquipmentId, true
}

// HasEquipmentId returns a boolean if a field has been set.
func (o *ContractItem) HasEquipmentId() bool {
	if o != nil && !IsNil(o.EquipmentId) {
		return true
	}

	return false
}

// SetEquipmentId gets a reference to the given string and assigns it to the EquipmentId field.
func (o *ContractItem) SetEquipmentId(v string) {
	o.EquipmentId = &v
}

// GetPoNumber returns the PoNumber field value if set, zero value otherwise.
func (o *ContractItem) GetPoNumber() string {
	if o == nil || IsNil(o.PoNumber) {
		var ret string
		return ret
	}
	return *o.PoNumber
}

// GetPoNumberOk returns a tuple with the PoNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractItem) GetPoNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PoNumber) {
		return nil, false
	}
	return o.PoNumber, true
}

// HasPoNumber returns a boolean if a field has been set.
func (o *ContractItem) HasPoNumber() bool {
	if o != nil && !IsNil(o.PoNumber) {
		return true
	}

	return false
}

// SetPoNumber gets a reference to the given string and assigns it to the PoNumber field.
func (o *ContractItem) SetPoNumber(v string) {
	o.PoNumber = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ContractItem) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractItem) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ContractItem) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *ContractItem) SetPrice(v float32) {
	o.Price = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *ContractItem) GetProduct() string {
	if o == nil || IsNil(o.Product) {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractItem) GetProductOk() (*string, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *ContractItem) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *ContractItem) SetProduct(v string) {
	o.Product = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *ContractItem) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractItem) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *ContractItem) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *ContractItem) SetReference(v string) {
	o.Reference = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ContractItem) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractItem) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ContractItem) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ContractItem) SetStartDate(v string) {
	o.StartDate = &v
}

func (o ContractItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContractId) {
		toSerialize["contractId"] = o.ContractId
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.EquipmentId) {
		toSerialize["equipmentId"] = o.EquipmentId
	}
	if !IsNil(o.PoNumber) {
		toSerialize["poNumber"] = o.PoNumber
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContractItem) UnmarshalJSON(data []byte) (err error) {
	varContractItem := _ContractItem{}

	err = json.Unmarshal(data, &varContractItem)

	if err != nil {
		return err
	}

	*o = ContractItem(varContractItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "contractId")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "endDate")
		delete(additionalProperties, "equipmentId")
		delete(additionalProperties, "poNumber")
		delete(additionalProperties, "price")
		delete(additionalProperties, "product")
		delete(additionalProperties, "reference")
		delete(additionalProperties, "startDate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContractItem struct {
	value *ContractItem
	isSet bool
}

func (v NullableContractItem) Get() *ContractItem {
	return v.value
}

func (v *NullableContractItem) Set(val *ContractItem) {
	v.value = val
	v.isSet = true
}

func (v NullableContractItem) IsSet() bool {
	return v.isSet
}

func (v *NullableContractItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractItem(val *ContractItem) *NullableContractItem {
	return &NullableContractItem{value: val, isSet: true}
}

func (v NullableContractItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


