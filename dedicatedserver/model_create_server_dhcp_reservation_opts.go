/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateServerDhcpReservationOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateServerDhcpReservationOpts{}

// CreateServerDhcpReservationOpts struct for CreateServerDhcpReservationOpts
type CreateServerDhcpReservationOpts struct {
	// The URL of PXE boot you want your server to boot from
	Bootfile string `json:"bootfile"`
	// The hostname for the server
	Hostname *string `json:"hostname,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateServerDhcpReservationOpts CreateServerDhcpReservationOpts

// NewCreateServerDhcpReservationOpts instantiates a new CreateServerDhcpReservationOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateServerDhcpReservationOpts(bootfile string) *CreateServerDhcpReservationOpts {
	this := CreateServerDhcpReservationOpts{}
	this.Bootfile = bootfile
	return &this
}

// NewCreateServerDhcpReservationOptsWithDefaults instantiates a new CreateServerDhcpReservationOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateServerDhcpReservationOptsWithDefaults() *CreateServerDhcpReservationOpts {
	this := CreateServerDhcpReservationOpts{}
	return &this
}

// GetBootfile returns the Bootfile field value
func (o *CreateServerDhcpReservationOpts) GetBootfile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bootfile
}

// GetBootfileOk returns a tuple with the Bootfile field value
// and a boolean to check if the value has been set.
func (o *CreateServerDhcpReservationOpts) GetBootfileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bootfile, true
}

// SetBootfile sets field value
func (o *CreateServerDhcpReservationOpts) SetBootfile(v string) {
	o.Bootfile = v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *CreateServerDhcpReservationOpts) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateServerDhcpReservationOpts) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *CreateServerDhcpReservationOpts) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *CreateServerDhcpReservationOpts) SetHostname(v string) {
	o.Hostname = &v
}

func (o CreateServerDhcpReservationOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateServerDhcpReservationOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bootfile"] = o.Bootfile
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateServerDhcpReservationOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bootfile",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateServerDhcpReservationOpts := _CreateServerDhcpReservationOpts{}

	err = json.Unmarshal(data, &varCreateServerDhcpReservationOpts)

	if err != nil {
		return err
	}

	*o = CreateServerDhcpReservationOpts(varCreateServerDhcpReservationOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bootfile")
		delete(additionalProperties, "hostname")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateServerDhcpReservationOpts struct {
	value *CreateServerDhcpReservationOpts
	isSet bool
}

func (v NullableCreateServerDhcpReservationOpts) Get() *CreateServerDhcpReservationOpts {
	return v.value
}

func (v *NullableCreateServerDhcpReservationOpts) Set(val *CreateServerDhcpReservationOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateServerDhcpReservationOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateServerDhcpReservationOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateServerDhcpReservationOpts(val *CreateServerDhcpReservationOpts) *NullableCreateServerDhcpReservationOpts {
	return &NullableCreateServerDhcpReservationOpts{value: val, isSet: true}
}

func (v NullableCreateServerDhcpReservationOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateServerDhcpReservationOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


