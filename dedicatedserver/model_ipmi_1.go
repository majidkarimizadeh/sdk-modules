/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the Ipmi1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipmi1{}

// Ipmi1 struct for Ipmi1
type Ipmi1 struct {
	Defgateway *string `json:"defgateway,omitempty"`
	Firmware *string `json:"firmware,omitempty"`
	Ipaddress *string `json:"ipaddress,omitempty"`
	Ipsource *string `json:"ipsource,omitempty"`
	// Represents a MAC Address in the standard colon delimited format. Eg. `01:23:45:67:89:0A`
	Macaddress *string `json:"macaddress,omitempty" validate:"regexp=([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\\\.[0-9a-fA-F]{4}\\\\.[0-9a-fA-F]{4})$"`
	Subnetmask *string `json:"subnetmask,omitempty"`
	Vendor *string `json:"vendor,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Ipmi1 Ipmi1

// NewIpmi1 instantiates a new Ipmi1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpmi1() *Ipmi1 {
	this := Ipmi1{}
	return &this
}

// NewIpmi1WithDefaults instantiates a new Ipmi1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpmi1WithDefaults() *Ipmi1 {
	this := Ipmi1{}
	return &this
}

// GetDefgateway returns the Defgateway field value if set, zero value otherwise.
func (o *Ipmi1) GetDefgateway() string {
	if o == nil || IsNil(o.Defgateway) {
		var ret string
		return ret
	}
	return *o.Defgateway
}

// GetDefgatewayOk returns a tuple with the Defgateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipmi1) GetDefgatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Defgateway) {
		return nil, false
	}
	return o.Defgateway, true
}

// HasDefgateway returns a boolean if a field has been set.
func (o *Ipmi1) HasDefgateway() bool {
	if o != nil && !IsNil(o.Defgateway) {
		return true
	}

	return false
}

// SetDefgateway gets a reference to the given string and assigns it to the Defgateway field.
func (o *Ipmi1) SetDefgateway(v string) {
	o.Defgateway = &v
}

// GetFirmware returns the Firmware field value if set, zero value otherwise.
func (o *Ipmi1) GetFirmware() string {
	if o == nil || IsNil(o.Firmware) {
		var ret string
		return ret
	}
	return *o.Firmware
}

// GetFirmwareOk returns a tuple with the Firmware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipmi1) GetFirmwareOk() (*string, bool) {
	if o == nil || IsNil(o.Firmware) {
		return nil, false
	}
	return o.Firmware, true
}

// HasFirmware returns a boolean if a field has been set.
func (o *Ipmi1) HasFirmware() bool {
	if o != nil && !IsNil(o.Firmware) {
		return true
	}

	return false
}

// SetFirmware gets a reference to the given string and assigns it to the Firmware field.
func (o *Ipmi1) SetFirmware(v string) {
	o.Firmware = &v
}

// GetIpaddress returns the Ipaddress field value if set, zero value otherwise.
func (o *Ipmi1) GetIpaddress() string {
	if o == nil || IsNil(o.Ipaddress) {
		var ret string
		return ret
	}
	return *o.Ipaddress
}

// GetIpaddressOk returns a tuple with the Ipaddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipmi1) GetIpaddressOk() (*string, bool) {
	if o == nil || IsNil(o.Ipaddress) {
		return nil, false
	}
	return o.Ipaddress, true
}

// HasIpaddress returns a boolean if a field has been set.
func (o *Ipmi1) HasIpaddress() bool {
	if o != nil && !IsNil(o.Ipaddress) {
		return true
	}

	return false
}

// SetIpaddress gets a reference to the given string and assigns it to the Ipaddress field.
func (o *Ipmi1) SetIpaddress(v string) {
	o.Ipaddress = &v
}

// GetIpsource returns the Ipsource field value if set, zero value otherwise.
func (o *Ipmi1) GetIpsource() string {
	if o == nil || IsNil(o.Ipsource) {
		var ret string
		return ret
	}
	return *o.Ipsource
}

// GetIpsourceOk returns a tuple with the Ipsource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipmi1) GetIpsourceOk() (*string, bool) {
	if o == nil || IsNil(o.Ipsource) {
		return nil, false
	}
	return o.Ipsource, true
}

// HasIpsource returns a boolean if a field has been set.
func (o *Ipmi1) HasIpsource() bool {
	if o != nil && !IsNil(o.Ipsource) {
		return true
	}

	return false
}

// SetIpsource gets a reference to the given string and assigns it to the Ipsource field.
func (o *Ipmi1) SetIpsource(v string) {
	o.Ipsource = &v
}

// GetMacaddress returns the Macaddress field value if set, zero value otherwise.
func (o *Ipmi1) GetMacaddress() string {
	if o == nil || IsNil(o.Macaddress) {
		var ret string
		return ret
	}
	return *o.Macaddress
}

// GetMacaddressOk returns a tuple with the Macaddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipmi1) GetMacaddressOk() (*string, bool) {
	if o == nil || IsNil(o.Macaddress) {
		return nil, false
	}
	return o.Macaddress, true
}

// HasMacaddress returns a boolean if a field has been set.
func (o *Ipmi1) HasMacaddress() bool {
	if o != nil && !IsNil(o.Macaddress) {
		return true
	}

	return false
}

// SetMacaddress gets a reference to the given string and assigns it to the Macaddress field.
func (o *Ipmi1) SetMacaddress(v string) {
	o.Macaddress = &v
}

// GetSubnetmask returns the Subnetmask field value if set, zero value otherwise.
func (o *Ipmi1) GetSubnetmask() string {
	if o == nil || IsNil(o.Subnetmask) {
		var ret string
		return ret
	}
	return *o.Subnetmask
}

// GetSubnetmaskOk returns a tuple with the Subnetmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipmi1) GetSubnetmaskOk() (*string, bool) {
	if o == nil || IsNil(o.Subnetmask) {
		return nil, false
	}
	return o.Subnetmask, true
}

// HasSubnetmask returns a boolean if a field has been set.
func (o *Ipmi1) HasSubnetmask() bool {
	if o != nil && !IsNil(o.Subnetmask) {
		return true
	}

	return false
}

// SetSubnetmask gets a reference to the given string and assigns it to the Subnetmask field.
func (o *Ipmi1) SetSubnetmask(v string) {
	o.Subnetmask = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *Ipmi1) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipmi1) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *Ipmi1) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *Ipmi1) SetVendor(v string) {
	o.Vendor = &v
}

func (o Ipmi1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipmi1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Defgateway) {
		toSerialize["defgateway"] = o.Defgateway
	}
	if !IsNil(o.Firmware) {
		toSerialize["firmware"] = o.Firmware
	}
	if !IsNil(o.Ipaddress) {
		toSerialize["ipaddress"] = o.Ipaddress
	}
	if !IsNil(o.Ipsource) {
		toSerialize["ipsource"] = o.Ipsource
	}
	if !IsNil(o.Macaddress) {
		toSerialize["macaddress"] = o.Macaddress
	}
	if !IsNil(o.Subnetmask) {
		toSerialize["subnetmask"] = o.Subnetmask
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Ipmi1) UnmarshalJSON(data []byte) (err error) {
	varIpmi1 := _Ipmi1{}

	err = json.Unmarshal(data, &varIpmi1)

	if err != nil {
		return err
	}

	*o = Ipmi1(varIpmi1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "defgateway")
		delete(additionalProperties, "firmware")
		delete(additionalProperties, "ipaddress")
		delete(additionalProperties, "ipsource")
		delete(additionalProperties, "macaddress")
		delete(additionalProperties, "subnetmask")
		delete(additionalProperties, "vendor")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpmi1 struct {
	value *Ipmi1
	isSet bool
}

func (v NullableIpmi1) Get() *Ipmi1 {
	return v.value
}

func (v *NullableIpmi1) Set(val *Ipmi1) {
	v.value = val
	v.isSet = true
}

func (v NullableIpmi1) IsSet() bool {
	return v.isSet
}

func (v *NullableIpmi1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpmi1(val *Ipmi1) *NullableIpmi1 {
	return &NullableIpmi1{value: val, isSet: true}
}

func (v NullableIpmi1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpmi1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


