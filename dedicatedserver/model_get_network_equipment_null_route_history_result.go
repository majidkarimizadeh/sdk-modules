/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the GetNetworkEquipmentNullRouteHistoryResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetNetworkEquipmentNullRouteHistoryResult{}

// GetNetworkEquipmentNullRouteHistoryResult struct for GetNetworkEquipmentNullRouteHistoryResult
type GetNetworkEquipmentNullRouteHistoryResult struct {
	Metadata *Metadata `json:"_metadata,omitempty"`
	// An array of network equipment null route events
	NullRoutes []NullRoute `json:"nullRoutes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetNetworkEquipmentNullRouteHistoryResult GetNetworkEquipmentNullRouteHistoryResult

// NewGetNetworkEquipmentNullRouteHistoryResult instantiates a new GetNetworkEquipmentNullRouteHistoryResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetNetworkEquipmentNullRouteHistoryResult() *GetNetworkEquipmentNullRouteHistoryResult {
	this := GetNetworkEquipmentNullRouteHistoryResult{}
	return &this
}

// NewGetNetworkEquipmentNullRouteHistoryResultWithDefaults instantiates a new GetNetworkEquipmentNullRouteHistoryResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetNetworkEquipmentNullRouteHistoryResultWithDefaults() *GetNetworkEquipmentNullRouteHistoryResult {
	this := GetNetworkEquipmentNullRouteHistoryResult{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *GetNetworkEquipmentNullRouteHistoryResult) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNetworkEquipmentNullRouteHistoryResult) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *GetNetworkEquipmentNullRouteHistoryResult) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *GetNetworkEquipmentNullRouteHistoryResult) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetNullRoutes returns the NullRoutes field value if set, zero value otherwise.
func (o *GetNetworkEquipmentNullRouteHistoryResult) GetNullRoutes() []NullRoute {
	if o == nil || IsNil(o.NullRoutes) {
		var ret []NullRoute
		return ret
	}
	return o.NullRoutes
}

// GetNullRoutesOk returns a tuple with the NullRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNetworkEquipmentNullRouteHistoryResult) GetNullRoutesOk() ([]NullRoute, bool) {
	if o == nil || IsNil(o.NullRoutes) {
		return nil, false
	}
	return o.NullRoutes, true
}

// HasNullRoutes returns a boolean if a field has been set.
func (o *GetNetworkEquipmentNullRouteHistoryResult) HasNullRoutes() bool {
	if o != nil && !IsNil(o.NullRoutes) {
		return true
	}

	return false
}

// SetNullRoutes gets a reference to the given []NullRoute and assigns it to the NullRoutes field.
func (o *GetNetworkEquipmentNullRouteHistoryResult) SetNullRoutes(v []NullRoute) {
	o.NullRoutes = v
}

func (o GetNetworkEquipmentNullRouteHistoryResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetNetworkEquipmentNullRouteHistoryResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}
	if !IsNil(o.NullRoutes) {
		toSerialize["nullRoutes"] = o.NullRoutes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetNetworkEquipmentNullRouteHistoryResult) UnmarshalJSON(data []byte) (err error) {
	varGetNetworkEquipmentNullRouteHistoryResult := _GetNetworkEquipmentNullRouteHistoryResult{}

	err = json.Unmarshal(data, &varGetNetworkEquipmentNullRouteHistoryResult)

	if err != nil {
		return err
	}

	*o = GetNetworkEquipmentNullRouteHistoryResult(varGetNetworkEquipmentNullRouteHistoryResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_metadata")
		delete(additionalProperties, "nullRoutes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetNetworkEquipmentNullRouteHistoryResult struct {
	value *GetNetworkEquipmentNullRouteHistoryResult
	isSet bool
}

func (v NullableGetNetworkEquipmentNullRouteHistoryResult) Get() *GetNetworkEquipmentNullRouteHistoryResult {
	return v.value
}

func (v *NullableGetNetworkEquipmentNullRouteHistoryResult) Set(val *GetNetworkEquipmentNullRouteHistoryResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNetworkEquipmentNullRouteHistoryResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNetworkEquipmentNullRouteHistoryResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNetworkEquipmentNullRouteHistoryResult(val *GetNetworkEquipmentNullRouteHistoryResult) *NullableGetNetworkEquipmentNullRouteHistoryResult {
	return &NullableGetNetworkEquipmentNullRouteHistoryResult{value: val, isSet: true}
}

func (v NullableGetNetworkEquipmentNullRouteHistoryResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNetworkEquipmentNullRouteHistoryResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


