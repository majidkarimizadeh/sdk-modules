/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the Server type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Server{}

// Server struct for Server
type Server struct {
	// The Asset Id of the server
	AssetId *string `json:"assetId,omitempty"`
	Contract *Contract `json:"contract,omitempty"`
	FeatureAvailability *FeatureAvailability `json:"featureAvailability,omitempty"`
	// Id of the server
	Id *string `json:"id,omitempty"`
	Location *Location `json:"location,omitempty"`
	NetworkInterfaces *NetworkInterfaces `json:"networkInterfaces,omitempty"`
	// List of ports that can be used to manage power of the server
	PowerPorts []Port `json:"powerPorts,omitempty"`
	// An array of private networks
	PrivateNetworks []PrivateNetwork `json:"privateNetworks,omitempty"`
	Rack *Rack `json:"rack,omitempty"`
	// Serial number of server
	SerialNumber *string `json:"serialNumber,omitempty"`
	Specs *ServerSpecs `json:"specs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Server Server

// NewServer instantiates a new Server object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServer() *Server {
	this := Server{}
	return &this
}

// NewServerWithDefaults instantiates a new Server object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerWithDefaults() *Server {
	this := Server{}
	return &this
}

// GetAssetId returns the AssetId field value if set, zero value otherwise.
func (o *Server) GetAssetId() string {
	if o == nil || IsNil(o.AssetId) {
		var ret string
		return ret
	}
	return *o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetAssetIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssetId) {
		return nil, false
	}
	return o.AssetId, true
}

// HasAssetId returns a boolean if a field has been set.
func (o *Server) HasAssetId() bool {
	if o != nil && !IsNil(o.AssetId) {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given string and assigns it to the AssetId field.
func (o *Server) SetAssetId(v string) {
	o.AssetId = &v
}

// GetContract returns the Contract field value if set, zero value otherwise.
func (o *Server) GetContract() Contract {
	if o == nil || IsNil(o.Contract) {
		var ret Contract
		return ret
	}
	return *o.Contract
}

// GetContractOk returns a tuple with the Contract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetContractOk() (*Contract, bool) {
	if o == nil || IsNil(o.Contract) {
		return nil, false
	}
	return o.Contract, true
}

// HasContract returns a boolean if a field has been set.
func (o *Server) HasContract() bool {
	if o != nil && !IsNil(o.Contract) {
		return true
	}

	return false
}

// SetContract gets a reference to the given Contract and assigns it to the Contract field.
func (o *Server) SetContract(v Contract) {
	o.Contract = &v
}

// GetFeatureAvailability returns the FeatureAvailability field value if set, zero value otherwise.
func (o *Server) GetFeatureAvailability() FeatureAvailability {
	if o == nil || IsNil(o.FeatureAvailability) {
		var ret FeatureAvailability
		return ret
	}
	return *o.FeatureAvailability
}

// GetFeatureAvailabilityOk returns a tuple with the FeatureAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetFeatureAvailabilityOk() (*FeatureAvailability, bool) {
	if o == nil || IsNil(o.FeatureAvailability) {
		return nil, false
	}
	return o.FeatureAvailability, true
}

// HasFeatureAvailability returns a boolean if a field has been set.
func (o *Server) HasFeatureAvailability() bool {
	if o != nil && !IsNil(o.FeatureAvailability) {
		return true
	}

	return false
}

// SetFeatureAvailability gets a reference to the given FeatureAvailability and assigns it to the FeatureAvailability field.
func (o *Server) SetFeatureAvailability(v FeatureAvailability) {
	o.FeatureAvailability = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Server) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Server) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Server) SetId(v string) {
	o.Id = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Server) GetLocation() Location {
	if o == nil || IsNil(o.Location) {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetLocationOk() (*Location, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Server) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *Server) SetLocation(v Location) {
	o.Location = &v
}

// GetNetworkInterfaces returns the NetworkInterfaces field value if set, zero value otherwise.
func (o *Server) GetNetworkInterfaces() NetworkInterfaces {
	if o == nil || IsNil(o.NetworkInterfaces) {
		var ret NetworkInterfaces
		return ret
	}
	return *o.NetworkInterfaces
}

// GetNetworkInterfacesOk returns a tuple with the NetworkInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetNetworkInterfacesOk() (*NetworkInterfaces, bool) {
	if o == nil || IsNil(o.NetworkInterfaces) {
		return nil, false
	}
	return o.NetworkInterfaces, true
}

// HasNetworkInterfaces returns a boolean if a field has been set.
func (o *Server) HasNetworkInterfaces() bool {
	if o != nil && !IsNil(o.NetworkInterfaces) {
		return true
	}

	return false
}

// SetNetworkInterfaces gets a reference to the given NetworkInterfaces and assigns it to the NetworkInterfaces field.
func (o *Server) SetNetworkInterfaces(v NetworkInterfaces) {
	o.NetworkInterfaces = &v
}

// GetPowerPorts returns the PowerPorts field value if set, zero value otherwise.
func (o *Server) GetPowerPorts() []Port {
	if o == nil || IsNil(o.PowerPorts) {
		var ret []Port
		return ret
	}
	return o.PowerPorts
}

// GetPowerPortsOk returns a tuple with the PowerPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetPowerPortsOk() ([]Port, bool) {
	if o == nil || IsNil(o.PowerPorts) {
		return nil, false
	}
	return o.PowerPorts, true
}

// HasPowerPorts returns a boolean if a field has been set.
func (o *Server) HasPowerPorts() bool {
	if o != nil && !IsNil(o.PowerPorts) {
		return true
	}

	return false
}

// SetPowerPorts gets a reference to the given []Port and assigns it to the PowerPorts field.
func (o *Server) SetPowerPorts(v []Port) {
	o.PowerPorts = v
}

// GetPrivateNetworks returns the PrivateNetworks field value if set, zero value otherwise.
func (o *Server) GetPrivateNetworks() []PrivateNetwork {
	if o == nil || IsNil(o.PrivateNetworks) {
		var ret []PrivateNetwork
		return ret
	}
	return o.PrivateNetworks
}

// GetPrivateNetworksOk returns a tuple with the PrivateNetworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetPrivateNetworksOk() ([]PrivateNetwork, bool) {
	if o == nil || IsNil(o.PrivateNetworks) {
		return nil, false
	}
	return o.PrivateNetworks, true
}

// HasPrivateNetworks returns a boolean if a field has been set.
func (o *Server) HasPrivateNetworks() bool {
	if o != nil && !IsNil(o.PrivateNetworks) {
		return true
	}

	return false
}

// SetPrivateNetworks gets a reference to the given []PrivateNetwork and assigns it to the PrivateNetworks field.
func (o *Server) SetPrivateNetworks(v []PrivateNetwork) {
	o.PrivateNetworks = v
}

// GetRack returns the Rack field value if set, zero value otherwise.
func (o *Server) GetRack() Rack {
	if o == nil || IsNil(o.Rack) {
		var ret Rack
		return ret
	}
	return *o.Rack
}

// GetRackOk returns a tuple with the Rack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetRackOk() (*Rack, bool) {
	if o == nil || IsNil(o.Rack) {
		return nil, false
	}
	return o.Rack, true
}

// HasRack returns a boolean if a field has been set.
func (o *Server) HasRack() bool {
	if o != nil && !IsNil(o.Rack) {
		return true
	}

	return false
}

// SetRack gets a reference to the given Rack and assigns it to the Rack field.
func (o *Server) SetRack(v Rack) {
	o.Rack = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *Server) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *Server) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *Server) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetSpecs returns the Specs field value if set, zero value otherwise.
func (o *Server) GetSpecs() ServerSpecs {
	if o == nil || IsNil(o.Specs) {
		var ret ServerSpecs
		return ret
	}
	return *o.Specs
}

// GetSpecsOk returns a tuple with the Specs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetSpecsOk() (*ServerSpecs, bool) {
	if o == nil || IsNil(o.Specs) {
		return nil, false
	}
	return o.Specs, true
}

// HasSpecs returns a boolean if a field has been set.
func (o *Server) HasSpecs() bool {
	if o != nil && !IsNil(o.Specs) {
		return true
	}

	return false
}

// SetSpecs gets a reference to the given ServerSpecs and assigns it to the Specs field.
func (o *Server) SetSpecs(v ServerSpecs) {
	o.Specs = &v
}

func (o Server) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Server) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssetId) {
		toSerialize["assetId"] = o.AssetId
	}
	if !IsNil(o.Contract) {
		toSerialize["contract"] = o.Contract
	}
	if !IsNil(o.FeatureAvailability) {
		toSerialize["featureAvailability"] = o.FeatureAvailability
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.NetworkInterfaces) {
		toSerialize["networkInterfaces"] = o.NetworkInterfaces
	}
	if !IsNil(o.PowerPorts) {
		toSerialize["powerPorts"] = o.PowerPorts
	}
	if !IsNil(o.PrivateNetworks) {
		toSerialize["privateNetworks"] = o.PrivateNetworks
	}
	if !IsNil(o.Rack) {
		toSerialize["rack"] = o.Rack
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.Specs) {
		toSerialize["specs"] = o.Specs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Server) UnmarshalJSON(data []byte) (err error) {
	varServer := _Server{}

	err = json.Unmarshal(data, &varServer)

	if err != nil {
		return err
	}

	*o = Server(varServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assetId")
		delete(additionalProperties, "contract")
		delete(additionalProperties, "featureAvailability")
		delete(additionalProperties, "id")
		delete(additionalProperties, "location")
		delete(additionalProperties, "networkInterfaces")
		delete(additionalProperties, "powerPorts")
		delete(additionalProperties, "privateNetworks")
		delete(additionalProperties, "rack")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "specs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServer struct {
	value *Server
	isSet bool
}

func (v NullableServer) Get() *Server {
	return v.value
}

func (v *NullableServer) Set(val *Server) {
	v.value = val
	v.isSet = true
}

func (v NullableServer) IsSet() bool {
	return v.isSet
}

func (v *NullableServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServer(val *Server) *NullableServer {
	return &NullableServer{value: val, isSet: true}
}

func (v NullableServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


