/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the UpdateNetworkEquipmentIpOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNetworkEquipmentIpOpts{}

// UpdateNetworkEquipmentIpOpts struct for UpdateNetworkEquipmentIpOpts
type UpdateNetworkEquipmentIpOpts struct {
	// The detection profile value
	DetectionProfile *string `json:"detectionProfile,omitempty"`
	// The reverse lookup value
	ReverseLookup *string `json:"reverseLookup,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateNetworkEquipmentIpOpts UpdateNetworkEquipmentIpOpts

// NewUpdateNetworkEquipmentIpOpts instantiates a new UpdateNetworkEquipmentIpOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNetworkEquipmentIpOpts() *UpdateNetworkEquipmentIpOpts {
	this := UpdateNetworkEquipmentIpOpts{}
	return &this
}

// NewUpdateNetworkEquipmentIpOptsWithDefaults instantiates a new UpdateNetworkEquipmentIpOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNetworkEquipmentIpOptsWithDefaults() *UpdateNetworkEquipmentIpOpts {
	this := UpdateNetworkEquipmentIpOpts{}
	return &this
}

// GetDetectionProfile returns the DetectionProfile field value if set, zero value otherwise.
func (o *UpdateNetworkEquipmentIpOpts) GetDetectionProfile() string {
	if o == nil || IsNil(o.DetectionProfile) {
		var ret string
		return ret
	}
	return *o.DetectionProfile
}

// GetDetectionProfileOk returns a tuple with the DetectionProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkEquipmentIpOpts) GetDetectionProfileOk() (*string, bool) {
	if o == nil || IsNil(o.DetectionProfile) {
		return nil, false
	}
	return o.DetectionProfile, true
}

// HasDetectionProfile returns a boolean if a field has been set.
func (o *UpdateNetworkEquipmentIpOpts) HasDetectionProfile() bool {
	if o != nil && !IsNil(o.DetectionProfile) {
		return true
	}

	return false
}

// SetDetectionProfile gets a reference to the given string and assigns it to the DetectionProfile field.
func (o *UpdateNetworkEquipmentIpOpts) SetDetectionProfile(v string) {
	o.DetectionProfile = &v
}

// GetReverseLookup returns the ReverseLookup field value if set, zero value otherwise.
func (o *UpdateNetworkEquipmentIpOpts) GetReverseLookup() string {
	if o == nil || IsNil(o.ReverseLookup) {
		var ret string
		return ret
	}
	return *o.ReverseLookup
}

// GetReverseLookupOk returns a tuple with the ReverseLookup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkEquipmentIpOpts) GetReverseLookupOk() (*string, bool) {
	if o == nil || IsNil(o.ReverseLookup) {
		return nil, false
	}
	return o.ReverseLookup, true
}

// HasReverseLookup returns a boolean if a field has been set.
func (o *UpdateNetworkEquipmentIpOpts) HasReverseLookup() bool {
	if o != nil && !IsNil(o.ReverseLookup) {
		return true
	}

	return false
}

// SetReverseLookup gets a reference to the given string and assigns it to the ReverseLookup field.
func (o *UpdateNetworkEquipmentIpOpts) SetReverseLookup(v string) {
	o.ReverseLookup = &v
}

func (o UpdateNetworkEquipmentIpOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNetworkEquipmentIpOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DetectionProfile) {
		toSerialize["detectionProfile"] = o.DetectionProfile
	}
	if !IsNil(o.ReverseLookup) {
		toSerialize["reverseLookup"] = o.ReverseLookup
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateNetworkEquipmentIpOpts) UnmarshalJSON(data []byte) (err error) {
	varUpdateNetworkEquipmentIpOpts := _UpdateNetworkEquipmentIpOpts{}

	err = json.Unmarshal(data, &varUpdateNetworkEquipmentIpOpts)

	if err != nil {
		return err
	}

	*o = UpdateNetworkEquipmentIpOpts(varUpdateNetworkEquipmentIpOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "detectionProfile")
		delete(additionalProperties, "reverseLookup")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateNetworkEquipmentIpOpts struct {
	value *UpdateNetworkEquipmentIpOpts
	isSet bool
}

func (v NullableUpdateNetworkEquipmentIpOpts) Get() *UpdateNetworkEquipmentIpOpts {
	return v.value
}

func (v *NullableUpdateNetworkEquipmentIpOpts) Set(val *UpdateNetworkEquipmentIpOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNetworkEquipmentIpOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNetworkEquipmentIpOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNetworkEquipmentIpOpts(val *UpdateNetworkEquipmentIpOpts) *NullableUpdateNetworkEquipmentIpOpts {
	return &NullableUpdateNetworkEquipmentIpOpts{value: val, isSet: true}
}

func (v NullableUpdateNetworkEquipmentIpOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNetworkEquipmentIpOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


