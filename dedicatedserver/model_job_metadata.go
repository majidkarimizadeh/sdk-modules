/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the JobMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobMetadata{}

// JobMetadata The Job Metadata schema
type JobMetadata struct {
	// Batch ID for batch jobs
	BATCH_ID *string `json:"BATCH_ID,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JobMetadata JobMetadata

// NewJobMetadata instantiates a new JobMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobMetadata() *JobMetadata {
	this := JobMetadata{}
	return &this
}

// NewJobMetadataWithDefaults instantiates a new JobMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobMetadataWithDefaults() *JobMetadata {
	this := JobMetadata{}
	return &this
}

// GetBATCH_ID returns the BATCH_ID field value if set, zero value otherwise.
func (o *JobMetadata) GetBATCH_ID() string {
	if o == nil || IsNil(o.BATCH_ID) {
		var ret string
		return ret
	}
	return *o.BATCH_ID
}

// GetBATCH_IDOk returns a tuple with the BATCH_ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobMetadata) GetBATCH_IDOk() (*string, bool) {
	if o == nil || IsNil(o.BATCH_ID) {
		return nil, false
	}
	return o.BATCH_ID, true
}

// HasBATCH_ID returns a boolean if a field has been set.
func (o *JobMetadata) HasBATCH_ID() bool {
	if o != nil && !IsNil(o.BATCH_ID) {
		return true
	}

	return false
}

// SetBATCH_ID gets a reference to the given string and assigns it to the BATCH_ID field.
func (o *JobMetadata) SetBATCH_ID(v string) {
	o.BATCH_ID = &v
}

func (o JobMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BATCH_ID) {
		toSerialize["BATCH_ID"] = o.BATCH_ID
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JobMetadata) UnmarshalJSON(data []byte) (err error) {
	varJobMetadata := _JobMetadata{}

	err = json.Unmarshal(data, &varJobMetadata)

	if err != nil {
		return err
	}

	*o = JobMetadata(varJobMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "BATCH_ID")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJobMetadata struct {
	value *JobMetadata
	isSet bool
}

func (v NullableJobMetadata) Get() *JobMetadata {
	return v.value
}

func (v *NullableJobMetadata) Set(val *JobMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableJobMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableJobMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobMetadata(val *JobMetadata) *NullableJobMetadata {
	return &NullableJobMetadata{value: val, isSet: true}
}

func (v NullableJobMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


