/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the PrivateNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateNetwork{}

// PrivateNetwork struct for PrivateNetwork
type PrivateNetwork struct {
	// Private network id
	Id *string `json:"id,omitempty"`
	LinkSpeed *LinkSpeed `json:"linkSpeed,omitempty"`
	// Configuration status
	Status *string `json:"status,omitempty"`
	Subnet *string `json:"subnet,omitempty"`
	// VLAN id
	VlanId *string `json:"vlanId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PrivateNetwork PrivateNetwork

// NewPrivateNetwork instantiates a new PrivateNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateNetwork() *PrivateNetwork {
	this := PrivateNetwork{}
	return &this
}

// NewPrivateNetworkWithDefaults instantiates a new PrivateNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateNetworkWithDefaults() *PrivateNetwork {
	this := PrivateNetwork{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PrivateNetwork) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateNetwork) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PrivateNetwork) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PrivateNetwork) SetId(v string) {
	o.Id = &v
}

// GetLinkSpeed returns the LinkSpeed field value if set, zero value otherwise.
func (o *PrivateNetwork) GetLinkSpeed() LinkSpeed {
	if o == nil || IsNil(o.LinkSpeed) {
		var ret LinkSpeed
		return ret
	}
	return *o.LinkSpeed
}

// GetLinkSpeedOk returns a tuple with the LinkSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateNetwork) GetLinkSpeedOk() (*LinkSpeed, bool) {
	if o == nil || IsNil(o.LinkSpeed) {
		return nil, false
	}
	return o.LinkSpeed, true
}

// HasLinkSpeed returns a boolean if a field has been set.
func (o *PrivateNetwork) HasLinkSpeed() bool {
	if o != nil && !IsNil(o.LinkSpeed) {
		return true
	}

	return false
}

// SetLinkSpeed gets a reference to the given LinkSpeed and assigns it to the LinkSpeed field.
func (o *PrivateNetwork) SetLinkSpeed(v LinkSpeed) {
	o.LinkSpeed = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PrivateNetwork) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateNetwork) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PrivateNetwork) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PrivateNetwork) SetStatus(v string) {
	o.Status = &v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *PrivateNetwork) GetSubnet() string {
	if o == nil || IsNil(o.Subnet) {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateNetwork) GetSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.Subnet) {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *PrivateNetwork) HasSubnet() bool {
	if o != nil && !IsNil(o.Subnet) {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *PrivateNetwork) SetSubnet(v string) {
	o.Subnet = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *PrivateNetwork) GetVlanId() string {
	if o == nil || IsNil(o.VlanId) {
		var ret string
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateNetwork) GetVlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *PrivateNetwork) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given string and assigns it to the VlanId field.
func (o *PrivateNetwork) SetVlanId(v string) {
	o.VlanId = &v
}

func (o PrivateNetwork) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LinkSpeed) {
		toSerialize["linkSpeed"] = o.LinkSpeed
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Subnet) {
		toSerialize["subnet"] = o.Subnet
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlanId"] = o.VlanId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrivateNetwork) UnmarshalJSON(data []byte) (err error) {
	varPrivateNetwork := _PrivateNetwork{}

	err = json.Unmarshal(data, &varPrivateNetwork)

	if err != nil {
		return err
	}

	*o = PrivateNetwork(varPrivateNetwork)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "linkSpeed")
		delete(additionalProperties, "status")
		delete(additionalProperties, "subnet")
		delete(additionalProperties, "vlanId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrivateNetwork struct {
	value *PrivateNetwork
	isSet bool
}

func (v NullablePrivateNetwork) Get() *PrivateNetwork {
	return v.value
}

func (v *NullablePrivateNetwork) Set(val *PrivateNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateNetwork(val *PrivateNetwork) *NullablePrivateNetwork {
	return &NullablePrivateNetwork{value: val, isSet: true}
}

func (v NullablePrivateNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


