/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the GetRescueImageListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRescueImageListResult{}

// GetRescueImageListResult struct for GetRescueImageListResult
type GetRescueImageListResult struct {
	Metadata *Metadata `json:"_metadata,omitempty"`
	// A list of operating systems
	RescueImages []RescueImage `json:"rescueImages,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetRescueImageListResult GetRescueImageListResult

// NewGetRescueImageListResult instantiates a new GetRescueImageListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRescueImageListResult() *GetRescueImageListResult {
	this := GetRescueImageListResult{}
	return &this
}

// NewGetRescueImageListResultWithDefaults instantiates a new GetRescueImageListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRescueImageListResultWithDefaults() *GetRescueImageListResult {
	this := GetRescueImageListResult{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *GetRescueImageListResult) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRescueImageListResult) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *GetRescueImageListResult) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *GetRescueImageListResult) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetRescueImages returns the RescueImages field value if set, zero value otherwise.
func (o *GetRescueImageListResult) GetRescueImages() []RescueImage {
	if o == nil || IsNil(o.RescueImages) {
		var ret []RescueImage
		return ret
	}
	return o.RescueImages
}

// GetRescueImagesOk returns a tuple with the RescueImages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRescueImageListResult) GetRescueImagesOk() ([]RescueImage, bool) {
	if o == nil || IsNil(o.RescueImages) {
		return nil, false
	}
	return o.RescueImages, true
}

// HasRescueImages returns a boolean if a field has been set.
func (o *GetRescueImageListResult) HasRescueImages() bool {
	if o != nil && !IsNil(o.RescueImages) {
		return true
	}

	return false
}

// SetRescueImages gets a reference to the given []RescueImage and assigns it to the RescueImages field.
func (o *GetRescueImageListResult) SetRescueImages(v []RescueImage) {
	o.RescueImages = v
}

func (o GetRescueImageListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRescueImageListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}
	if !IsNil(o.RescueImages) {
		toSerialize["rescueImages"] = o.RescueImages
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetRescueImageListResult) UnmarshalJSON(data []byte) (err error) {
	varGetRescueImageListResult := _GetRescueImageListResult{}

	err = json.Unmarshal(data, &varGetRescueImageListResult)

	if err != nil {
		return err
	}

	*o = GetRescueImageListResult(varGetRescueImageListResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_metadata")
		delete(additionalProperties, "rescueImages")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetRescueImageListResult struct {
	value *GetRescueImageListResult
	isSet bool
}

func (v NullableGetRescueImageListResult) Get() *GetRescueImageListResult {
	return v.value
}

func (v *NullableGetRescueImageListResult) Set(val *GetRescueImageListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRescueImageListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRescueImageListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRescueImageListResult(val *GetRescueImageListResult) *NullableGetRescueImageListResult {
	return &NullableGetRescueImageListResult{value: val, isSet: true}
}

func (v NullableGetRescueImageListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRescueImageListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


