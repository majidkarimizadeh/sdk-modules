/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the IpmiResetServerOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpmiResetServerOpts{}

// IpmiResetServerOpts struct for IpmiResetServerOpts
type IpmiResetServerOpts struct {
	// Url which will receive callbacks
	CallbackUrl *string `json:"callbackUrl,omitempty"`
	// If set to `true`, server will be power cycled in order to complete the operation
	PowerCycle *bool `json:"powerCycle,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IpmiResetServerOpts IpmiResetServerOpts

// NewIpmiResetServerOpts instantiates a new IpmiResetServerOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpmiResetServerOpts() *IpmiResetServerOpts {
	this := IpmiResetServerOpts{}
	var powerCycle bool = true
	this.PowerCycle = &powerCycle
	return &this
}

// NewIpmiResetServerOptsWithDefaults instantiates a new IpmiResetServerOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpmiResetServerOptsWithDefaults() *IpmiResetServerOpts {
	this := IpmiResetServerOpts{}
	var powerCycle bool = true
	this.PowerCycle = &powerCycle
	return &this
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *IpmiResetServerOpts) GetCallbackUrl() string {
	if o == nil || IsNil(o.CallbackUrl) {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpmiResetServerOpts) GetCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackUrl) {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *IpmiResetServerOpts) HasCallbackUrl() bool {
	if o != nil && !IsNil(o.CallbackUrl) {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *IpmiResetServerOpts) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

// GetPowerCycle returns the PowerCycle field value if set, zero value otherwise.
func (o *IpmiResetServerOpts) GetPowerCycle() bool {
	if o == nil || IsNil(o.PowerCycle) {
		var ret bool
		return ret
	}
	return *o.PowerCycle
}

// GetPowerCycleOk returns a tuple with the PowerCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpmiResetServerOpts) GetPowerCycleOk() (*bool, bool) {
	if o == nil || IsNil(o.PowerCycle) {
		return nil, false
	}
	return o.PowerCycle, true
}

// HasPowerCycle returns a boolean if a field has been set.
func (o *IpmiResetServerOpts) HasPowerCycle() bool {
	if o != nil && !IsNil(o.PowerCycle) {
		return true
	}

	return false
}

// SetPowerCycle gets a reference to the given bool and assigns it to the PowerCycle field.
func (o *IpmiResetServerOpts) SetPowerCycle(v bool) {
	o.PowerCycle = &v
}

func (o IpmiResetServerOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpmiResetServerOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallbackUrl) {
		toSerialize["callbackUrl"] = o.CallbackUrl
	}
	if !IsNil(o.PowerCycle) {
		toSerialize["powerCycle"] = o.PowerCycle
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IpmiResetServerOpts) UnmarshalJSON(data []byte) (err error) {
	varIpmiResetServerOpts := _IpmiResetServerOpts{}

	err = json.Unmarshal(data, &varIpmiResetServerOpts)

	if err != nil {
		return err
	}

	*o = IpmiResetServerOpts(varIpmiResetServerOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "callbackUrl")
		delete(additionalProperties, "powerCycle")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpmiResetServerOpts struct {
	value *IpmiResetServerOpts
	isSet bool
}

func (v NullableIpmiResetServerOpts) Get() *IpmiResetServerOpts {
	return v.value
}

func (v *NullableIpmiResetServerOpts) Set(val *IpmiResetServerOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableIpmiResetServerOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableIpmiResetServerOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpmiResetServerOpts(val *IpmiResetServerOpts) *NullableIpmiResetServerOpts {
	return &NullableIpmiResetServerOpts{value: val, isSet: true}
}

func (v NullableIpmiResetServerOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpmiResetServerOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


