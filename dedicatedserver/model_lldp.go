/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the Lldp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Lldp{}

// Lldp struct for Lldp
type Lldp struct {
	Chassis *LldpChassis `json:"chassis,omitempty"`
	Port *Port1 `json:"port,omitempty"`
	Vlan *Vlan `json:"vlan,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Lldp Lldp

// NewLldp instantiates a new Lldp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLldp() *Lldp {
	this := Lldp{}
	return &this
}

// NewLldpWithDefaults instantiates a new Lldp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLldpWithDefaults() *Lldp {
	this := Lldp{}
	return &this
}

// GetChassis returns the Chassis field value if set, zero value otherwise.
func (o *Lldp) GetChassis() LldpChassis {
	if o == nil || IsNil(o.Chassis) {
		var ret LldpChassis
		return ret
	}
	return *o.Chassis
}

// GetChassisOk returns a tuple with the Chassis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lldp) GetChassisOk() (*LldpChassis, bool) {
	if o == nil || IsNil(o.Chassis) {
		return nil, false
	}
	return o.Chassis, true
}

// HasChassis returns a boolean if a field has been set.
func (o *Lldp) HasChassis() bool {
	if o != nil && !IsNil(o.Chassis) {
		return true
	}

	return false
}

// SetChassis gets a reference to the given LldpChassis and assigns it to the Chassis field.
func (o *Lldp) SetChassis(v LldpChassis) {
	o.Chassis = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *Lldp) GetPort() Port1 {
	if o == nil || IsNil(o.Port) {
		var ret Port1
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lldp) GetPortOk() (*Port1, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *Lldp) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given Port1 and assigns it to the Port field.
func (o *Lldp) SetPort(v Port1) {
	o.Port = &v
}

// GetVlan returns the Vlan field value if set, zero value otherwise.
func (o *Lldp) GetVlan() Vlan {
	if o == nil || IsNil(o.Vlan) {
		var ret Vlan
		return ret
	}
	return *o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lldp) GetVlanOk() (*Vlan, bool) {
	if o == nil || IsNil(o.Vlan) {
		return nil, false
	}
	return o.Vlan, true
}

// HasVlan returns a boolean if a field has been set.
func (o *Lldp) HasVlan() bool {
	if o != nil && !IsNil(o.Vlan) {
		return true
	}

	return false
}

// SetVlan gets a reference to the given Vlan and assigns it to the Vlan field.
func (o *Lldp) SetVlan(v Vlan) {
	o.Vlan = &v
}

func (o Lldp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Lldp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Chassis) {
		toSerialize["chassis"] = o.Chassis
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Vlan) {
		toSerialize["vlan"] = o.Vlan
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Lldp) UnmarshalJSON(data []byte) (err error) {
	varLldp := _Lldp{}

	err = json.Unmarshal(data, &varLldp)

	if err != nil {
		return err
	}

	*o = Lldp(varLldp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chassis")
		delete(additionalProperties, "port")
		delete(additionalProperties, "vlan")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLldp struct {
	value *Lldp
	isSet bool
}

func (v NullableLldp) Get() *Lldp {
	return v.value
}

func (v *NullableLldp) Set(val *Lldp) {
	v.value = val
	v.isSet = true
}

func (v NullableLldp) IsSet() bool {
	return v.isSet
}

func (v *NullableLldp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLldp(val *Lldp) *NullableLldp {
	return &NullableLldp{value: val, isSet: true}
}

func (v NullableLldp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLldp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


