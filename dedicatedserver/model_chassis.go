/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the Chassis type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Chassis{}

// Chassis struct for Chassis
type Chassis struct {
	Description *string `json:"description,omitempty"`
	Firmware *Firmware `json:"firmware,omitempty"`
	Motherboard *Motherboard `json:"motherboard,omitempty"`
	Product *string `json:"product,omitempty"`
	Serial *string `json:"serial,omitempty"`
	Vendor *string `json:"vendor,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Chassis Chassis

// NewChassis instantiates a new Chassis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChassis() *Chassis {
	this := Chassis{}
	return &this
}

// NewChassisWithDefaults instantiates a new Chassis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChassisWithDefaults() *Chassis {
	this := Chassis{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Chassis) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chassis) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Chassis) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Chassis) SetDescription(v string) {
	o.Description = &v
}

// GetFirmware returns the Firmware field value if set, zero value otherwise.
func (o *Chassis) GetFirmware() Firmware {
	if o == nil || IsNil(o.Firmware) {
		var ret Firmware
		return ret
	}
	return *o.Firmware
}

// GetFirmwareOk returns a tuple with the Firmware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chassis) GetFirmwareOk() (*Firmware, bool) {
	if o == nil || IsNil(o.Firmware) {
		return nil, false
	}
	return o.Firmware, true
}

// HasFirmware returns a boolean if a field has been set.
func (o *Chassis) HasFirmware() bool {
	if o != nil && !IsNil(o.Firmware) {
		return true
	}

	return false
}

// SetFirmware gets a reference to the given Firmware and assigns it to the Firmware field.
func (o *Chassis) SetFirmware(v Firmware) {
	o.Firmware = &v
}

// GetMotherboard returns the Motherboard field value if set, zero value otherwise.
func (o *Chassis) GetMotherboard() Motherboard {
	if o == nil || IsNil(o.Motherboard) {
		var ret Motherboard
		return ret
	}
	return *o.Motherboard
}

// GetMotherboardOk returns a tuple with the Motherboard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chassis) GetMotherboardOk() (*Motherboard, bool) {
	if o == nil || IsNil(o.Motherboard) {
		return nil, false
	}
	return o.Motherboard, true
}

// HasMotherboard returns a boolean if a field has been set.
func (o *Chassis) HasMotherboard() bool {
	if o != nil && !IsNil(o.Motherboard) {
		return true
	}

	return false
}

// SetMotherboard gets a reference to the given Motherboard and assigns it to the Motherboard field.
func (o *Chassis) SetMotherboard(v Motherboard) {
	o.Motherboard = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *Chassis) GetProduct() string {
	if o == nil || IsNil(o.Product) {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chassis) GetProductOk() (*string, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *Chassis) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *Chassis) SetProduct(v string) {
	o.Product = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *Chassis) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chassis) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *Chassis) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *Chassis) SetSerial(v string) {
	o.Serial = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *Chassis) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chassis) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *Chassis) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *Chassis) SetVendor(v string) {
	o.Vendor = &v
}

func (o Chassis) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Chassis) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Firmware) {
		toSerialize["firmware"] = o.Firmware
	}
	if !IsNil(o.Motherboard) {
		toSerialize["motherboard"] = o.Motherboard
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Chassis) UnmarshalJSON(data []byte) (err error) {
	varChassis := _Chassis{}

	err = json.Unmarshal(data, &varChassis)

	if err != nil {
		return err
	}

	*o = Chassis(varChassis)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "firmware")
		delete(additionalProperties, "motherboard")
		delete(additionalProperties, "product")
		delete(additionalProperties, "serial")
		delete(additionalProperties, "vendor")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChassis struct {
	value *Chassis
	isSet bool
}

func (v NullableChassis) Get() *Chassis {
	return v.value
}

func (v *NullableChassis) Set(val *Chassis) {
	v.value = val
	v.isSet = true
}

func (v NullableChassis) IsSet() bool {
	return v.isSet
}

func (v *NullableChassis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChassis(val *Chassis) *NullableChassis {
	return &NullableChassis{value: val, isSet: true}
}

func (v NullableChassis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChassis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


