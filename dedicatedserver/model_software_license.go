/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the SoftwareLicense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SoftwareLicense{}

// SoftwareLicense struct for SoftwareLicense
type SoftwareLicense struct {
	Name *string `json:"name,omitempty"`
	Price *float32 `json:"price,omitempty"`
	Currency *string `json:"currency,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SoftwareLicense SoftwareLicense

// NewSoftwareLicense instantiates a new SoftwareLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftwareLicense() *SoftwareLicense {
	this := SoftwareLicense{}
	return &this
}

// NewSoftwareLicenseWithDefaults instantiates a new SoftwareLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftwareLicenseWithDefaults() *SoftwareLicense {
	this := SoftwareLicense{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SoftwareLicense) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareLicense) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SoftwareLicense) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SoftwareLicense) SetName(v string) {
	o.Name = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *SoftwareLicense) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareLicense) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *SoftwareLicense) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *SoftwareLicense) SetPrice(v float32) {
	o.Price = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *SoftwareLicense) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareLicense) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *SoftwareLicense) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *SoftwareLicense) SetCurrency(v string) {
	o.Currency = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SoftwareLicense) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareLicense) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SoftwareLicense) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SoftwareLicense) SetType(v string) {
	o.Type = &v
}

func (o SoftwareLicense) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SoftwareLicense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SoftwareLicense) UnmarshalJSON(data []byte) (err error) {
	varSoftwareLicense := _SoftwareLicense{}

	err = json.Unmarshal(data, &varSoftwareLicense)

	if err != nil {
		return err
	}

	*o = SoftwareLicense(varSoftwareLicense)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "price")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSoftwareLicense struct {
	value *SoftwareLicense
	isSet bool
}

func (v NullableSoftwareLicense) Get() *SoftwareLicense {
	return v.value
}

func (v *NullableSoftwareLicense) Set(val *SoftwareLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwareLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwareLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwareLicense(val *SoftwareLicense) *NullableSoftwareLicense {
	return &NullableSoftwareLicense{value: val, isSet: true}
}

func (v NullableSoftwareLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwareLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


