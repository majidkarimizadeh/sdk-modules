/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"fmt"
)

// checks if the AddServerToPrivateNetworkOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddServerToPrivateNetworkOpts{}

// AddServerToPrivateNetworkOpts struct for AddServerToPrivateNetworkOpts
type AddServerToPrivateNetworkOpts struct {
	LinkSpeed LinkSpeed `json:"linkSpeed"`
	AdditionalProperties map[string]interface{}
}

type _AddServerToPrivateNetworkOpts AddServerToPrivateNetworkOpts

// NewAddServerToPrivateNetworkOpts instantiates a new AddServerToPrivateNetworkOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddServerToPrivateNetworkOpts(linkSpeed LinkSpeed) *AddServerToPrivateNetworkOpts {
	this := AddServerToPrivateNetworkOpts{}
	this.LinkSpeed = linkSpeed
	return &this
}

// NewAddServerToPrivateNetworkOptsWithDefaults instantiates a new AddServerToPrivateNetworkOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddServerToPrivateNetworkOptsWithDefaults() *AddServerToPrivateNetworkOpts {
	this := AddServerToPrivateNetworkOpts{}
	return &this
}

// GetLinkSpeed returns the LinkSpeed field value
func (o *AddServerToPrivateNetworkOpts) GetLinkSpeed() LinkSpeed {
	if o == nil {
		var ret LinkSpeed
		return ret
	}

	return o.LinkSpeed
}

// GetLinkSpeedOk returns a tuple with the LinkSpeed field value
// and a boolean to check if the value has been set.
func (o *AddServerToPrivateNetworkOpts) GetLinkSpeedOk() (*LinkSpeed, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkSpeed, true
}

// SetLinkSpeed sets field value
func (o *AddServerToPrivateNetworkOpts) SetLinkSpeed(v LinkSpeed) {
	o.LinkSpeed = v
}

func (o AddServerToPrivateNetworkOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddServerToPrivateNetworkOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["linkSpeed"] = o.LinkSpeed

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AddServerToPrivateNetworkOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"linkSpeed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddServerToPrivateNetworkOpts := _AddServerToPrivateNetworkOpts{}

	err = json.Unmarshal(data, &varAddServerToPrivateNetworkOpts)

	if err != nil {
		return err
	}

	*o = AddServerToPrivateNetworkOpts(varAddServerToPrivateNetworkOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "linkSpeed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAddServerToPrivateNetworkOpts struct {
	value *AddServerToPrivateNetworkOpts
	isSet bool
}

func (v NullableAddServerToPrivateNetworkOpts) Get() *AddServerToPrivateNetworkOpts {
	return v.value
}

func (v *NullableAddServerToPrivateNetworkOpts) Set(val *AddServerToPrivateNetworkOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableAddServerToPrivateNetworkOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableAddServerToPrivateNetworkOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddServerToPrivateNetworkOpts(val *AddServerToPrivateNetworkOpts) *NullableAddServerToPrivateNetworkOpts {
	return &NullableAddServerToPrivateNetworkOpts{value: val, isSet: true}
}

func (v NullableAddServerToPrivateNetworkOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddServerToPrivateNetworkOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


