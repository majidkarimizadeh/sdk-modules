/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the Ram type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ram{}

// Ram RAM of the server
type Ram struct {
	// The total RAM size of the server
	Size *int32 `json:"size,omitempty"`
	// RAM type of the server
	Unit *string `json:"unit,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Ram Ram

// NewRam instantiates a new Ram object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRam() *Ram {
	this := Ram{}
	return &this
}

// NewRamWithDefaults instantiates a new Ram object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRamWithDefaults() *Ram {
	this := Ram{}
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Ram) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ram) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Ram) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *Ram) SetSize(v int32) {
	o.Size = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *Ram) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ram) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *Ram) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *Ram) SetUnit(v string) {
	o.Unit = &v
}

func (o Ram) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ram) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Ram) UnmarshalJSON(data []byte) (err error) {
	varRam := _Ram{}

	err = json.Unmarshal(data, &varRam)

	if err != nil {
		return err
	}

	*o = Ram(varRam)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "size")
		delete(additionalProperties, "unit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRam struct {
	value *Ram
	isSet bool
}

func (v NullableRam) Get() *Ram {
	return v.value
}

func (v *NullableRam) Set(val *Ram) {
	v.value = val
	v.isSet = true
}

func (v NullableRam) IsSet() bool {
	return v.isSet
}

func (v *NullableRam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRam(val *Ram) *NullableRam {
	return &NullableRam{value: val, isSet: true}
}

func (v NullableRam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


