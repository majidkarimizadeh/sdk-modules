/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"fmt"
)

// RaidLevel RAID level to apply, this value is only required if you specify a type HW or SW
type RaidLevel int32

// List of raidLevel
const (
	RAIDLEVEL__0 RaidLevel = 0
	RAIDLEVEL__1 RaidLevel = 1
	RAIDLEVEL__5 RaidLevel = 5
	RAIDLEVEL__10 RaidLevel = 10
)

// All allowed values of RaidLevel enum
var AllowedRaidLevelEnumValues = []RaidLevel{
	0,
	1,
	5,
	10,
}

func (v *RaidLevel) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RaidLevel(value)
	for _, existing := range AllowedRaidLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RaidLevel", value)
}

// NewRaidLevelFromValue returns a pointer to a valid RaidLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRaidLevelFromValue(v int32) (*RaidLevel, error) {
	ev := RaidLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RaidLevel: valid values are %v", v, AllowedRaidLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RaidLevel) IsValid() bool {
	for _, existing := range AllowedRaidLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to raidLevel value
func (v RaidLevel) Ptr() *RaidLevel {
	return &v
}

type NullableRaidLevel struct {
	value *RaidLevel
	isSet bool
}

func (v NullableRaidLevel) Get() *RaidLevel {
	return v.value
}

func (v *NullableRaidLevel) Set(val *RaidLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableRaidLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableRaidLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRaidLevel(val *RaidLevel) *NullableRaidLevel {
	return &NullableRaidLevel{value: val, isSet: true}
}

func (v NullableRaidLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRaidLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

