/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the GetServerListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetServerListResult{}

// GetServerListResult struct for GetServerListResult
type GetServerListResult struct {
	Metadata *Metadata `json:"_metadata,omitempty"`
	// An array of servers
	Servers []Server `json:"servers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetServerListResult GetServerListResult

// NewGetServerListResult instantiates a new GetServerListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetServerListResult() *GetServerListResult {
	this := GetServerListResult{}
	return &this
}

// NewGetServerListResultWithDefaults instantiates a new GetServerListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetServerListResultWithDefaults() *GetServerListResult {
	this := GetServerListResult{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *GetServerListResult) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerListResult) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *GetServerListResult) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *GetServerListResult) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetServers returns the Servers field value if set, zero value otherwise.
func (o *GetServerListResult) GetServers() []Server {
	if o == nil || IsNil(o.Servers) {
		var ret []Server
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerListResult) GetServersOk() ([]Server, bool) {
	if o == nil || IsNil(o.Servers) {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *GetServerListResult) HasServers() bool {
	if o != nil && !IsNil(o.Servers) {
		return true
	}

	return false
}

// SetServers gets a reference to the given []Server and assigns it to the Servers field.
func (o *GetServerListResult) SetServers(v []Server) {
	o.Servers = v
}

func (o GetServerListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetServerListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}
	if !IsNil(o.Servers) {
		toSerialize["servers"] = o.Servers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetServerListResult) UnmarshalJSON(data []byte) (err error) {
	varGetServerListResult := _GetServerListResult{}

	err = json.Unmarshal(data, &varGetServerListResult)

	if err != nil {
		return err
	}

	*o = GetServerListResult(varGetServerListResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_metadata")
		delete(additionalProperties, "servers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetServerListResult struct {
	value *GetServerListResult
	isSet bool
}

func (v NullableGetServerListResult) Get() *GetServerListResult {
	return v.value
}

func (v *NullableGetServerListResult) Set(val *GetServerListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetServerListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetServerListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetServerListResult(val *GetServerListResult) *NullableGetServerListResult {
	return &NullableGetServerListResult{value: val, isSet: true}
}

func (v NullableGetServerListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetServerListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


