/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the ControlPanelList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlPanelList{}

// ControlPanelList struct for ControlPanelList
type ControlPanelList struct {
	Metadata *Metadata `json:"_metadata,omitempty"`
	// A list of control panels
	ControlPanels []ControlPanel `json:"controlPanels,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ControlPanelList ControlPanelList

// NewControlPanelList instantiates a new ControlPanelList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlPanelList() *ControlPanelList {
	this := ControlPanelList{}
	return &this
}

// NewControlPanelListWithDefaults instantiates a new ControlPanelList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlPanelListWithDefaults() *ControlPanelList {
	this := ControlPanelList{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ControlPanelList) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlPanelList) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ControlPanelList) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *ControlPanelList) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetControlPanels returns the ControlPanels field value if set, zero value otherwise.
func (o *ControlPanelList) GetControlPanels() []ControlPanel {
	if o == nil || IsNil(o.ControlPanels) {
		var ret []ControlPanel
		return ret
	}
	return o.ControlPanels
}

// GetControlPanelsOk returns a tuple with the ControlPanels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlPanelList) GetControlPanelsOk() ([]ControlPanel, bool) {
	if o == nil || IsNil(o.ControlPanels) {
		return nil, false
	}
	return o.ControlPanels, true
}

// HasControlPanels returns a boolean if a field has been set.
func (o *ControlPanelList) HasControlPanels() bool {
	if o != nil && !IsNil(o.ControlPanels) {
		return true
	}

	return false
}

// SetControlPanels gets a reference to the given []ControlPanel and assigns it to the ControlPanels field.
func (o *ControlPanelList) SetControlPanels(v []ControlPanel) {
	o.ControlPanels = v
}

func (o ControlPanelList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlPanelList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}
	if !IsNil(o.ControlPanels) {
		toSerialize["controlPanels"] = o.ControlPanels
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ControlPanelList) UnmarshalJSON(data []byte) (err error) {
	varControlPanelList := _ControlPanelList{}

	err = json.Unmarshal(data, &varControlPanelList)

	if err != nil {
		return err
	}

	*o = ControlPanelList(varControlPanelList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_metadata")
		delete(additionalProperties, "controlPanels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableControlPanelList struct {
	value *ControlPanelList
	isSet bool
}

func (v NullableControlPanelList) Get() *ControlPanelList {
	return v.value
}

func (v *NullableControlPanelList) Set(val *ControlPanelList) {
	v.value = val
	v.isSet = true
}

func (v NullableControlPanelList) IsSet() bool {
	return v.isSet
}

func (v *NullableControlPanelList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlPanelList(val *ControlPanelList) *NullableControlPanelList {
	return &NullableControlPanelList{value: val, isSet: true}
}

func (v NullableControlPanelList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlPanelList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


