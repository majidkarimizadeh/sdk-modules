/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"time"
)

// checks if the MetricValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricValue{}

// MetricValue An array of metrics grouped by granularity
type MetricValue struct {
	// The time of the current metric
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// The value of the current metric
	Value *int32 `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MetricValue MetricValue

// NewMetricValue instantiates a new MetricValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricValue() *MetricValue {
	this := MetricValue{}
	return &this
}

// NewMetricValueWithDefaults instantiates a new MetricValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricValueWithDefaults() *MetricValue {
	this := MetricValue{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *MetricValue) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricValue) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *MetricValue) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *MetricValue) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MetricValue) GetValue() int32 {
	if o == nil || IsNil(o.Value) {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricValue) GetValueOk() (*int32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MetricValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *MetricValue) SetValue(v int32) {
	o.Value = &v
}

func (o MetricValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetricValue) UnmarshalJSON(data []byte) (err error) {
	varMetricValue := _MetricValue{}

	err = json.Unmarshal(data, &varMetricValue)

	if err != nil {
		return err
	}

	*o = MetricValue(varMetricValue)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetricValue struct {
	value *MetricValue
	isSet bool
}

func (v NullableMetricValue) Get() *MetricValue {
	return v.value
}

func (v *NullableMetricValue) Set(val *MetricValue) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricValue) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricValue(val *MetricValue) *NullableMetricValue {
	return &NullableMetricValue{value: val, isSet: true}
}

func (v NullableMetricValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


