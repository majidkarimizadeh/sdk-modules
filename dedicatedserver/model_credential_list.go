/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the CredentialList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CredentialList{}

// CredentialList struct for CredentialList
type CredentialList struct {
	Metadata *Metadata `json:"_metadata,omitempty"`
	// An array of credentials
	Credentials []CredentialWithoutPassword `json:"credentials,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CredentialList CredentialList

// NewCredentialList instantiates a new CredentialList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentialList() *CredentialList {
	this := CredentialList{}
	return &this
}

// NewCredentialListWithDefaults instantiates a new CredentialList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentialListWithDefaults() *CredentialList {
	this := CredentialList{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CredentialList) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialList) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CredentialList) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *CredentialList) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *CredentialList) GetCredentials() []CredentialWithoutPassword {
	if o == nil || IsNil(o.Credentials) {
		var ret []CredentialWithoutPassword
		return ret
	}
	return o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialList) GetCredentialsOk() ([]CredentialWithoutPassword, bool) {
	if o == nil || IsNil(o.Credentials) {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *CredentialList) HasCredentials() bool {
	if o != nil && !IsNil(o.Credentials) {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given []CredentialWithoutPassword and assigns it to the Credentials field.
func (o *CredentialList) SetCredentials(v []CredentialWithoutPassword) {
	o.Credentials = v
}

func (o CredentialList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CredentialList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}
	if !IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CredentialList) UnmarshalJSON(data []byte) (err error) {
	varCredentialList := _CredentialList{}

	err = json.Unmarshal(data, &varCredentialList)

	if err != nil {
		return err
	}

	*o = CredentialList(varCredentialList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_metadata")
		delete(additionalProperties, "credentials")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCredentialList struct {
	value *CredentialList
	isSet bool
}

func (v NullableCredentialList) Get() *CredentialList {
	return v.value
}

func (v *NullableCredentialList) Set(val *CredentialList) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialList) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialList(val *CredentialList) *NullableCredentialList {
	return &NullableCredentialList{value: val, isSet: true}
}

func (v NullableCredentialList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


