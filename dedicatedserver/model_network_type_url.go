/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"fmt"
)

// NetworkTypeURL Type of network
type NetworkTypeURL string

// List of networkTypeURL
const (
	NETWORKTYPEURL_INTERNAL NetworkTypeURL = "internal"
	NETWORKTYPEURL_PUBLIC NetworkTypeURL = "public"
	NETWORKTYPEURL_REMOTE_MANAGEMENT NetworkTypeURL = "remoteManagement"
)

// All allowed values of NetworkTypeURL enum
var AllowedNetworkTypeURLEnumValues = []NetworkTypeURL{
	"internal",
	"public",
	"remoteManagement",
}

func (v *NetworkTypeURL) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkTypeURL(value)
	for _, existing := range AllowedNetworkTypeURLEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkTypeURL", value)
}

// NewNetworkTypeURLFromValue returns a pointer to a valid NetworkTypeURL
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkTypeURLFromValue(v string) (*NetworkTypeURL, error) {
	ev := NetworkTypeURL(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkTypeURL: valid values are %v", v, AllowedNetworkTypeURLEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkTypeURL) IsValid() bool {
	for _, existing := range AllowedNetworkTypeURLEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to networkTypeURL value
func (v NetworkTypeURL) Ptr() *NetworkTypeURL {
	return &v
}

type NullableNetworkTypeURL struct {
	value *NetworkTypeURL
	isSet bool
}

func (v NullableNetworkTypeURL) Get() *NetworkTypeURL {
	return v.value
}

func (v *NullableNetworkTypeURL) Set(val *NetworkTypeURL) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkTypeURL) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkTypeURL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkTypeURL(val *NetworkTypeURL) *NullableNetworkTypeURL {
	return &NullableNetworkTypeURL{value: val, isSet: true}
}

func (v NullableNetworkTypeURL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkTypeURL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

