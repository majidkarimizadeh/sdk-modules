/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the Rack type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rack{}

// Rack Rack details where this network equipment is located at
type Rack struct {
	// Rack id
	Id *string `json:"id,omitempty"`
	// Rack capacity
	Capacity *string `json:"capacity,omitempty"`
	Type *RackType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Rack Rack

// NewRack instantiates a new Rack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRack() *Rack {
	this := Rack{}
	return &this
}

// NewRackWithDefaults instantiates a new Rack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRackWithDefaults() *Rack {
	this := Rack{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Rack) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rack) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Rack) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Rack) SetId(v string) {
	o.Id = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *Rack) GetCapacity() string {
	if o == nil || IsNil(o.Capacity) {
		var ret string
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rack) GetCapacityOk() (*string, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *Rack) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given string and assigns it to the Capacity field.
func (o *Rack) SetCapacity(v string) {
	o.Capacity = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Rack) GetType() RackType {
	if o == nil || IsNil(o.Type) {
		var ret RackType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rack) GetTypeOk() (*RackType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Rack) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RackType and assigns it to the Type field.
func (o *Rack) SetType(v RackType) {
	o.Type = &v
}

func (o Rack) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rack) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Rack) UnmarshalJSON(data []byte) (err error) {
	varRack := _Rack{}

	err = json.Unmarshal(data, &varRack)

	if err != nil {
		return err
	}

	*o = Rack(varRack)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "capacity")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRack struct {
	value *Rack
	isSet bool
}

func (v NullableRack) Get() *Rack {
	return v.value
}

func (v *NullableRack) Set(val *Rack) {
	v.value = val
	v.isSet = true
}

func (v NullableRack) IsSet() bool {
	return v.isSet
}

func (v *NullableRack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRack(val *Rack) *NullableRack {
	return &NullableRack{value: val, isSet: true}
}

func (v NullableRack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


