/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"time"
)

// checks if the GetServerHardwareResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetServerHardwareResult{}

// GetServerHardwareResult struct for GetServerHardwareResult
type GetServerHardwareResult struct {
	// Id of this hardware scan result
	Id *string `json:"id,omitempty"`
	// Version of the parser used for this hardware info
	ParserVersion *string `json:"parserVersion,omitempty"`
	Result *Result `json:"result,omitempty"`
	// Timestamp of hardware scan, the ISO-8601 format
	ScannedAt *time.Time `json:"scannedAt,omitempty"`
	ServerId *string `json:"serverId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetServerHardwareResult GetServerHardwareResult

// NewGetServerHardwareResult instantiates a new GetServerHardwareResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetServerHardwareResult() *GetServerHardwareResult {
	this := GetServerHardwareResult{}
	return &this
}

// NewGetServerHardwareResultWithDefaults instantiates a new GetServerHardwareResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetServerHardwareResultWithDefaults() *GetServerHardwareResult {
	this := GetServerHardwareResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetServerHardwareResult) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerHardwareResult) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetServerHardwareResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GetServerHardwareResult) SetId(v string) {
	o.Id = &v
}

// GetParserVersion returns the ParserVersion field value if set, zero value otherwise.
func (o *GetServerHardwareResult) GetParserVersion() string {
	if o == nil || IsNil(o.ParserVersion) {
		var ret string
		return ret
	}
	return *o.ParserVersion
}

// GetParserVersionOk returns a tuple with the ParserVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerHardwareResult) GetParserVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ParserVersion) {
		return nil, false
	}
	return o.ParserVersion, true
}

// HasParserVersion returns a boolean if a field has been set.
func (o *GetServerHardwareResult) HasParserVersion() bool {
	if o != nil && !IsNil(o.ParserVersion) {
		return true
	}

	return false
}

// SetParserVersion gets a reference to the given string and assigns it to the ParserVersion field.
func (o *GetServerHardwareResult) SetParserVersion(v string) {
	o.ParserVersion = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *GetServerHardwareResult) GetResult() Result {
	if o == nil || IsNil(o.Result) {
		var ret Result
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerHardwareResult) GetResultOk() (*Result, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *GetServerHardwareResult) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given Result and assigns it to the Result field.
func (o *GetServerHardwareResult) SetResult(v Result) {
	o.Result = &v
}

// GetScannedAt returns the ScannedAt field value if set, zero value otherwise.
func (o *GetServerHardwareResult) GetScannedAt() time.Time {
	if o == nil || IsNil(o.ScannedAt) {
		var ret time.Time
		return ret
	}
	return *o.ScannedAt
}

// GetScannedAtOk returns a tuple with the ScannedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerHardwareResult) GetScannedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ScannedAt) {
		return nil, false
	}
	return o.ScannedAt, true
}

// HasScannedAt returns a boolean if a field has been set.
func (o *GetServerHardwareResult) HasScannedAt() bool {
	if o != nil && !IsNil(o.ScannedAt) {
		return true
	}

	return false
}

// SetScannedAt gets a reference to the given time.Time and assigns it to the ScannedAt field.
func (o *GetServerHardwareResult) SetScannedAt(v time.Time) {
	o.ScannedAt = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *GetServerHardwareResult) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerHardwareResult) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *GetServerHardwareResult) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *GetServerHardwareResult) SetServerId(v string) {
	o.ServerId = &v
}

func (o GetServerHardwareResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetServerHardwareResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ParserVersion) {
		toSerialize["parserVersion"] = o.ParserVersion
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.ScannedAt) {
		toSerialize["scannedAt"] = o.ScannedAt
	}
	if !IsNil(o.ServerId) {
		toSerialize["serverId"] = o.ServerId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetServerHardwareResult) UnmarshalJSON(data []byte) (err error) {
	varGetServerHardwareResult := _GetServerHardwareResult{}

	err = json.Unmarshal(data, &varGetServerHardwareResult)

	if err != nil {
		return err
	}

	*o = GetServerHardwareResult(varGetServerHardwareResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "parserVersion")
		delete(additionalProperties, "result")
		delete(additionalProperties, "scannedAt")
		delete(additionalProperties, "serverId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetServerHardwareResult struct {
	value *GetServerHardwareResult
	isSet bool
}

func (v NullableGetServerHardwareResult) Get() *GetServerHardwareResult {
	return v.value
}

func (v *NullableGetServerHardwareResult) Set(val *GetServerHardwareResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetServerHardwareResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetServerHardwareResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetServerHardwareResult(val *GetServerHardwareResult) *NullableGetServerHardwareResult {
	return &NullableGetServerHardwareResult{value: val, isSet: true}
}

func (v NullableGetServerHardwareResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetServerHardwareResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


