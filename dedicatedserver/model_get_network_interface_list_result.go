/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the GetNetworkInterfaceListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetNetworkInterfaceListResult{}

// GetNetworkInterfaceListResult struct for GetNetworkInterfaceListResult
type GetNetworkInterfaceListResult struct {
	Metadata *Metadata `json:"_metadata,omitempty"`
	// An array of network interfaces
	NetworkInterfaces []OperationNetworkInterface `json:"networkInterfaces,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetNetworkInterfaceListResult GetNetworkInterfaceListResult

// NewGetNetworkInterfaceListResult instantiates a new GetNetworkInterfaceListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetNetworkInterfaceListResult() *GetNetworkInterfaceListResult {
	this := GetNetworkInterfaceListResult{}
	return &this
}

// NewGetNetworkInterfaceListResultWithDefaults instantiates a new GetNetworkInterfaceListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetNetworkInterfaceListResultWithDefaults() *GetNetworkInterfaceListResult {
	this := GetNetworkInterfaceListResult{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *GetNetworkInterfaceListResult) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNetworkInterfaceListResult) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *GetNetworkInterfaceListResult) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *GetNetworkInterfaceListResult) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetNetworkInterfaces returns the NetworkInterfaces field value if set, zero value otherwise.
func (o *GetNetworkInterfaceListResult) GetNetworkInterfaces() []OperationNetworkInterface {
	if o == nil || IsNil(o.NetworkInterfaces) {
		var ret []OperationNetworkInterface
		return ret
	}
	return o.NetworkInterfaces
}

// GetNetworkInterfacesOk returns a tuple with the NetworkInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNetworkInterfaceListResult) GetNetworkInterfacesOk() ([]OperationNetworkInterface, bool) {
	if o == nil || IsNil(o.NetworkInterfaces) {
		return nil, false
	}
	return o.NetworkInterfaces, true
}

// HasNetworkInterfaces returns a boolean if a field has been set.
func (o *GetNetworkInterfaceListResult) HasNetworkInterfaces() bool {
	if o != nil && !IsNil(o.NetworkInterfaces) {
		return true
	}

	return false
}

// SetNetworkInterfaces gets a reference to the given []OperationNetworkInterface and assigns it to the NetworkInterfaces field.
func (o *GetNetworkInterfaceListResult) SetNetworkInterfaces(v []OperationNetworkInterface) {
	o.NetworkInterfaces = v
}

func (o GetNetworkInterfaceListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetNetworkInterfaceListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}
	if !IsNil(o.NetworkInterfaces) {
		toSerialize["networkInterfaces"] = o.NetworkInterfaces
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetNetworkInterfaceListResult) UnmarshalJSON(data []byte) (err error) {
	varGetNetworkInterfaceListResult := _GetNetworkInterfaceListResult{}

	err = json.Unmarshal(data, &varGetNetworkInterfaceListResult)

	if err != nil {
		return err
	}

	*o = GetNetworkInterfaceListResult(varGetNetworkInterfaceListResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_metadata")
		delete(additionalProperties, "networkInterfaces")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetNetworkInterfaceListResult struct {
	value *GetNetworkInterfaceListResult
	isSet bool
}

func (v NullableGetNetworkInterfaceListResult) Get() *GetNetworkInterfaceListResult {
	return v.value
}

func (v *NullableGetNetworkInterfaceListResult) Set(val *GetNetworkInterfaceListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNetworkInterfaceListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNetworkInterfaceListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNetworkInterfaceListResult(val *GetNetworkInterfaceListResult) *NullableGetNetworkInterfaceListResult {
	return &NullableGetNetworkInterfaceListResult{value: val, isSet: true}
}

func (v NullableGetNetworkInterfaceListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNetworkInterfaceListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


