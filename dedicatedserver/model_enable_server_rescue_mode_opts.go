/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"fmt"
)

// checks if the EnableServerRescueModeOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnableServerRescueModeOpts{}

// EnableServerRescueModeOpts struct for EnableServerRescueModeOpts
type EnableServerRescueModeOpts struct {
	// Url which will receive callbacks
	CallbackUrl *string `json:"callbackUrl,omitempty"`
	// Rescue mode password. If not provided, it would be automatically generated
	Password *string `json:"password,omitempty"`
	// Base64 Encoded string containing a valid bash script to be run right after rescue mode is launched
	PostInstallScript *string `json:"postInstallScript,omitempty"`
	// If set to `true`, server will be power cycled in order to complete the operation
	PowerCycle *bool `json:"powerCycle,omitempty"`
	// Rescue image identifier
	RescueImageId string `json:"rescueImageId"`
	// User ssh keys
	SshKeys *string `json:"sshKeys,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnableServerRescueModeOpts EnableServerRescueModeOpts

// NewEnableServerRescueModeOpts instantiates a new EnableServerRescueModeOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnableServerRescueModeOpts(rescueImageId string) *EnableServerRescueModeOpts {
	this := EnableServerRescueModeOpts{}
	var powerCycle bool = true
	this.PowerCycle = &powerCycle
	this.RescueImageId = rescueImageId
	return &this
}

// NewEnableServerRescueModeOptsWithDefaults instantiates a new EnableServerRescueModeOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnableServerRescueModeOptsWithDefaults() *EnableServerRescueModeOpts {
	this := EnableServerRescueModeOpts{}
	var powerCycle bool = true
	this.PowerCycle = &powerCycle
	var rescueImageId string = "GRML"
	this.RescueImageId = rescueImageId
	return &this
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *EnableServerRescueModeOpts) GetCallbackUrl() string {
	if o == nil || IsNil(o.CallbackUrl) {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnableServerRescueModeOpts) GetCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackUrl) {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *EnableServerRescueModeOpts) HasCallbackUrl() bool {
	if o != nil && !IsNil(o.CallbackUrl) {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *EnableServerRescueModeOpts) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *EnableServerRescueModeOpts) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnableServerRescueModeOpts) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *EnableServerRescueModeOpts) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *EnableServerRescueModeOpts) SetPassword(v string) {
	o.Password = &v
}

// GetPostInstallScript returns the PostInstallScript field value if set, zero value otherwise.
func (o *EnableServerRescueModeOpts) GetPostInstallScript() string {
	if o == nil || IsNil(o.PostInstallScript) {
		var ret string
		return ret
	}
	return *o.PostInstallScript
}

// GetPostInstallScriptOk returns a tuple with the PostInstallScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnableServerRescueModeOpts) GetPostInstallScriptOk() (*string, bool) {
	if o == nil || IsNil(o.PostInstallScript) {
		return nil, false
	}
	return o.PostInstallScript, true
}

// HasPostInstallScript returns a boolean if a field has been set.
func (o *EnableServerRescueModeOpts) HasPostInstallScript() bool {
	if o != nil && !IsNil(o.PostInstallScript) {
		return true
	}

	return false
}

// SetPostInstallScript gets a reference to the given string and assigns it to the PostInstallScript field.
func (o *EnableServerRescueModeOpts) SetPostInstallScript(v string) {
	o.PostInstallScript = &v
}

// GetPowerCycle returns the PowerCycle field value if set, zero value otherwise.
func (o *EnableServerRescueModeOpts) GetPowerCycle() bool {
	if o == nil || IsNil(o.PowerCycle) {
		var ret bool
		return ret
	}
	return *o.PowerCycle
}

// GetPowerCycleOk returns a tuple with the PowerCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnableServerRescueModeOpts) GetPowerCycleOk() (*bool, bool) {
	if o == nil || IsNil(o.PowerCycle) {
		return nil, false
	}
	return o.PowerCycle, true
}

// HasPowerCycle returns a boolean if a field has been set.
func (o *EnableServerRescueModeOpts) HasPowerCycle() bool {
	if o != nil && !IsNil(o.PowerCycle) {
		return true
	}

	return false
}

// SetPowerCycle gets a reference to the given bool and assigns it to the PowerCycle field.
func (o *EnableServerRescueModeOpts) SetPowerCycle(v bool) {
	o.PowerCycle = &v
}

// GetRescueImageId returns the RescueImageId field value
func (o *EnableServerRescueModeOpts) GetRescueImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RescueImageId
}

// GetRescueImageIdOk returns a tuple with the RescueImageId field value
// and a boolean to check if the value has been set.
func (o *EnableServerRescueModeOpts) GetRescueImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RescueImageId, true
}

// SetRescueImageId sets field value
func (o *EnableServerRescueModeOpts) SetRescueImageId(v string) {
	o.RescueImageId = v
}

// GetSshKeys returns the SshKeys field value if set, zero value otherwise.
func (o *EnableServerRescueModeOpts) GetSshKeys() string {
	if o == nil || IsNil(o.SshKeys) {
		var ret string
		return ret
	}
	return *o.SshKeys
}

// GetSshKeysOk returns a tuple with the SshKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnableServerRescueModeOpts) GetSshKeysOk() (*string, bool) {
	if o == nil || IsNil(o.SshKeys) {
		return nil, false
	}
	return o.SshKeys, true
}

// HasSshKeys returns a boolean if a field has been set.
func (o *EnableServerRescueModeOpts) HasSshKeys() bool {
	if o != nil && !IsNil(o.SshKeys) {
		return true
	}

	return false
}

// SetSshKeys gets a reference to the given string and assigns it to the SshKeys field.
func (o *EnableServerRescueModeOpts) SetSshKeys(v string) {
	o.SshKeys = &v
}

func (o EnableServerRescueModeOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnableServerRescueModeOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallbackUrl) {
		toSerialize["callbackUrl"] = o.CallbackUrl
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.PostInstallScript) {
		toSerialize["postInstallScript"] = o.PostInstallScript
	}
	if !IsNil(o.PowerCycle) {
		toSerialize["powerCycle"] = o.PowerCycle
	}
	toSerialize["rescueImageId"] = o.RescueImageId
	if !IsNil(o.SshKeys) {
		toSerialize["sshKeys"] = o.SshKeys
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnableServerRescueModeOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rescueImageId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnableServerRescueModeOpts := _EnableServerRescueModeOpts{}

	err = json.Unmarshal(data, &varEnableServerRescueModeOpts)

	if err != nil {
		return err
	}

	*o = EnableServerRescueModeOpts(varEnableServerRescueModeOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "callbackUrl")
		delete(additionalProperties, "password")
		delete(additionalProperties, "postInstallScript")
		delete(additionalProperties, "powerCycle")
		delete(additionalProperties, "rescueImageId")
		delete(additionalProperties, "sshKeys")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnableServerRescueModeOpts struct {
	value *EnableServerRescueModeOpts
	isSet bool
}

func (v NullableEnableServerRescueModeOpts) Get() *EnableServerRescueModeOpts {
	return v.value
}

func (v *NullableEnableServerRescueModeOpts) Set(val *EnableServerRescueModeOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableEnableServerRescueModeOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableEnableServerRescueModeOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnableServerRescueModeOpts(val *EnableServerRescueModeOpts) *NullableEnableServerRescueModeOpts {
	return &NullableEnableServerRescueModeOpts{value: val, isSet: true}
}

func (v NullableEnableServerRescueModeOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnableServerRescueModeOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


