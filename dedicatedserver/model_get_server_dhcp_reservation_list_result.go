/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the GetServerDhcpReservationListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetServerDhcpReservationListResult{}

// GetServerDhcpReservationListResult struct for GetServerDhcpReservationListResult
type GetServerDhcpReservationListResult struct {
	Metadata *Metadata `json:"_metadata,omitempty"`
	// An array of active DHCP reservations
	Leases []Lease `json:"leases,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetServerDhcpReservationListResult GetServerDhcpReservationListResult

// NewGetServerDhcpReservationListResult instantiates a new GetServerDhcpReservationListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetServerDhcpReservationListResult() *GetServerDhcpReservationListResult {
	this := GetServerDhcpReservationListResult{}
	return &this
}

// NewGetServerDhcpReservationListResultWithDefaults instantiates a new GetServerDhcpReservationListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetServerDhcpReservationListResultWithDefaults() *GetServerDhcpReservationListResult {
	this := GetServerDhcpReservationListResult{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *GetServerDhcpReservationListResult) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerDhcpReservationListResult) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *GetServerDhcpReservationListResult) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *GetServerDhcpReservationListResult) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetLeases returns the Leases field value if set, zero value otherwise.
func (o *GetServerDhcpReservationListResult) GetLeases() []Lease {
	if o == nil || IsNil(o.Leases) {
		var ret []Lease
		return ret
	}
	return o.Leases
}

// GetLeasesOk returns a tuple with the Leases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServerDhcpReservationListResult) GetLeasesOk() ([]Lease, bool) {
	if o == nil || IsNil(o.Leases) {
		return nil, false
	}
	return o.Leases, true
}

// HasLeases returns a boolean if a field has been set.
func (o *GetServerDhcpReservationListResult) HasLeases() bool {
	if o != nil && !IsNil(o.Leases) {
		return true
	}

	return false
}

// SetLeases gets a reference to the given []Lease and assigns it to the Leases field.
func (o *GetServerDhcpReservationListResult) SetLeases(v []Lease) {
	o.Leases = v
}

func (o GetServerDhcpReservationListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetServerDhcpReservationListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}
	if !IsNil(o.Leases) {
		toSerialize["leases"] = o.Leases
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetServerDhcpReservationListResult) UnmarshalJSON(data []byte) (err error) {
	varGetServerDhcpReservationListResult := _GetServerDhcpReservationListResult{}

	err = json.Unmarshal(data, &varGetServerDhcpReservationListResult)

	if err != nil {
		return err
	}

	*o = GetServerDhcpReservationListResult(varGetServerDhcpReservationListResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_metadata")
		delete(additionalProperties, "leases")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetServerDhcpReservationListResult struct {
	value *GetServerDhcpReservationListResult
	isSet bool
}

func (v NullableGetServerDhcpReservationListResult) Get() *GetServerDhcpReservationListResult {
	return v.value
}

func (v *NullableGetServerDhcpReservationListResult) Set(val *GetServerDhcpReservationListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetServerDhcpReservationListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetServerDhcpReservationListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetServerDhcpReservationListResult(val *GetServerDhcpReservationListResult) *NullableGetServerDhcpReservationListResult {
	return &NullableGetServerDhcpReservationListResult{value: val, isSet: true}
}

func (v NullableGetServerDhcpReservationListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetServerDhcpReservationListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


