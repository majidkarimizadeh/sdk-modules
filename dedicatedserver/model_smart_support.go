/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the SmartSupport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartSupport{}

// SmartSupport struct for SmartSupport
type SmartSupport struct {
	Available *bool `json:"available,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SmartSupport SmartSupport

// NewSmartSupport instantiates a new SmartSupport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartSupport() *SmartSupport {
	this := SmartSupport{}
	return &this
}

// NewSmartSupportWithDefaults instantiates a new SmartSupport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartSupportWithDefaults() *SmartSupport {
	this := SmartSupport{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *SmartSupport) GetAvailable() bool {
	if o == nil || IsNil(o.Available) {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSupport) GetAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *SmartSupport) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *SmartSupport) SetAvailable(v bool) {
	o.Available = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SmartSupport) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSupport) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SmartSupport) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SmartSupport) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o SmartSupport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartSupport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SmartSupport) UnmarshalJSON(data []byte) (err error) {
	varSmartSupport := _SmartSupport{}

	err = json.Unmarshal(data, &varSmartSupport)

	if err != nil {
		return err
	}

	*o = SmartSupport(varSmartSupport)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "available")
		delete(additionalProperties, "enabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSmartSupport struct {
	value *SmartSupport
	isSet bool
}

func (v NullableSmartSupport) Get() *SmartSupport {
	return v.value
}

func (v *NullableSmartSupport) Set(val *SmartSupport) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartSupport) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartSupport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartSupport(val *SmartSupport) *NullableSmartSupport {
	return &NullableSmartSupport{value: val, isSet: true}
}

func (v NullableSmartSupport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartSupport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


