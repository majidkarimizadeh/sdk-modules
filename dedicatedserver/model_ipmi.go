/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the Ipmi type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipmi{}

// Ipmi Object describing the IPMI power information
type Ipmi struct {
	// The current power status of the server.
	Status *string `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Ipmi Ipmi

// NewIpmi instantiates a new Ipmi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpmi() *Ipmi {
	this := Ipmi{}
	return &this
}

// NewIpmiWithDefaults instantiates a new Ipmi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpmiWithDefaults() *Ipmi {
	this := Ipmi{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Ipmi) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipmi) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Ipmi) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Ipmi) SetStatus(v string) {
	o.Status = &v
}

func (o Ipmi) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipmi) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Ipmi) UnmarshalJSON(data []byte) (err error) {
	varIpmi := _Ipmi{}

	err = json.Unmarshal(data, &varIpmi)

	if err != nil {
		return err
	}

	*o = Ipmi(varIpmi)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpmi struct {
	value *Ipmi
	isSet bool
}

func (v NullableIpmi) Get() *Ipmi {
	return v.value
}

func (v *NullableIpmi) Set(val *Ipmi) {
	v.value = val
	v.isSet = true
}

func (v NullableIpmi) IsSet() bool {
	return v.isSet
}

func (v *NullableIpmi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpmi(val *Ipmi) *NullableIpmi {
	return &NullableIpmi{value: val, isSet: true}
}

func (v NullableIpmi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpmi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


