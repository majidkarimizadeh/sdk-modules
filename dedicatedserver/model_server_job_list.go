/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the ServerJobList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerJobList{}

// ServerJobList struct for ServerJobList
type ServerJobList struct {
	Metadata *Metadata `json:"_metadata,omitempty"`
	// An array of jobs
	Jobs []ServerJob `json:"jobs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerJobList ServerJobList

// NewServerJobList instantiates a new ServerJobList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerJobList() *ServerJobList {
	this := ServerJobList{}
	return &this
}

// NewServerJobListWithDefaults instantiates a new ServerJobList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerJobListWithDefaults() *ServerJobList {
	this := ServerJobList{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ServerJobList) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerJobList) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ServerJobList) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *ServerJobList) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetJobs returns the Jobs field value if set, zero value otherwise.
func (o *ServerJobList) GetJobs() []ServerJob {
	if o == nil || IsNil(o.Jobs) {
		var ret []ServerJob
		return ret
	}
	return o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerJobList) GetJobsOk() ([]ServerJob, bool) {
	if o == nil || IsNil(o.Jobs) {
		return nil, false
	}
	return o.Jobs, true
}

// HasJobs returns a boolean if a field has been set.
func (o *ServerJobList) HasJobs() bool {
	if o != nil && !IsNil(o.Jobs) {
		return true
	}

	return false
}

// SetJobs gets a reference to the given []ServerJob and assigns it to the Jobs field.
func (o *ServerJobList) SetJobs(v []ServerJob) {
	o.Jobs = v
}

func (o ServerJobList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerJobList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["_metadata"] = o.Metadata
	}
	if !IsNil(o.Jobs) {
		toSerialize["jobs"] = o.Jobs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerJobList) UnmarshalJSON(data []byte) (err error) {
	varServerJobList := _ServerJobList{}

	err = json.Unmarshal(data, &varServerJobList)

	if err != nil {
		return err
	}

	*o = ServerJobList(varServerJobList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_metadata")
		delete(additionalProperties, "jobs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerJobList struct {
	value *ServerJobList
	isSet bool
}

func (v NullableServerJobList) Get() *ServerJobList {
	return v.value
}

func (v *NullableServerJobList) Set(val *ServerJobList) {
	v.value = val
	v.isSet = true
}

func (v NullableServerJobList) IsSet() bool {
	return v.isSet
}

func (v *NullableServerJobList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerJobList(val *ServerJobList) *NullableServerJobList {
	return &NullableServerJobList{value: val, isSet: true}
}

func (v NullableServerJobList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerJobList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


