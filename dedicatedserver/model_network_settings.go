/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the NetworkSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkSettings{}

// NetworkSettings struct for NetworkSettings
type NetworkSettings struct {
	Autonegotiation *string `json:"autonegotiation,omitempty"`
	Broadcast *string `json:"broadcast,omitempty"`
	Driver *string `json:"driver,omitempty"`
	Driverversion *string `json:"driverversion,omitempty"`
	Duplex *string `json:"duplex,omitempty"`
	Firmware *string `json:"firmware,omitempty"`
	Ip *string `json:"ip,omitempty"`
	Latency *string `json:"latency,omitempty"`
	Link *string `json:"link,omitempty"`
	Multicast *string `json:"multicast,omitempty"`
	Port *string `json:"port,omitempty"`
	Speed *string `json:"speed,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkSettings NetworkSettings

// NewNetworkSettings instantiates a new NetworkSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkSettings() *NetworkSettings {
	this := NetworkSettings{}
	return &this
}

// NewNetworkSettingsWithDefaults instantiates a new NetworkSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkSettingsWithDefaults() *NetworkSettings {
	this := NetworkSettings{}
	return &this
}

// GetAutonegotiation returns the Autonegotiation field value if set, zero value otherwise.
func (o *NetworkSettings) GetAutonegotiation() string {
	if o == nil || IsNil(o.Autonegotiation) {
		var ret string
		return ret
	}
	return *o.Autonegotiation
}

// GetAutonegotiationOk returns a tuple with the Autonegotiation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSettings) GetAutonegotiationOk() (*string, bool) {
	if o == nil || IsNil(o.Autonegotiation) {
		return nil, false
	}
	return o.Autonegotiation, true
}

// HasAutonegotiation returns a boolean if a field has been set.
func (o *NetworkSettings) HasAutonegotiation() bool {
	if o != nil && !IsNil(o.Autonegotiation) {
		return true
	}

	return false
}

// SetAutonegotiation gets a reference to the given string and assigns it to the Autonegotiation field.
func (o *NetworkSettings) SetAutonegotiation(v string) {
	o.Autonegotiation = &v
}

// GetBroadcast returns the Broadcast field value if set, zero value otherwise.
func (o *NetworkSettings) GetBroadcast() string {
	if o == nil || IsNil(o.Broadcast) {
		var ret string
		return ret
	}
	return *o.Broadcast
}

// GetBroadcastOk returns a tuple with the Broadcast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSettings) GetBroadcastOk() (*string, bool) {
	if o == nil || IsNil(o.Broadcast) {
		return nil, false
	}
	return o.Broadcast, true
}

// HasBroadcast returns a boolean if a field has been set.
func (o *NetworkSettings) HasBroadcast() bool {
	if o != nil && !IsNil(o.Broadcast) {
		return true
	}

	return false
}

// SetBroadcast gets a reference to the given string and assigns it to the Broadcast field.
func (o *NetworkSettings) SetBroadcast(v string) {
	o.Broadcast = &v
}

// GetDriver returns the Driver field value if set, zero value otherwise.
func (o *NetworkSettings) GetDriver() string {
	if o == nil || IsNil(o.Driver) {
		var ret string
		return ret
	}
	return *o.Driver
}

// GetDriverOk returns a tuple with the Driver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSettings) GetDriverOk() (*string, bool) {
	if o == nil || IsNil(o.Driver) {
		return nil, false
	}
	return o.Driver, true
}

// HasDriver returns a boolean if a field has been set.
func (o *NetworkSettings) HasDriver() bool {
	if o != nil && !IsNil(o.Driver) {
		return true
	}

	return false
}

// SetDriver gets a reference to the given string and assigns it to the Driver field.
func (o *NetworkSettings) SetDriver(v string) {
	o.Driver = &v
}

// GetDriverversion returns the Driverversion field value if set, zero value otherwise.
func (o *NetworkSettings) GetDriverversion() string {
	if o == nil || IsNil(o.Driverversion) {
		var ret string
		return ret
	}
	return *o.Driverversion
}

// GetDriverversionOk returns a tuple with the Driverversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSettings) GetDriverversionOk() (*string, bool) {
	if o == nil || IsNil(o.Driverversion) {
		return nil, false
	}
	return o.Driverversion, true
}

// HasDriverversion returns a boolean if a field has been set.
func (o *NetworkSettings) HasDriverversion() bool {
	if o != nil && !IsNil(o.Driverversion) {
		return true
	}

	return false
}

// SetDriverversion gets a reference to the given string and assigns it to the Driverversion field.
func (o *NetworkSettings) SetDriverversion(v string) {
	o.Driverversion = &v
}

// GetDuplex returns the Duplex field value if set, zero value otherwise.
func (o *NetworkSettings) GetDuplex() string {
	if o == nil || IsNil(o.Duplex) {
		var ret string
		return ret
	}
	return *o.Duplex
}

// GetDuplexOk returns a tuple with the Duplex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSettings) GetDuplexOk() (*string, bool) {
	if o == nil || IsNil(o.Duplex) {
		return nil, false
	}
	return o.Duplex, true
}

// HasDuplex returns a boolean if a field has been set.
func (o *NetworkSettings) HasDuplex() bool {
	if o != nil && !IsNil(o.Duplex) {
		return true
	}

	return false
}

// SetDuplex gets a reference to the given string and assigns it to the Duplex field.
func (o *NetworkSettings) SetDuplex(v string) {
	o.Duplex = &v
}

// GetFirmware returns the Firmware field value if set, zero value otherwise.
func (o *NetworkSettings) GetFirmware() string {
	if o == nil || IsNil(o.Firmware) {
		var ret string
		return ret
	}
	return *o.Firmware
}

// GetFirmwareOk returns a tuple with the Firmware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSettings) GetFirmwareOk() (*string, bool) {
	if o == nil || IsNil(o.Firmware) {
		return nil, false
	}
	return o.Firmware, true
}

// HasFirmware returns a boolean if a field has been set.
func (o *NetworkSettings) HasFirmware() bool {
	if o != nil && !IsNil(o.Firmware) {
		return true
	}

	return false
}

// SetFirmware gets a reference to the given string and assigns it to the Firmware field.
func (o *NetworkSettings) SetFirmware(v string) {
	o.Firmware = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *NetworkSettings) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSettings) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *NetworkSettings) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *NetworkSettings) SetIp(v string) {
	o.Ip = &v
}

// GetLatency returns the Latency field value if set, zero value otherwise.
func (o *NetworkSettings) GetLatency() string {
	if o == nil || IsNil(o.Latency) {
		var ret string
		return ret
	}
	return *o.Latency
}

// GetLatencyOk returns a tuple with the Latency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSettings) GetLatencyOk() (*string, bool) {
	if o == nil || IsNil(o.Latency) {
		return nil, false
	}
	return o.Latency, true
}

// HasLatency returns a boolean if a field has been set.
func (o *NetworkSettings) HasLatency() bool {
	if o != nil && !IsNil(o.Latency) {
		return true
	}

	return false
}

// SetLatency gets a reference to the given string and assigns it to the Latency field.
func (o *NetworkSettings) SetLatency(v string) {
	o.Latency = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *NetworkSettings) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSettings) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *NetworkSettings) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *NetworkSettings) SetLink(v string) {
	o.Link = &v
}

// GetMulticast returns the Multicast field value if set, zero value otherwise.
func (o *NetworkSettings) GetMulticast() string {
	if o == nil || IsNil(o.Multicast) {
		var ret string
		return ret
	}
	return *o.Multicast
}

// GetMulticastOk returns a tuple with the Multicast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSettings) GetMulticastOk() (*string, bool) {
	if o == nil || IsNil(o.Multicast) {
		return nil, false
	}
	return o.Multicast, true
}

// HasMulticast returns a boolean if a field has been set.
func (o *NetworkSettings) HasMulticast() bool {
	if o != nil && !IsNil(o.Multicast) {
		return true
	}

	return false
}

// SetMulticast gets a reference to the given string and assigns it to the Multicast field.
func (o *NetworkSettings) SetMulticast(v string) {
	o.Multicast = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *NetworkSettings) GetPort() string {
	if o == nil || IsNil(o.Port) {
		var ret string
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSettings) GetPortOk() (*string, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *NetworkSettings) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given string and assigns it to the Port field.
func (o *NetworkSettings) SetPort(v string) {
	o.Port = &v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *NetworkSettings) GetSpeed() string {
	if o == nil || IsNil(o.Speed) {
		var ret string
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSettings) GetSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *NetworkSettings) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given string and assigns it to the Speed field.
func (o *NetworkSettings) SetSpeed(v string) {
	o.Speed = &v
}

func (o NetworkSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Autonegotiation) {
		toSerialize["autonegotiation"] = o.Autonegotiation
	}
	if !IsNil(o.Broadcast) {
		toSerialize["broadcast"] = o.Broadcast
	}
	if !IsNil(o.Driver) {
		toSerialize["driver"] = o.Driver
	}
	if !IsNil(o.Driverversion) {
		toSerialize["driverversion"] = o.Driverversion
	}
	if !IsNil(o.Duplex) {
		toSerialize["duplex"] = o.Duplex
	}
	if !IsNil(o.Firmware) {
		toSerialize["firmware"] = o.Firmware
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Latency) {
		toSerialize["latency"] = o.Latency
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.Multicast) {
		toSerialize["multicast"] = o.Multicast
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkSettings) UnmarshalJSON(data []byte) (err error) {
	varNetworkSettings := _NetworkSettings{}

	err = json.Unmarshal(data, &varNetworkSettings)

	if err != nil {
		return err
	}

	*o = NetworkSettings(varNetworkSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "autonegotiation")
		delete(additionalProperties, "broadcast")
		delete(additionalProperties, "driver")
		delete(additionalProperties, "driverversion")
		delete(additionalProperties, "duplex")
		delete(additionalProperties, "firmware")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "latency")
		delete(additionalProperties, "link")
		delete(additionalProperties, "multicast")
		delete(additionalProperties, "port")
		delete(additionalProperties, "speed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkSettings struct {
	value *NetworkSettings
	isSet bool
}

func (v NullableNetworkSettings) Get() *NetworkSettings {
	return v.value
}

func (v *NullableNetworkSettings) Set(val *NetworkSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkSettings(val *NetworkSettings) *NullableNetworkSettings {
	return &NullableNetworkSettings{value: val, isSet: true}
}

func (v NullableNetworkSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


