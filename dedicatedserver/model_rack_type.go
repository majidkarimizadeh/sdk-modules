/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"fmt"
)

// RackType rack type
type RackType string

// List of rackType
const (
	RACKTYPE_SHARED RackType = "SHARED"
	RACKTYPE_DEDICATED RackType = "DEDICATED"
)

// All allowed values of RackType enum
var AllowedRackTypeEnumValues = []RackType{
	"SHARED",
	"DEDICATED",
}

func (v *RackType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RackType(value)
	for _, existing := range AllowedRackTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RackType", value)
}

// NewRackTypeFromValue returns a pointer to a valid RackType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRackTypeFromValue(v string) (*RackType, error) {
	ev := RackType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RackType: valid values are %v", v, AllowedRackTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RackType) IsValid() bool {
	for _, existing := range AllowedRackTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to rackType value
func (v RackType) Ptr() *RackType {
	return &v
}

type NullableRackType struct {
	value *RackType
	isSet bool
}

func (v NullableRackType) Get() *RackType {
	return v.value
}

func (v *NullableRackType) Set(val *RackType) {
	v.value = val
	v.isSet = true
}

func (v NullableRackType) IsSet() bool {
	return v.isSet
}

func (v *NullableRackType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRackType(val *RackType) *NullableRackType {
	return &NullableRackType{value: val, isSet: true}
}

func (v NullableRackType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRackType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

