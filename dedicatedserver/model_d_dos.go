/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the DDos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DDos{}

// DDos DDoS IP Protection Details
type DDos struct {
	// The applied detection profile
	DetectionProfile *string `json:"detectionProfile,omitempty"`
	// The type of DDoS protection
	ProtectionType *string `json:"protectionType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DDos DDos

// NewDDos instantiates a new DDos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDDos() *DDos {
	this := DDos{}
	return &this
}

// NewDDosWithDefaults instantiates a new DDos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDDosWithDefaults() *DDos {
	this := DDos{}
	return &this
}

// GetDetectionProfile returns the DetectionProfile field value if set, zero value otherwise.
func (o *DDos) GetDetectionProfile() string {
	if o == nil || IsNil(o.DetectionProfile) {
		var ret string
		return ret
	}
	return *o.DetectionProfile
}

// GetDetectionProfileOk returns a tuple with the DetectionProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDos) GetDetectionProfileOk() (*string, bool) {
	if o == nil || IsNil(o.DetectionProfile) {
		return nil, false
	}
	return o.DetectionProfile, true
}

// HasDetectionProfile returns a boolean if a field has been set.
func (o *DDos) HasDetectionProfile() bool {
	if o != nil && !IsNil(o.DetectionProfile) {
		return true
	}

	return false
}

// SetDetectionProfile gets a reference to the given string and assigns it to the DetectionProfile field.
func (o *DDos) SetDetectionProfile(v string) {
	o.DetectionProfile = &v
}

// GetProtectionType returns the ProtectionType field value if set, zero value otherwise.
func (o *DDos) GetProtectionType() string {
	if o == nil || IsNil(o.ProtectionType) {
		var ret string
		return ret
	}
	return *o.ProtectionType
}

// GetProtectionTypeOk returns a tuple with the ProtectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDos) GetProtectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProtectionType) {
		return nil, false
	}
	return o.ProtectionType, true
}

// HasProtectionType returns a boolean if a field has been set.
func (o *DDos) HasProtectionType() bool {
	if o != nil && !IsNil(o.ProtectionType) {
		return true
	}

	return false
}

// SetProtectionType gets a reference to the given string and assigns it to the ProtectionType field.
func (o *DDos) SetProtectionType(v string) {
	o.ProtectionType = &v
}

func (o DDos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DDos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DetectionProfile) {
		toSerialize["detectionProfile"] = o.DetectionProfile
	}
	if !IsNil(o.ProtectionType) {
		toSerialize["protectionType"] = o.ProtectionType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DDos) UnmarshalJSON(data []byte) (err error) {
	varDDos := _DDos{}

	err = json.Unmarshal(data, &varDDos)

	if err != nil {
		return err
	}

	*o = DDos(varDDos)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "detectionProfile")
		delete(additionalProperties, "protectionType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDDos struct {
	value *DDos
	isSet bool
}

func (v NullableDDos) Get() *DDos {
	return v.value
}

func (v *NullableDDos) Set(val *DDos) {
	v.value = val
	v.isSet = true
}

func (v NullableDDos) IsSet() bool {
	return v.isSet
}

func (v *NullableDDos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDDos(val *DDos) *NullableDDos {
	return &NullableDDos{value: val, isSet: true}
}

func (v NullableDDos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDDos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


