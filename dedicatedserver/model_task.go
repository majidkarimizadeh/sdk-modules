/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"time"
)

// checks if the Task type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Task{}

// Task struct for Task
type Task struct {
	// Description of the task
	Description *string `json:"description,omitempty"`
	// An optional error message
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// The flow this task is part of
	Flow *string `json:"flow,omitempty"`
	// The behaviour if this task fails
	OnError *string `json:"onError,omitempty"`
	// The status of the task
	Status *string `json:"status,omitempty"`
	// Timestamp for each state change
	StatusTimestamps *map[string]time.Time `json:"statusTimestamps,omitempty"`
	// Unique ID for this task
	Uuid *string `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Task Task

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask() *Task {
	this := Task{}
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Task) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Task) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Task) SetDescription(v string) {
	o.Description = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Task) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *Task) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *Task) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *Task) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *Task) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetFlow returns the Flow field value if set, zero value otherwise.
func (o *Task) GetFlow() string {
	if o == nil || IsNil(o.Flow) {
		var ret string
		return ret
	}
	return *o.Flow
}

// GetFlowOk returns a tuple with the Flow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFlowOk() (*string, bool) {
	if o == nil || IsNil(o.Flow) {
		return nil, false
	}
	return o.Flow, true
}

// HasFlow returns a boolean if a field has been set.
func (o *Task) HasFlow() bool {
	if o != nil && !IsNil(o.Flow) {
		return true
	}

	return false
}

// SetFlow gets a reference to the given string and assigns it to the Flow field.
func (o *Task) SetFlow(v string) {
	o.Flow = &v
}

// GetOnError returns the OnError field value if set, zero value otherwise.
func (o *Task) GetOnError() string {
	if o == nil || IsNil(o.OnError) {
		var ret string
		return ret
	}
	return *o.OnError
}

// GetOnErrorOk returns a tuple with the OnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetOnErrorOk() (*string, bool) {
	if o == nil || IsNil(o.OnError) {
		return nil, false
	}
	return o.OnError, true
}

// HasOnError returns a boolean if a field has been set.
func (o *Task) HasOnError() bool {
	if o != nil && !IsNil(o.OnError) {
		return true
	}

	return false
}

// SetOnError gets a reference to the given string and assigns it to the OnError field.
func (o *Task) SetOnError(v string) {
	o.OnError = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Task) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Task) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Task) SetStatus(v string) {
	o.Status = &v
}

// GetStatusTimestamps returns the StatusTimestamps field value if set, zero value otherwise.
func (o *Task) GetStatusTimestamps() map[string]time.Time {
	if o == nil || IsNil(o.StatusTimestamps) {
		var ret map[string]time.Time
		return ret
	}
	return *o.StatusTimestamps
}

// GetStatusTimestampsOk returns a tuple with the StatusTimestamps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetStatusTimestampsOk() (*map[string]time.Time, bool) {
	if o == nil || IsNil(o.StatusTimestamps) {
		return nil, false
	}
	return o.StatusTimestamps, true
}

// HasStatusTimestamps returns a boolean if a field has been set.
func (o *Task) HasStatusTimestamps() bool {
	if o != nil && !IsNil(o.StatusTimestamps) {
		return true
	}

	return false
}

// SetStatusTimestamps gets a reference to the given map[string]time.Time and assigns it to the StatusTimestamps field.
func (o *Task) SetStatusTimestamps(v map[string]time.Time) {
	o.StatusTimestamps = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Task) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Task) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Task) SetUuid(v string) {
	o.Uuid = &v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Task) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if !IsNil(o.Flow) {
		toSerialize["flow"] = o.Flow
	}
	if !IsNil(o.OnError) {
		toSerialize["onError"] = o.OnError
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusTimestamps) {
		toSerialize["statusTimestamps"] = o.StatusTimestamps
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Task) UnmarshalJSON(data []byte) (err error) {
	varTask := _Task{}

	err = json.Unmarshal(data, &varTask)

	if err != nil {
		return err
	}

	*o = Task(varTask)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "errorMessage")
		delete(additionalProperties, "flow")
		delete(additionalProperties, "onError")
		delete(additionalProperties, "status")
		delete(additionalProperties, "statusTimestamps")
		delete(additionalProperties, "uuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


