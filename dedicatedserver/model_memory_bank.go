/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the MemoryBank type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemoryBank{}

// MemoryBank struct for MemoryBank
type MemoryBank struct {
	Description *string `json:"description,omitempty"`
	Id *string `json:"id,omitempty"`
	ClockHz *string `json:"clock_hz,omitempty"`
	SerialNumber *string `json:"serial_number,omitempty"`
	SizeBytes *string `json:"size_bytes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemoryBank MemoryBank

// NewMemoryBank instantiates a new MemoryBank object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemoryBank() *MemoryBank {
	this := MemoryBank{}
	return &this
}

// NewMemoryBankWithDefaults instantiates a new MemoryBank object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemoryBankWithDefaults() *MemoryBank {
	this := MemoryBank{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MemoryBank) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryBank) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MemoryBank) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MemoryBank) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MemoryBank) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryBank) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MemoryBank) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MemoryBank) SetId(v string) {
	o.Id = &v
}

// GetClockHz returns the ClockHz field value if set, zero value otherwise.
func (o *MemoryBank) GetClockHz() string {
	if o == nil || IsNil(o.ClockHz) {
		var ret string
		return ret
	}
	return *o.ClockHz
}

// GetClockHzOk returns a tuple with the ClockHz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryBank) GetClockHzOk() (*string, bool) {
	if o == nil || IsNil(o.ClockHz) {
		return nil, false
	}
	return o.ClockHz, true
}

// HasClockHz returns a boolean if a field has been set.
func (o *MemoryBank) HasClockHz() bool {
	if o != nil && !IsNil(o.ClockHz) {
		return true
	}

	return false
}

// SetClockHz gets a reference to the given string and assigns it to the ClockHz field.
func (o *MemoryBank) SetClockHz(v string) {
	o.ClockHz = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *MemoryBank) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryBank) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *MemoryBank) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *MemoryBank) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise.
func (o *MemoryBank) GetSizeBytes() string {
	if o == nil || IsNil(o.SizeBytes) {
		var ret string
		return ret
	}
	return *o.SizeBytes
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryBank) GetSizeBytesOk() (*string, bool) {
	if o == nil || IsNil(o.SizeBytes) {
		return nil, false
	}
	return o.SizeBytes, true
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *MemoryBank) HasSizeBytes() bool {
	if o != nil && !IsNil(o.SizeBytes) {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given string and assigns it to the SizeBytes field.
func (o *MemoryBank) SetSizeBytes(v string) {
	o.SizeBytes = &v
}

func (o MemoryBank) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemoryBank) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ClockHz) {
		toSerialize["clock_hz"] = o.ClockHz
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serial_number"] = o.SerialNumber
	}
	if !IsNil(o.SizeBytes) {
		toSerialize["size_bytes"] = o.SizeBytes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemoryBank) UnmarshalJSON(data []byte) (err error) {
	varMemoryBank := _MemoryBank{}

	err = json.Unmarshal(data, &varMemoryBank)

	if err != nil {
		return err
	}

	*o = MemoryBank(varMemoryBank)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "id")
		delete(additionalProperties, "clock_hz")
		delete(additionalProperties, "serial_number")
		delete(additionalProperties, "size_bytes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemoryBank struct {
	value *MemoryBank
	isSet bool
}

func (v NullableMemoryBank) Get() *MemoryBank {
	return v.value
}

func (v *NullableMemoryBank) Set(val *MemoryBank) {
	v.value = val
	v.isSet = true
}

func (v NullableMemoryBank) IsSet() bool {
	return v.isSet
}

func (v *NullableMemoryBank) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemoryBank(val *MemoryBank) *NullableMemoryBank {
	return &NullableMemoryBank{value: val, isSet: true}
}

func (v NullableMemoryBank) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemoryBank) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


