/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the LinkSpeeds type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkSpeeds{}

// LinkSpeeds struct for LinkSpeeds
type LinkSpeeds struct {
	Var1000btFd *string `json:"1000bt-fd,omitempty"`
	Var100bt *string `json:"100bt,omitempty"`
	Var100btFd *string `json:"100bt-fd,omitempty"`
	Var10bt *string `json:"10bt,omitempty"`
	Var10btFd *string `json:"10bt-fd,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LinkSpeeds LinkSpeeds

// NewLinkSpeeds instantiates a new LinkSpeeds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkSpeeds() *LinkSpeeds {
	this := LinkSpeeds{}
	return &this
}

// NewLinkSpeedsWithDefaults instantiates a new LinkSpeeds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkSpeedsWithDefaults() *LinkSpeeds {
	this := LinkSpeeds{}
	return &this
}

// GetVar1000btFd returns the Var1000btFd field value if set, zero value otherwise.
func (o *LinkSpeeds) GetVar1000btFd() string {
	if o == nil || IsNil(o.Var1000btFd) {
		var ret string
		return ret
	}
	return *o.Var1000btFd
}

// GetVar1000btFdOk returns a tuple with the Var1000btFd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkSpeeds) GetVar1000btFdOk() (*string, bool) {
	if o == nil || IsNil(o.Var1000btFd) {
		return nil, false
	}
	return o.Var1000btFd, true
}

// HasVar1000btFd returns a boolean if a field has been set.
func (o *LinkSpeeds) HasVar1000btFd() bool {
	if o != nil && !IsNil(o.Var1000btFd) {
		return true
	}

	return false
}

// SetVar1000btFd gets a reference to the given string and assigns it to the Var1000btFd field.
func (o *LinkSpeeds) SetVar1000btFd(v string) {
	o.Var1000btFd = &v
}

// GetVar100bt returns the Var100bt field value if set, zero value otherwise.
func (o *LinkSpeeds) GetVar100bt() string {
	if o == nil || IsNil(o.Var100bt) {
		var ret string
		return ret
	}
	return *o.Var100bt
}

// GetVar100btOk returns a tuple with the Var100bt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkSpeeds) GetVar100btOk() (*string, bool) {
	if o == nil || IsNil(o.Var100bt) {
		return nil, false
	}
	return o.Var100bt, true
}

// HasVar100bt returns a boolean if a field has been set.
func (o *LinkSpeeds) HasVar100bt() bool {
	if o != nil && !IsNil(o.Var100bt) {
		return true
	}

	return false
}

// SetVar100bt gets a reference to the given string and assigns it to the Var100bt field.
func (o *LinkSpeeds) SetVar100bt(v string) {
	o.Var100bt = &v
}

// GetVar100btFd returns the Var100btFd field value if set, zero value otherwise.
func (o *LinkSpeeds) GetVar100btFd() string {
	if o == nil || IsNil(o.Var100btFd) {
		var ret string
		return ret
	}
	return *o.Var100btFd
}

// GetVar100btFdOk returns a tuple with the Var100btFd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkSpeeds) GetVar100btFdOk() (*string, bool) {
	if o == nil || IsNil(o.Var100btFd) {
		return nil, false
	}
	return o.Var100btFd, true
}

// HasVar100btFd returns a boolean if a field has been set.
func (o *LinkSpeeds) HasVar100btFd() bool {
	if o != nil && !IsNil(o.Var100btFd) {
		return true
	}

	return false
}

// SetVar100btFd gets a reference to the given string and assigns it to the Var100btFd field.
func (o *LinkSpeeds) SetVar100btFd(v string) {
	o.Var100btFd = &v
}

// GetVar10bt returns the Var10bt field value if set, zero value otherwise.
func (o *LinkSpeeds) GetVar10bt() string {
	if o == nil || IsNil(o.Var10bt) {
		var ret string
		return ret
	}
	return *o.Var10bt
}

// GetVar10btOk returns a tuple with the Var10bt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkSpeeds) GetVar10btOk() (*string, bool) {
	if o == nil || IsNil(o.Var10bt) {
		return nil, false
	}
	return o.Var10bt, true
}

// HasVar10bt returns a boolean if a field has been set.
func (o *LinkSpeeds) HasVar10bt() bool {
	if o != nil && !IsNil(o.Var10bt) {
		return true
	}

	return false
}

// SetVar10bt gets a reference to the given string and assigns it to the Var10bt field.
func (o *LinkSpeeds) SetVar10bt(v string) {
	o.Var10bt = &v
}

// GetVar10btFd returns the Var10btFd field value if set, zero value otherwise.
func (o *LinkSpeeds) GetVar10btFd() string {
	if o == nil || IsNil(o.Var10btFd) {
		var ret string
		return ret
	}
	return *o.Var10btFd
}

// GetVar10btFdOk returns a tuple with the Var10btFd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkSpeeds) GetVar10btFdOk() (*string, bool) {
	if o == nil || IsNil(o.Var10btFd) {
		return nil, false
	}
	return o.Var10btFd, true
}

// HasVar10btFd returns a boolean if a field has been set.
func (o *LinkSpeeds) HasVar10btFd() bool {
	if o != nil && !IsNil(o.Var10btFd) {
		return true
	}

	return false
}

// SetVar10btFd gets a reference to the given string and assigns it to the Var10btFd field.
func (o *LinkSpeeds) SetVar10btFd(v string) {
	o.Var10btFd = &v
}

func (o LinkSpeeds) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkSpeeds) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Var1000btFd) {
		toSerialize["1000bt-fd"] = o.Var1000btFd
	}
	if !IsNil(o.Var100bt) {
		toSerialize["100bt"] = o.Var100bt
	}
	if !IsNil(o.Var100btFd) {
		toSerialize["100bt-fd"] = o.Var100btFd
	}
	if !IsNil(o.Var10bt) {
		toSerialize["10bt"] = o.Var10bt
	}
	if !IsNil(o.Var10btFd) {
		toSerialize["10bt-fd"] = o.Var10btFd
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LinkSpeeds) UnmarshalJSON(data []byte) (err error) {
	varLinkSpeeds := _LinkSpeeds{}

	err = json.Unmarshal(data, &varLinkSpeeds)

	if err != nil {
		return err
	}

	*o = LinkSpeeds(varLinkSpeeds)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "1000bt-fd")
		delete(additionalProperties, "100bt")
		delete(additionalProperties, "100bt-fd")
		delete(additionalProperties, "10bt")
		delete(additionalProperties, "10bt-fd")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinkSpeeds struct {
	value *LinkSpeeds
	isSet bool
}

func (v NullableLinkSpeeds) Get() *LinkSpeeds {
	return v.value
}

func (v *NullableLinkSpeeds) Set(val *LinkSpeeds) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkSpeeds) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkSpeeds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkSpeeds(val *LinkSpeeds) *NullableLinkSpeeds {
	return &NullableLinkSpeeds{value: val, isSet: true}
}

func (v NullableLinkSpeeds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkSpeeds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


