/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the Actions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Actions{}

// Actions struct for Actions
type Actions struct {
	// Date timestamp when the last notification email triggered
	LastTriggeredAt NullableString `json:"lastTriggeredAt,omitempty"`
	// Type of action
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Actions Actions

// NewActions instantiates a new Actions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActions() *Actions {
	this := Actions{}
	return &this
}

// NewActionsWithDefaults instantiates a new Actions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionsWithDefaults() *Actions {
	this := Actions{}
	return &this
}

// GetLastTriggeredAt returns the LastTriggeredAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Actions) GetLastTriggeredAt() string {
	if o == nil || IsNil(o.LastTriggeredAt.Get()) {
		var ret string
		return ret
	}
	return *o.LastTriggeredAt.Get()
}

// GetLastTriggeredAtOk returns a tuple with the LastTriggeredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Actions) GetLastTriggeredAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastTriggeredAt.Get(), o.LastTriggeredAt.IsSet()
}

// HasLastTriggeredAt returns a boolean if a field has been set.
func (o *Actions) HasLastTriggeredAt() bool {
	if o != nil && o.LastTriggeredAt.IsSet() {
		return true
	}

	return false
}

// SetLastTriggeredAt gets a reference to the given NullableString and assigns it to the LastTriggeredAt field.
func (o *Actions) SetLastTriggeredAt(v string) {
	o.LastTriggeredAt.Set(&v)
}
// SetLastTriggeredAtNil sets the value for LastTriggeredAt to be an explicit nil
func (o *Actions) SetLastTriggeredAtNil() {
	o.LastTriggeredAt.Set(nil)
}

// UnsetLastTriggeredAt ensures that no value is present for LastTriggeredAt, not even an explicit nil
func (o *Actions) UnsetLastTriggeredAt() {
	o.LastTriggeredAt.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Actions) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Actions) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Actions) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Actions) SetType(v string) {
	o.Type = &v
}

func (o Actions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Actions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.LastTriggeredAt.IsSet() {
		toSerialize["lastTriggeredAt"] = o.LastTriggeredAt.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Actions) UnmarshalJSON(data []byte) (err error) {
	varActions := _Actions{}

	err = json.Unmarshal(data, &varActions)

	if err != nil {
		return err
	}

	*o = Actions(varActions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "lastTriggeredAt")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableActions struct {
	value *Actions
	isSet bool
}

func (v NullableActions) Get() *Actions {
	return v.value
}

func (v *NullableActions) Set(val *Actions) {
	v.value = val
	v.isSet = true
}

func (v NullableActions) IsSet() bool {
	return v.isSet
}

func (v *NullableActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActions(val *Actions) *NullableActions {
	return &NullableActions{value: val, isSet: true}
}

func (v NullableActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


