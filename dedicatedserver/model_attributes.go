/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the Attributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Attributes{}

// Attributes struct for Attributes
type Attributes struct {
	PowerOnHours *Attribute `json:"Power_On_Hours,omitempty"`
	ReallocatedSectorCt *Attribute `json:"Reallocated_Sector_Ct,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Attributes Attributes

// NewAttributes instantiates a new Attributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributes() *Attributes {
	this := Attributes{}
	return &this
}

// NewAttributesWithDefaults instantiates a new Attributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributesWithDefaults() *Attributes {
	this := Attributes{}
	return &this
}

// GetPowerOnHours returns the PowerOnHours field value if set, zero value otherwise.
func (o *Attributes) GetPowerOnHours() Attribute {
	if o == nil || IsNil(o.PowerOnHours) {
		var ret Attribute
		return ret
	}
	return *o.PowerOnHours
}

// GetPowerOnHoursOk returns a tuple with the PowerOnHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attributes) GetPowerOnHoursOk() (*Attribute, bool) {
	if o == nil || IsNil(o.PowerOnHours) {
		return nil, false
	}
	return o.PowerOnHours, true
}

// HasPowerOnHours returns a boolean if a field has been set.
func (o *Attributes) HasPowerOnHours() bool {
	if o != nil && !IsNil(o.PowerOnHours) {
		return true
	}

	return false
}

// SetPowerOnHours gets a reference to the given Attribute and assigns it to the PowerOnHours field.
func (o *Attributes) SetPowerOnHours(v Attribute) {
	o.PowerOnHours = &v
}

// GetReallocatedSectorCt returns the ReallocatedSectorCt field value if set, zero value otherwise.
func (o *Attributes) GetReallocatedSectorCt() Attribute {
	if o == nil || IsNil(o.ReallocatedSectorCt) {
		var ret Attribute
		return ret
	}
	return *o.ReallocatedSectorCt
}

// GetReallocatedSectorCtOk returns a tuple with the ReallocatedSectorCt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attributes) GetReallocatedSectorCtOk() (*Attribute, bool) {
	if o == nil || IsNil(o.ReallocatedSectorCt) {
		return nil, false
	}
	return o.ReallocatedSectorCt, true
}

// HasReallocatedSectorCt returns a boolean if a field has been set.
func (o *Attributes) HasReallocatedSectorCt() bool {
	if o != nil && !IsNil(o.ReallocatedSectorCt) {
		return true
	}

	return false
}

// SetReallocatedSectorCt gets a reference to the given Attribute and assigns it to the ReallocatedSectorCt field.
func (o *Attributes) SetReallocatedSectorCt(v Attribute) {
	o.ReallocatedSectorCt = &v
}

func (o Attributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PowerOnHours) {
		toSerialize["Power_On_Hours"] = o.PowerOnHours
	}
	if !IsNil(o.ReallocatedSectorCt) {
		toSerialize["Reallocated_Sector_Ct"] = o.ReallocatedSectorCt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Attributes) UnmarshalJSON(data []byte) (err error) {
	varAttributes := _Attributes{}

	err = json.Unmarshal(data, &varAttributes)

	if err != nil {
		return err
	}

	*o = Attributes(varAttributes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "Power_On_Hours")
		delete(additionalProperties, "Reallocated_Sector_Ct")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAttributes struct {
	value *Attributes
	isSet bool
}

func (v NullableAttributes) Get() *Attributes {
	return v.value
}

func (v *NullableAttributes) Set(val *Attributes) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributes(val *Attributes) *NullableAttributes {
	return &NullableAttributes{value: val, isSet: true}
}

func (v NullableAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


