/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the Raid type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Raid{}

// Raid Contains RAID related information about the installation request
type Raid struct {
	Level *RaidLevel `json:"level,omitempty"`
	// The number of disks you want to apply RAID on. If not specified all disks are used
	NumberOfDisks *int32 `json:"numberOfDisks,omitempty"`
	Type *RaidType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Raid Raid

// NewRaid instantiates a new Raid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRaid() *Raid {
	this := Raid{}
	return &this
}

// NewRaidWithDefaults instantiates a new Raid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRaidWithDefaults() *Raid {
	this := Raid{}
	return &this
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *Raid) GetLevel() RaidLevel {
	if o == nil || IsNil(o.Level) {
		var ret RaidLevel
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Raid) GetLevelOk() (*RaidLevel, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *Raid) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given RaidLevel and assigns it to the Level field.
func (o *Raid) SetLevel(v RaidLevel) {
	o.Level = &v
}

// GetNumberOfDisks returns the NumberOfDisks field value if set, zero value otherwise.
func (o *Raid) GetNumberOfDisks() int32 {
	if o == nil || IsNil(o.NumberOfDisks) {
		var ret int32
		return ret
	}
	return *o.NumberOfDisks
}

// GetNumberOfDisksOk returns a tuple with the NumberOfDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Raid) GetNumberOfDisksOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfDisks) {
		return nil, false
	}
	return o.NumberOfDisks, true
}

// HasNumberOfDisks returns a boolean if a field has been set.
func (o *Raid) HasNumberOfDisks() bool {
	if o != nil && !IsNil(o.NumberOfDisks) {
		return true
	}

	return false
}

// SetNumberOfDisks gets a reference to the given int32 and assigns it to the NumberOfDisks field.
func (o *Raid) SetNumberOfDisks(v int32) {
	o.NumberOfDisks = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Raid) GetType() RaidType {
	if o == nil || IsNil(o.Type) {
		var ret RaidType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Raid) GetTypeOk() (*RaidType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Raid) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RaidType and assigns it to the Type field.
func (o *Raid) SetType(v RaidType) {
	o.Type = &v
}

func (o Raid) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Raid) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.NumberOfDisks) {
		toSerialize["numberOfDisks"] = o.NumberOfDisks
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Raid) UnmarshalJSON(data []byte) (err error) {
	varRaid := _Raid{}

	err = json.Unmarshal(data, &varRaid)

	if err != nil {
		return err
	}

	*o = Raid(varRaid)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "level")
		delete(additionalProperties, "numberOfDisks")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRaid struct {
	value *Raid
	isSet bool
}

func (v NullableRaid) Get() *Raid {
	return v.value
}

func (v *NullableRaid) Set(val *Raid) {
	v.value = val
	v.isSet = true
}

func (v NullableRaid) IsSet() bool {
	return v.isSet
}

func (v *NullableRaid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRaid(val *Raid) *NullableRaid {
	return &NullableRaid{value: val, isSet: true}
}

func (v NullableRaid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRaid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


