/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the Defaults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Defaults{}

// Defaults An object containing defaults for this operating system
type Defaults struct {
	// Device name
	Device *string `json:"device,omitempty"`
	Partitions []Partition `json:"partitions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Defaults Defaults

// NewDefaults instantiates a new Defaults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaults() *Defaults {
	this := Defaults{}
	return &this
}

// NewDefaultsWithDefaults instantiates a new Defaults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultsWithDefaults() *Defaults {
	this := Defaults{}
	return &this
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *Defaults) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Defaults) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *Defaults) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *Defaults) SetDevice(v string) {
	o.Device = &v
}

// GetPartitions returns the Partitions field value if set, zero value otherwise.
func (o *Defaults) GetPartitions() []Partition {
	if o == nil || IsNil(o.Partitions) {
		var ret []Partition
		return ret
	}
	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Defaults) GetPartitionsOk() ([]Partition, bool) {
	if o == nil || IsNil(o.Partitions) {
		return nil, false
	}
	return o.Partitions, true
}

// HasPartitions returns a boolean if a field has been set.
func (o *Defaults) HasPartitions() bool {
	if o != nil && !IsNil(o.Partitions) {
		return true
	}

	return false
}

// SetPartitions gets a reference to the given []Partition and assigns it to the Partitions field.
func (o *Defaults) SetPartitions(v []Partition) {
	o.Partitions = v
}

func (o Defaults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Defaults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Partitions) {
		toSerialize["partitions"] = o.Partitions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Defaults) UnmarshalJSON(data []byte) (err error) {
	varDefaults := _Defaults{}

	err = json.Unmarshal(data, &varDefaults)

	if err != nil {
		return err
	}

	*o = Defaults(varDefaults)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device")
		delete(additionalProperties, "partitions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDefaults struct {
	value *Defaults
	isSet bool
}

func (v NullableDefaults) Get() *Defaults {
	return v.value
}

func (v *NullableDefaults) Set(val *Defaults) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaults) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaults(val *Defaults) *NullableDefaults {
	return &NullableDefaults{value: val, isSet: true}
}

func (v NullableDefaults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


