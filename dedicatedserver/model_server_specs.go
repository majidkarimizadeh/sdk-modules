/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the ServerSpecs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerSpecs{}

// ServerSpecs Hardware information of the server
type ServerSpecs struct {
	// The chassis description of the server
	Chassis *string `json:"chassis,omitempty"`
	Cpu *Cpu `json:"cpu,omitempty"`
	// Hardware RAID capability of the server
	HardwareRaidCapable *bool `json:"hardwareRaidCapable,omitempty"`
	// List of hard disk drives of the server
	Hdd []Hdd `json:"hdd,omitempty"`
	// List of PCI cards of the server
	PciCards []PciCard `json:"pciCards,omitempty"`
	Ram *Ram `json:"ram,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerSpecs ServerSpecs

// NewServerSpecs instantiates a new ServerSpecs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerSpecs() *ServerSpecs {
	this := ServerSpecs{}
	return &this
}

// NewServerSpecsWithDefaults instantiates a new ServerSpecs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerSpecsWithDefaults() *ServerSpecs {
	this := ServerSpecs{}
	return &this
}

// GetChassis returns the Chassis field value if set, zero value otherwise.
func (o *ServerSpecs) GetChassis() string {
	if o == nil || IsNil(o.Chassis) {
		var ret string
		return ret
	}
	return *o.Chassis
}

// GetChassisOk returns a tuple with the Chassis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSpecs) GetChassisOk() (*string, bool) {
	if o == nil || IsNil(o.Chassis) {
		return nil, false
	}
	return o.Chassis, true
}

// HasChassis returns a boolean if a field has been set.
func (o *ServerSpecs) HasChassis() bool {
	if o != nil && !IsNil(o.Chassis) {
		return true
	}

	return false
}

// SetChassis gets a reference to the given string and assigns it to the Chassis field.
func (o *ServerSpecs) SetChassis(v string) {
	o.Chassis = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *ServerSpecs) GetCpu() Cpu {
	if o == nil || IsNil(o.Cpu) {
		var ret Cpu
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSpecs) GetCpuOk() (*Cpu, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *ServerSpecs) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given Cpu and assigns it to the Cpu field.
func (o *ServerSpecs) SetCpu(v Cpu) {
	o.Cpu = &v
}

// GetHardwareRaidCapable returns the HardwareRaidCapable field value if set, zero value otherwise.
func (o *ServerSpecs) GetHardwareRaidCapable() bool {
	if o == nil || IsNil(o.HardwareRaidCapable) {
		var ret bool
		return ret
	}
	return *o.HardwareRaidCapable
}

// GetHardwareRaidCapableOk returns a tuple with the HardwareRaidCapable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSpecs) GetHardwareRaidCapableOk() (*bool, bool) {
	if o == nil || IsNil(o.HardwareRaidCapable) {
		return nil, false
	}
	return o.HardwareRaidCapable, true
}

// HasHardwareRaidCapable returns a boolean if a field has been set.
func (o *ServerSpecs) HasHardwareRaidCapable() bool {
	if o != nil && !IsNil(o.HardwareRaidCapable) {
		return true
	}

	return false
}

// SetHardwareRaidCapable gets a reference to the given bool and assigns it to the HardwareRaidCapable field.
func (o *ServerSpecs) SetHardwareRaidCapable(v bool) {
	o.HardwareRaidCapable = &v
}

// GetHdd returns the Hdd field value if set, zero value otherwise.
func (o *ServerSpecs) GetHdd() []Hdd {
	if o == nil || IsNil(o.Hdd) {
		var ret []Hdd
		return ret
	}
	return o.Hdd
}

// GetHddOk returns a tuple with the Hdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSpecs) GetHddOk() ([]Hdd, bool) {
	if o == nil || IsNil(o.Hdd) {
		return nil, false
	}
	return o.Hdd, true
}

// HasHdd returns a boolean if a field has been set.
func (o *ServerSpecs) HasHdd() bool {
	if o != nil && !IsNil(o.Hdd) {
		return true
	}

	return false
}

// SetHdd gets a reference to the given []Hdd and assigns it to the Hdd field.
func (o *ServerSpecs) SetHdd(v []Hdd) {
	o.Hdd = v
}

// GetPciCards returns the PciCards field value if set, zero value otherwise.
func (o *ServerSpecs) GetPciCards() []PciCard {
	if o == nil || IsNil(o.PciCards) {
		var ret []PciCard
		return ret
	}
	return o.PciCards
}

// GetPciCardsOk returns a tuple with the PciCards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSpecs) GetPciCardsOk() ([]PciCard, bool) {
	if o == nil || IsNil(o.PciCards) {
		return nil, false
	}
	return o.PciCards, true
}

// HasPciCards returns a boolean if a field has been set.
func (o *ServerSpecs) HasPciCards() bool {
	if o != nil && !IsNil(o.PciCards) {
		return true
	}

	return false
}

// SetPciCards gets a reference to the given []PciCard and assigns it to the PciCards field.
func (o *ServerSpecs) SetPciCards(v []PciCard) {
	o.PciCards = v
}

// GetRam returns the Ram field value if set, zero value otherwise.
func (o *ServerSpecs) GetRam() Ram {
	if o == nil || IsNil(o.Ram) {
		var ret Ram
		return ret
	}
	return *o.Ram
}

// GetRamOk returns a tuple with the Ram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSpecs) GetRamOk() (*Ram, bool) {
	if o == nil || IsNil(o.Ram) {
		return nil, false
	}
	return o.Ram, true
}

// HasRam returns a boolean if a field has been set.
func (o *ServerSpecs) HasRam() bool {
	if o != nil && !IsNil(o.Ram) {
		return true
	}

	return false
}

// SetRam gets a reference to the given Ram and assigns it to the Ram field.
func (o *ServerSpecs) SetRam(v Ram) {
	o.Ram = &v
}

func (o ServerSpecs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerSpecs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Chassis) {
		toSerialize["chassis"] = o.Chassis
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.HardwareRaidCapable) {
		toSerialize["hardwareRaidCapable"] = o.HardwareRaidCapable
	}
	if !IsNil(o.Hdd) {
		toSerialize["hdd"] = o.Hdd
	}
	if !IsNil(o.PciCards) {
		toSerialize["pciCards"] = o.PciCards
	}
	if !IsNil(o.Ram) {
		toSerialize["ram"] = o.Ram
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerSpecs) UnmarshalJSON(data []byte) (err error) {
	varServerSpecs := _ServerSpecs{}

	err = json.Unmarshal(data, &varServerSpecs)

	if err != nil {
		return err
	}

	*o = ServerSpecs(varServerSpecs)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chassis")
		delete(additionalProperties, "cpu")
		delete(additionalProperties, "hardwareRaidCapable")
		delete(additionalProperties, "hdd")
		delete(additionalProperties, "pciCards")
		delete(additionalProperties, "ram")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerSpecs struct {
	value *ServerSpecs
	isSet bool
}

func (v NullableServerSpecs) Get() *ServerSpecs {
	return v.value
}

func (v *NullableServerSpecs) Set(val *ServerSpecs) {
	v.value = val
	v.isSet = true
}

func (v NullableServerSpecs) IsSet() bool {
	return v.isSet
}

func (v *NullableServerSpecs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerSpecs(val *ServerSpecs) *NullableServerSpecs {
	return &NullableServerSpecs{value: val, isSet: true}
}

func (v NullableServerSpecs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerSpecs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


