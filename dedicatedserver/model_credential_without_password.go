/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"fmt"
)

// checks if the CredentialWithoutPassword type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CredentialWithoutPassword{}

// CredentialWithoutPassword struct for CredentialWithoutPassword
type CredentialWithoutPassword struct {
	Type CredentialType `json:"type"`
	// The username
	Username string `json:"username"`
	AdditionalProperties map[string]interface{}
}

type _CredentialWithoutPassword CredentialWithoutPassword

// NewCredentialWithoutPassword instantiates a new CredentialWithoutPassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentialWithoutPassword(type_ CredentialType, username string) *CredentialWithoutPassword {
	this := CredentialWithoutPassword{}
	this.Type = type_
	this.Username = username
	return &this
}

// NewCredentialWithoutPasswordWithDefaults instantiates a new CredentialWithoutPassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentialWithoutPasswordWithDefaults() *CredentialWithoutPassword {
	this := CredentialWithoutPassword{}
	return &this
}

// GetType returns the Type field value
func (o *CredentialWithoutPassword) GetType() CredentialType {
	if o == nil {
		var ret CredentialType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CredentialWithoutPassword) GetTypeOk() (*CredentialType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CredentialWithoutPassword) SetType(v CredentialType) {
	o.Type = v
}

// GetUsername returns the Username field value
func (o *CredentialWithoutPassword) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *CredentialWithoutPassword) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *CredentialWithoutPassword) SetUsername(v string) {
	o.Username = v
}

func (o CredentialWithoutPassword) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CredentialWithoutPassword) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["username"] = o.Username

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CredentialWithoutPassword) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCredentialWithoutPassword := _CredentialWithoutPassword{}

	err = json.Unmarshal(data, &varCredentialWithoutPassword)

	if err != nil {
		return err
	}

	*o = CredentialWithoutPassword(varCredentialWithoutPassword)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCredentialWithoutPassword struct {
	value *CredentialWithoutPassword
	isSet bool
}

func (v NullableCredentialWithoutPassword) Get() *CredentialWithoutPassword {
	return v.value
}

func (v *NullableCredentialWithoutPassword) Set(val *CredentialWithoutPassword) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialWithoutPassword) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialWithoutPassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialWithoutPassword(val *CredentialWithoutPassword) *NullableCredentialWithoutPassword {
	return &NullableCredentialWithoutPassword{value: val, isSet: true}
}

func (v NullableCredentialWithoutPassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialWithoutPassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


