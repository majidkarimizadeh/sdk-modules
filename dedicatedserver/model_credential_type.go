/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"fmt"
)

// CredentialType The type of the credential.
type CredentialType string

// List of credentialType
const (
	CREDENTIALTYPE_OPERATING_SYSTEM CredentialType = "OPERATING_SYSTEM"
	CREDENTIALTYPE_RESCUE_MODE CredentialType = "RESCUE_MODE"
	CREDENTIALTYPE_REMOTE_MANAGEMENT CredentialType = "REMOTE_MANAGEMENT"
	CREDENTIALTYPE_CONTROL_PANEL CredentialType = "CONTROL_PANEL"
	CREDENTIALTYPE_SWITCH CredentialType = "SWITCH"
	CREDENTIALTYPE_PDU CredentialType = "PDU"
	CREDENTIALTYPE_FIREWALL CredentialType = "FIREWALL"
	CREDENTIALTYPE_LOAD_BALANCER CredentialType = "LOAD_BALANCER"
	CREDENTIALTYPE_VNC CredentialType = "VNC"
	CREDENTIALTYPE_TEMPORARY_OPERATING_SYSTEM CredentialType = "TEMPORARY_OPERATING_SYSTEM"
	CREDENTIALTYPE_VPN_USER CredentialType = "VPN_USER"
	CREDENTIALTYPE_COMBINATION_LOCK CredentialType = "COMBINATION_LOCK"
	CREDENTIALTYPE_DATABASE CredentialType = "DATABASE"
)

// All allowed values of CredentialType enum
var AllowedCredentialTypeEnumValues = []CredentialType{
	"OPERATING_SYSTEM",
	"RESCUE_MODE",
	"REMOTE_MANAGEMENT",
	"CONTROL_PANEL",
	"SWITCH",
	"PDU",
	"FIREWALL",
	"LOAD_BALANCER",
	"VNC",
	"TEMPORARY_OPERATING_SYSTEM",
	"VPN_USER",
	"COMBINATION_LOCK",
	"DATABASE",
}

func (v *CredentialType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CredentialType(value)
	for _, existing := range AllowedCredentialTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CredentialType", value)
}

// NewCredentialTypeFromValue returns a pointer to a valid CredentialType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCredentialTypeFromValue(v string) (*CredentialType, error) {
	ev := CredentialType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CredentialType: valid values are %v", v, AllowedCredentialTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CredentialType) IsValid() bool {
	for _, existing := range AllowedCredentialTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to credentialType value
func (v CredentialType) Ptr() *CredentialType {
	return &v
}

type NullableCredentialType struct {
	value *CredentialType
	isSet bool
}

func (v NullableCredentialType) Get() *CredentialType {
	return v.value
}

func (v *NullableCredentialType) Set(val *CredentialType) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialType) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialType(val *CredentialType) *NullableCredentialType {
	return &NullableCredentialType{value: val, isSet: true}
}

func (v NullableCredentialType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

