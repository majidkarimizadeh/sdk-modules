/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
)

// checks if the Subnet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subnet{}

// Subnet struct for Subnet
type Subnet struct {
	Quantity *int32 `json:"quantity,omitempty"`
	SubnetSize *string `json:"subnetSize,omitempty"`
	NetworkType *NetworkType `json:"networkType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Subnet Subnet

// NewSubnet instantiates a new Subnet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubnet() *Subnet {
	this := Subnet{}
	return &this
}

// NewSubnetWithDefaults instantiates a new Subnet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubnetWithDefaults() *Subnet {
	this := Subnet{}
	return &this
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Subnet) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Subnet) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *Subnet) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetSubnetSize returns the SubnetSize field value if set, zero value otherwise.
func (o *Subnet) GetSubnetSize() string {
	if o == nil || IsNil(o.SubnetSize) {
		var ret string
		return ret
	}
	return *o.SubnetSize
}

// GetSubnetSizeOk returns a tuple with the SubnetSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetSubnetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetSize) {
		return nil, false
	}
	return o.SubnetSize, true
}

// HasSubnetSize returns a boolean if a field has been set.
func (o *Subnet) HasSubnetSize() bool {
	if o != nil && !IsNil(o.SubnetSize) {
		return true
	}

	return false
}

// SetSubnetSize gets a reference to the given string and assigns it to the SubnetSize field.
func (o *Subnet) SetSubnetSize(v string) {
	o.SubnetSize = &v
}

// GetNetworkType returns the NetworkType field value if set, zero value otherwise.
func (o *Subnet) GetNetworkType() NetworkType {
	if o == nil || IsNil(o.NetworkType) {
		var ret NetworkType
		return ret
	}
	return *o.NetworkType
}

// GetNetworkTypeOk returns a tuple with the NetworkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetNetworkTypeOk() (*NetworkType, bool) {
	if o == nil || IsNil(o.NetworkType) {
		return nil, false
	}
	return o.NetworkType, true
}

// HasNetworkType returns a boolean if a field has been set.
func (o *Subnet) HasNetworkType() bool {
	if o != nil && !IsNil(o.NetworkType) {
		return true
	}

	return false
}

// SetNetworkType gets a reference to the given NetworkType and assigns it to the NetworkType field.
func (o *Subnet) SetNetworkType(v NetworkType) {
	o.NetworkType = &v
}

func (o Subnet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subnet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.SubnetSize) {
		toSerialize["subnetSize"] = o.SubnetSize
	}
	if !IsNil(o.NetworkType) {
		toSerialize["networkType"] = o.NetworkType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Subnet) UnmarshalJSON(data []byte) (err error) {
	varSubnet := _Subnet{}

	err = json.Unmarshal(data, &varSubnet)

	if err != nil {
		return err
	}

	*o = Subnet(varSubnet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "subnetSize")
		delete(additionalProperties, "networkType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubnet struct {
	value *Subnet
	isSet bool
}

func (v NullableSubnet) Get() *Subnet {
	return v.value
}

func (v *NullableSubnet) Set(val *Subnet) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnet) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnet(val *Subnet) *NullableSubnet {
	return &NullableSubnet{value: val, isSet: true}
}

func (v NullableSubnet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


