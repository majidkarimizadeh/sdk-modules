/*
Leaseweb API for dedicated servers

Testing DedicatedserverAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dedicatedserver

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/majidkarimizadeh/sdk-modules"
)

func Test_dedicatedserver_DedicatedserverAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DedicatedserverAPIService AddServerToPrivateNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var privateNetworkId string

		httpRes, err := apiClient.DedicatedserverAPI.AddServerToPrivateNetwork(context.Background(), serverId, privateNetworkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CancelActiveJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.CancelActiveJob(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CloseNetworkInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var networkTypeURL NetworkTypeURL

		httpRes, err := apiClient.DedicatedserverAPI.CloseNetworkInterface(context.Background(), serverId, networkTypeURL).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CloseNetworkInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.CloseNetworkInterfaces(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CreateNetworkEquipmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.CreateNetworkEquipmentCredential(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CreateServerBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.CreateServerBandwidthNotificationSetting(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CreateServerCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.CreateServerCredential(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CreateServerDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.CreateServerDataTrafficNotificationSetting(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService CreateServerDhcpReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.CreateServerDhcpReservation(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService DeleteNetworkEquipmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ CredentialType
		var username string

		httpRes, err := apiClient.DedicatedserverAPI.DeleteNetworkEquipmentCredential(context.Background(), networkEquipmentId, type_, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService DeleteServerBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		httpRes, err := apiClient.DedicatedserverAPI.DeleteServerBandwidthNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService DeleteServerCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ CredentialType
		var username string

		httpRes, err := apiClient.DedicatedserverAPI.DeleteServerCredential(context.Background(), serverId, type_, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService DeleteServerDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		httpRes, err := apiClient.DedicatedserverAPI.DeleteServerDataTrafficNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService DeleteServerDhcpReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.DeleteServerDhcpReservation(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService DeleteServerFromPrivateNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var privateNetworkId string

		httpRes, err := apiClient.DedicatedserverAPI.DeleteServerFromPrivateNetwork(context.Background(), serverId, privateNetworkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService EnableServerRescueMode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.EnableServerRescueMode(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService ExpireActiveJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.ExpireActiveJob(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetControlPanelList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetControlPanelList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetControlPanelListByOperatingSystemId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operatingSystemId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetControlPanelListByOperatingSystemId(context.Background(), operatingSystemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetDdosNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetDdosNotificationSetting(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkEquipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkEquipment(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkEquipmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ CredentialType
		var username string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkEquipmentCredential(context.Background(), networkEquipmentId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkEquipmentCredentialList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkEquipmentCredentialList(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkEquipmentCredentialListByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ CredentialType

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkEquipmentCredentialListByType(context.Background(), networkEquipmentId, type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkEquipmentIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkEquipmentIp(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkEquipmentIpList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkEquipmentIpList(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkEquipmentList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkEquipmentList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkEquipmentNullRouteHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkEquipmentNullRouteHistory(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkEquipmentPowerStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkEquipmentPowerStatus(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var networkTypeURL NetworkTypeURL

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkInterface(context.Background(), serverId, networkTypeURL).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetNetworkInterfaceList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetNetworkInterfaceList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetOperatingSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operatingSystemId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetOperatingSystem(context.Background(), operatingSystemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetOperatingSystemList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetOperatingSystemList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetRescueImageList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetRescueImageList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerBandwidthMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerBandwidthMetrics(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerBandwidthNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerBandwidthNotificationSettingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerBandwidthNotificationSettingList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ CredentialType
		var username string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerCredential(context.Background(), serverId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerCredentialList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerCredentialList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerCredentialListByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ CredentialType

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerCredentialListByType(context.Background(), serverId, type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerDataTrafficMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerDataTrafficMetrics(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerDataTrafficNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerDataTrafficNotificationSettingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerDataTrafficNotificationSettingList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerDhcpReservationList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerDhcpReservationList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerHardware", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerHardware(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerIp(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerIpList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerIpList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var jobId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerJob(context.Background(), serverId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerJobList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerJobList(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerNullRouteHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerNullRouteHistory(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService GetServerPowerStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.GetServerPowerStatus(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService InstallOperatingSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.InstallOperatingSystem(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService IpmiResetServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.IpmiResetServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService NullIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.NullIpRoute(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService NullNetworkEquipmentIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.NullNetworkEquipmentIpRoute(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService OpenNetworkInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var networkTypeURL NetworkTypeURL

		httpRes, err := apiClient.DedicatedserverAPI.OpenNetworkInterface(context.Background(), serverId, networkTypeURL).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService OpenNetworkInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.OpenNetworkInterfaces(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService PowerCycleNetworkEquipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.DedicatedserverAPI.PowerCycleNetworkEquipment(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService PowerCycleServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.PowerCycleServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService PowerNetworkEquipmentOff", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.DedicatedserverAPI.PowerNetworkEquipmentOff(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService PowerNetworkEquipmentOn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.DedicatedserverAPI.PowerNetworkEquipmentOn(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService PowerServerOff", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.PowerServerOff(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService PowerServerOn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.PowerServerOn(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService RemoveNullIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.RemoveNullIpRoute(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService RetryServerJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var jobId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.RetryServerJob(context.Background(), serverId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService ScanHardware", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.ScanHardware(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UnNullNetworkEquipmentIpRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.UnNullNetworkEquipmentIpRoute(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateDdosNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.UpdateDdosNotificationSetting(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateIpProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.UpdateIpProfile(context.Background(), serverId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateNetworkEquipmentCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var type_ CredentialType
		var username string

		resp, httpRes, err := apiClient.DedicatedserverAPI.UpdateNetworkEquipmentCredential(context.Background(), networkEquipmentId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateNetworkEquipmentIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string
		var ip string

		resp, httpRes, err := apiClient.DedicatedserverAPI.UpdateNetworkEquipmentIp(context.Background(), networkEquipmentId, ip).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateNetworkEquipmentReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEquipmentId string

		httpRes, err := apiClient.DedicatedserverAPI.UpdateNetworkEquipmentReference(context.Background(), networkEquipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateServerBandwidthNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.UpdateServerBandwidthNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateServerCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var type_ CredentialType
		var username string

		resp, httpRes, err := apiClient.DedicatedserverAPI.UpdateServerCredential(context.Background(), serverId, type_, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateServerDataTrafficNotificationSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var notificationSettingId string

		resp, httpRes, err := apiClient.DedicatedserverAPI.UpdateServerDataTrafficNotificationSetting(context.Background(), serverId, notificationSettingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DedicatedserverAPIService UpdateServerReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string

		httpRes, err := apiClient.DedicatedserverAPI.UpdateServerReference(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
