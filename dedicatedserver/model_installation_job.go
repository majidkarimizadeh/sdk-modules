/*
Leaseweb API for dedicated servers

This documents the rest api dedicatedserver provides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicatedserver

import (
	"encoding/json"
	"time"
)

// checks if the InstallationJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstallationJob{}

// InstallationJob struct for InstallationJob
type InstallationJob struct {
	// Id of the server (deprecated, use serverId instead)
	// Deprecated
	BareMetalId *string `json:"bareMetalId,omitempty"`
	// Creation timestamp
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Job flow
	Flow *string `json:"flow,omitempty"`
	// Describes whether the job is running
	IsRunning *bool `json:"isRunning,omitempty"`
	// Node ID for this server
	Node *string `json:"node,omitempty"`
	Payload *InstallationJobPayload `json:"payload,omitempty"`
	Progress *Progress `json:"progress,omitempty"`
	// Id of the server
	ServerId *string `json:"serverId,omitempty"`
	// Status of the job
	Status *string `json:"status,omitempty"`
	// List of tasks in the job
	Tasks []Task `json:"tasks,omitempty"`
	Type *JobType `json:"type,omitempty"`
	// Update timestamp
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Unique identifier of the job
	Uuid *string `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstallationJob InstallationJob

// NewInstallationJob instantiates a new InstallationJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallationJob() *InstallationJob {
	this := InstallationJob{}
	return &this
}

// NewInstallationJobWithDefaults instantiates a new InstallationJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallationJobWithDefaults() *InstallationJob {
	this := InstallationJob{}
	return &this
}

// GetBareMetalId returns the BareMetalId field value if set, zero value otherwise.
// Deprecated
func (o *InstallationJob) GetBareMetalId() string {
	if o == nil || IsNil(o.BareMetalId) {
		var ret string
		return ret
	}
	return *o.BareMetalId
}

// GetBareMetalIdOk returns a tuple with the BareMetalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *InstallationJob) GetBareMetalIdOk() (*string, bool) {
	if o == nil || IsNil(o.BareMetalId) {
		return nil, false
	}
	return o.BareMetalId, true
}

// HasBareMetalId returns a boolean if a field has been set.
func (o *InstallationJob) HasBareMetalId() bool {
	if o != nil && !IsNil(o.BareMetalId) {
		return true
	}

	return false
}

// SetBareMetalId gets a reference to the given string and assigns it to the BareMetalId field.
// Deprecated
func (o *InstallationJob) SetBareMetalId(v string) {
	o.BareMetalId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *InstallationJob) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationJob) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *InstallationJob) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *InstallationJob) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetFlow returns the Flow field value if set, zero value otherwise.
func (o *InstallationJob) GetFlow() string {
	if o == nil || IsNil(o.Flow) {
		var ret string
		return ret
	}
	return *o.Flow
}

// GetFlowOk returns a tuple with the Flow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationJob) GetFlowOk() (*string, bool) {
	if o == nil || IsNil(o.Flow) {
		return nil, false
	}
	return o.Flow, true
}

// HasFlow returns a boolean if a field has been set.
func (o *InstallationJob) HasFlow() bool {
	if o != nil && !IsNil(o.Flow) {
		return true
	}

	return false
}

// SetFlow gets a reference to the given string and assigns it to the Flow field.
func (o *InstallationJob) SetFlow(v string) {
	o.Flow = &v
}

// GetIsRunning returns the IsRunning field value if set, zero value otherwise.
func (o *InstallationJob) GetIsRunning() bool {
	if o == nil || IsNil(o.IsRunning) {
		var ret bool
		return ret
	}
	return *o.IsRunning
}

// GetIsRunningOk returns a tuple with the IsRunning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationJob) GetIsRunningOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRunning) {
		return nil, false
	}
	return o.IsRunning, true
}

// HasIsRunning returns a boolean if a field has been set.
func (o *InstallationJob) HasIsRunning() bool {
	if o != nil && !IsNil(o.IsRunning) {
		return true
	}

	return false
}

// SetIsRunning gets a reference to the given bool and assigns it to the IsRunning field.
func (o *InstallationJob) SetIsRunning(v bool) {
	o.IsRunning = &v
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *InstallationJob) GetNode() string {
	if o == nil || IsNil(o.Node) {
		var ret string
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationJob) GetNodeOk() (*string, bool) {
	if o == nil || IsNil(o.Node) {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *InstallationJob) HasNode() bool {
	if o != nil && !IsNil(o.Node) {
		return true
	}

	return false
}

// SetNode gets a reference to the given string and assigns it to the Node field.
func (o *InstallationJob) SetNode(v string) {
	o.Node = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *InstallationJob) GetPayload() InstallationJobPayload {
	if o == nil || IsNil(o.Payload) {
		var ret InstallationJobPayload
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationJob) GetPayloadOk() (*InstallationJobPayload, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *InstallationJob) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given InstallationJobPayload and assigns it to the Payload field.
func (o *InstallationJob) SetPayload(v InstallationJobPayload) {
	o.Payload = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *InstallationJob) GetProgress() Progress {
	if o == nil || IsNil(o.Progress) {
		var ret Progress
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationJob) GetProgressOk() (*Progress, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *InstallationJob) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given Progress and assigns it to the Progress field.
func (o *InstallationJob) SetProgress(v Progress) {
	o.Progress = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *InstallationJob) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationJob) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *InstallationJob) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *InstallationJob) SetServerId(v string) {
	o.ServerId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InstallationJob) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationJob) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InstallationJob) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *InstallationJob) SetStatus(v string) {
	o.Status = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *InstallationJob) GetTasks() []Task {
	if o == nil || IsNil(o.Tasks) {
		var ret []Task
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationJob) GetTasksOk() ([]Task, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *InstallationJob) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []Task and assigns it to the Tasks field.
func (o *InstallationJob) SetTasks(v []Task) {
	o.Tasks = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InstallationJob) GetType() JobType {
	if o == nil || IsNil(o.Type) {
		var ret JobType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationJob) GetTypeOk() (*JobType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InstallationJob) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given JobType and assigns it to the Type field.
func (o *InstallationJob) SetType(v JobType) {
	o.Type = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *InstallationJob) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationJob) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *InstallationJob) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *InstallationJob) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *InstallationJob) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationJob) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *InstallationJob) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *InstallationJob) SetUuid(v string) {
	o.Uuid = &v
}

func (o InstallationJob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstallationJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BareMetalId) {
		toSerialize["bareMetalId"] = o.BareMetalId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Flow) {
		toSerialize["flow"] = o.Flow
	}
	if !IsNil(o.IsRunning) {
		toSerialize["isRunning"] = o.IsRunning
	}
	if !IsNil(o.Node) {
		toSerialize["node"] = o.Node
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.ServerId) {
		toSerialize["serverId"] = o.ServerId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstallationJob) UnmarshalJSON(data []byte) (err error) {
	varInstallationJob := _InstallationJob{}

	err = json.Unmarshal(data, &varInstallationJob)

	if err != nil {
		return err
	}

	*o = InstallationJob(varInstallationJob)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bareMetalId")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "flow")
		delete(additionalProperties, "isRunning")
		delete(additionalProperties, "node")
		delete(additionalProperties, "payload")
		delete(additionalProperties, "progress")
		delete(additionalProperties, "serverId")
		delete(additionalProperties, "status")
		delete(additionalProperties, "tasks")
		delete(additionalProperties, "type")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "uuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstallationJob struct {
	value *InstallationJob
	isSet bool
}

func (v NullableInstallationJob) Get() *InstallationJob {
	return v.value
}

func (v *NullableInstallationJob) Set(val *InstallationJob) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallationJob) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallationJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallationJob(val *InstallationJob) *NullableInstallationJob {
	return &NullableInstallationJob{value: val, isSet: true}
}

func (v NullableInstallationJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallationJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


