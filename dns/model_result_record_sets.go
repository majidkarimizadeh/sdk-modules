/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// checks if the ResultRecordSets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultRecordSets{}

// ResultRecordSets struct for ResultRecordSets
type ResultRecordSets struct {
	// Array of resource record sets
	ResourceRecordSets []ResourceRecordSet `json:"resourceRecordSets"`
	AdditionalProperties map[string]interface{}
}

type _ResultRecordSets ResultRecordSets

// NewResultRecordSets instantiates a new ResultRecordSets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultRecordSets(resourceRecordSets []ResourceRecordSet) *ResultRecordSets {
	this := ResultRecordSets{}
	this.ResourceRecordSets = resourceRecordSets
	return &this
}

// NewResultRecordSetsWithDefaults instantiates a new ResultRecordSets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultRecordSetsWithDefaults() *ResultRecordSets {
	this := ResultRecordSets{}
	return &this
}

// GetResourceRecordSets returns the ResourceRecordSets field value
func (o *ResultRecordSets) GetResourceRecordSets() []ResourceRecordSet {
	if o == nil {
		var ret []ResourceRecordSet
		return ret
	}

	return o.ResourceRecordSets
}

// GetResourceRecordSetsOk returns a tuple with the ResourceRecordSets field value
// and a boolean to check if the value has been set.
func (o *ResultRecordSets) GetResourceRecordSetsOk() ([]ResourceRecordSet, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceRecordSets, true
}

// SetResourceRecordSets sets field value
func (o *ResultRecordSets) SetResourceRecordSets(v []ResourceRecordSet) {
	o.ResourceRecordSets = v
}

func (o ResultRecordSets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultRecordSets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceRecordSets"] = o.ResourceRecordSets

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResultRecordSets) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceRecordSets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultRecordSets := _ResultRecordSets{}

	err = json.Unmarshal(data, &varResultRecordSets)

	if err != nil {
		return err
	}

	*o = ResultRecordSets(varResultRecordSets)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "resourceRecordSets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResultRecordSets struct {
	value *ResultRecordSets
	isSet bool
}

func (v NullableResultRecordSets) Get() *ResultRecordSets {
	return v.value
}

func (v *NullableResultRecordSets) Set(val *ResultRecordSets) {
	v.value = val
	v.isSet = true
}

func (v NullableResultRecordSets) IsSet() bool {
	return v.isSet
}

func (v *NullableResultRecordSets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultRecordSets(val *ResultRecordSets) *NullableResultRecordSets {
	return &NullableResultRecordSets{value: val, isSet: true}
}

func (v NullableResultRecordSets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultRecordSets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


