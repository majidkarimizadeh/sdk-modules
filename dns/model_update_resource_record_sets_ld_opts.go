/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateResourceRecordSetsLdOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateResourceRecordSetsLdOpts{}

// UpdateResourceRecordSetsLdOpts struct for UpdateResourceRecordSetsLdOpts
type UpdateResourceRecordSetsLdOpts struct {
	// Array of resource record sets
	ResourceRecordSets []LdResourceRecordSet `json:"resourceRecordSets"`
	AdditionalProperties map[string]interface{}
}

type _UpdateResourceRecordSetsLdOpts UpdateResourceRecordSetsLdOpts

// NewUpdateResourceRecordSetsLdOpts instantiates a new UpdateResourceRecordSetsLdOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateResourceRecordSetsLdOpts(resourceRecordSets []LdResourceRecordSet) *UpdateResourceRecordSetsLdOpts {
	this := UpdateResourceRecordSetsLdOpts{}
	this.ResourceRecordSets = resourceRecordSets
	return &this
}

// NewUpdateResourceRecordSetsLdOptsWithDefaults instantiates a new UpdateResourceRecordSetsLdOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateResourceRecordSetsLdOptsWithDefaults() *UpdateResourceRecordSetsLdOpts {
	this := UpdateResourceRecordSetsLdOpts{}
	return &this
}

// GetResourceRecordSets returns the ResourceRecordSets field value
func (o *UpdateResourceRecordSetsLdOpts) GetResourceRecordSets() []LdResourceRecordSet {
	if o == nil {
		var ret []LdResourceRecordSet
		return ret
	}

	return o.ResourceRecordSets
}

// GetResourceRecordSetsOk returns a tuple with the ResourceRecordSets field value
// and a boolean to check if the value has been set.
func (o *UpdateResourceRecordSetsLdOpts) GetResourceRecordSetsOk() ([]LdResourceRecordSet, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceRecordSets, true
}

// SetResourceRecordSets sets field value
func (o *UpdateResourceRecordSetsLdOpts) SetResourceRecordSets(v []LdResourceRecordSet) {
	o.ResourceRecordSets = v
}

func (o UpdateResourceRecordSetsLdOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateResourceRecordSetsLdOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceRecordSets"] = o.ResourceRecordSets

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateResourceRecordSetsLdOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceRecordSets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateResourceRecordSetsLdOpts := _UpdateResourceRecordSetsLdOpts{}

	err = json.Unmarshal(data, &varUpdateResourceRecordSetsLdOpts)

	if err != nil {
		return err
	}

	*o = UpdateResourceRecordSetsLdOpts(varUpdateResourceRecordSetsLdOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "resourceRecordSets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateResourceRecordSetsLdOpts struct {
	value *UpdateResourceRecordSetsLdOpts
	isSet bool
}

func (v NullableUpdateResourceRecordSetsLdOpts) Get() *UpdateResourceRecordSetsLdOpts {
	return v.value
}

func (v *NullableUpdateResourceRecordSetsLdOpts) Set(val *UpdateResourceRecordSetsLdOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateResourceRecordSetsLdOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateResourceRecordSetsLdOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateResourceRecordSetsLdOpts(val *UpdateResourceRecordSetsLdOpts) *NullableUpdateResourceRecordSetsLdOpts {
	return &NullableUpdateResourceRecordSetsLdOpts{value: val, isSet: true}
}

func (v NullableUpdateResourceRecordSetsLdOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateResourceRecordSetsLdOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


