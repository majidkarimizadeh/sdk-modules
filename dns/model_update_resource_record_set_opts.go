/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateResourceRecordSetOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateResourceRecordSetOpts{}

// UpdateResourceRecordSetOpts struct for UpdateResourceRecordSetOpts
type UpdateResourceRecordSetOpts struct {
	// Array of resource record set content entries
	Content []string `json:"content"`
	Ttl Ttl `json:"ttl"`
	AdditionalProperties map[string]interface{}
}

type _UpdateResourceRecordSetOpts UpdateResourceRecordSetOpts

// NewUpdateResourceRecordSetOpts instantiates a new UpdateResourceRecordSetOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateResourceRecordSetOpts(content []string, ttl Ttl) *UpdateResourceRecordSetOpts {
	this := UpdateResourceRecordSetOpts{}
	this.Content = content
	this.Ttl = ttl
	return &this
}

// NewUpdateResourceRecordSetOptsWithDefaults instantiates a new UpdateResourceRecordSetOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateResourceRecordSetOptsWithDefaults() *UpdateResourceRecordSetOpts {
	this := UpdateResourceRecordSetOpts{}
	return &this
}

// GetContent returns the Content field value
func (o *UpdateResourceRecordSetOpts) GetContent() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *UpdateResourceRecordSetOpts) GetContentOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content, true
}

// SetContent sets field value
func (o *UpdateResourceRecordSetOpts) SetContent(v []string) {
	o.Content = v
}

// GetTtl returns the Ttl field value
func (o *UpdateResourceRecordSetOpts) GetTtl() Ttl {
	if o == nil {
		var ret Ttl
		return ret
	}

	return o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value
// and a boolean to check if the value has been set.
func (o *UpdateResourceRecordSetOpts) GetTtlOk() (*Ttl, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ttl, true
}

// SetTtl sets field value
func (o *UpdateResourceRecordSetOpts) SetTtl(v Ttl) {
	o.Ttl = v
}

func (o UpdateResourceRecordSetOpts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateResourceRecordSetOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	toSerialize["ttl"] = o.Ttl

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateResourceRecordSetOpts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"ttl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateResourceRecordSetOpts := _UpdateResourceRecordSetOpts{}

	err = json.Unmarshal(data, &varUpdateResourceRecordSetOpts)

	if err != nil {
		return err
	}

	*o = UpdateResourceRecordSetOpts(varUpdateResourceRecordSetOpts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		delete(additionalProperties, "ttl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateResourceRecordSetOpts struct {
	value *UpdateResourceRecordSetOpts
	isSet bool
}

func (v NullableUpdateResourceRecordSetOpts) Get() *UpdateResourceRecordSetOpts {
	return v.value
}

func (v *NullableUpdateResourceRecordSetOpts) Set(val *UpdateResourceRecordSetOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateResourceRecordSetOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateResourceRecordSetOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateResourceRecordSetOpts(val *UpdateResourceRecordSetOpts) *NullableUpdateResourceRecordSetOpts {
	return &NullableUpdateResourceRecordSetOpts{value: val, isSet: true}
}

func (v NullableUpdateResourceRecordSetOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateResourceRecordSetOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


