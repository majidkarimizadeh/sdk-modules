/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// Ttl Time to live of the resource record set
type Ttl int32

// List of ttl
const (
	TTL__60 Ttl = 60
	TTL__300 Ttl = 300
	TTL__1800 Ttl = 1800
	TTL__3600 Ttl = 3600
	TTL__14400 Ttl = 14400
	TTL__28800 Ttl = 28800
	TTL__43200 Ttl = 43200
	TTL__86400 Ttl = 86400
)

// All allowed values of Ttl enum
var AllowedTtlEnumValues = []Ttl{
	60,
	300,
	1800,
	3600,
	14400,
	28800,
	43200,
	86400,
}

func (v *Ttl) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Ttl(value)
	for _, existing := range AllowedTtlEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Ttl", value)
}

// NewTtlFromValue returns a pointer to a valid Ttl
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTtlFromValue(v int32) (*Ttl, error) {
	ev := Ttl(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Ttl: valid values are %v", v, AllowedTtlEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Ttl) IsValid() bool {
	for _, existing := range AllowedTtlEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ttl value
func (v Ttl) Ptr() *Ttl {
	return &v
}

type NullableTtl struct {
	value *Ttl
	isSet bool
}

func (v NullableTtl) Get() *Ttl {
	return v.value
}

func (v *NullableTtl) Set(val *Ttl) {
	v.value = val
	v.isSet = true
}

func (v NullableTtl) IsSet() bool {
	return v.isSet
}

func (v *NullableTtl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTtl(val *Ttl) *NullableTtl {
	return &NullableTtl{value: val, isSet: true}
}

func (v NullableTtl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTtl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

