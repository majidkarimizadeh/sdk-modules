/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// checks if the GeoContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoContent{}

// GeoContent GeoContent comprising of closest location ip addresses
type GeoContent struct {
	// Array of closest location ip addresses
	ClosestLocation []string `json:"closestLocation"`
	AdditionalProperties map[string]interface{}
}

type _GeoContent GeoContent

// NewGeoContent instantiates a new GeoContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoContent(closestLocation []string) *GeoContent {
	this := GeoContent{}
	this.ClosestLocation = closestLocation
	return &this
}

// NewGeoContentWithDefaults instantiates a new GeoContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoContentWithDefaults() *GeoContent {
	this := GeoContent{}
	return &this
}

// GetClosestLocation returns the ClosestLocation field value
func (o *GeoContent) GetClosestLocation() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ClosestLocation
}

// GetClosestLocationOk returns a tuple with the ClosestLocation field value
// and a boolean to check if the value has been set.
func (o *GeoContent) GetClosestLocationOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosestLocation, true
}

// SetClosestLocation sets field value
func (o *GeoContent) SetClosestLocation(v []string) {
	o.ClosestLocation = v
}

func (o GeoContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["closestLocation"] = o.ClosestLocation

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GeoContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"closestLocation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGeoContent := _GeoContent{}

	err = json.Unmarshal(data, &varGeoContent)

	if err != nil {
		return err
	}

	*o = GeoContent(varGeoContent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "closestLocation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGeoContent struct {
	value *GeoContent
	isSet bool
}

func (v NullableGeoContent) Get() *GeoContent {
	return v.value
}

func (v *NullableGeoContent) Set(val *GeoContent) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoContent) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoContent(val *GeoContent) *NullableGeoContent {
	return &NullableGeoContent{value: val, isSet: true}
}

func (v NullableGeoContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


