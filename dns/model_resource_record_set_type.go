/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ResourceRecordSetType Type of the resource record set
type ResourceRecordSetType string

// List of resourceRecordSetType
const (
	RESOURCERECORDSETTYPE_A ResourceRecordSetType = "A"
	RESOURCERECORDSETTYPE_AAAA ResourceRecordSetType = "AAAA"
	RESOURCERECORDSETTYPE_CAA ResourceRecordSetType = "CAA"
	RESOURCERECORDSETTYPE_CNAME ResourceRecordSetType = "CNAME"
	RESOURCERECORDSETTYPE_MX ResourceRecordSetType = "MX"
	RESOURCERECORDSETTYPE_NS ResourceRecordSetType = "NS"
	RESOURCERECORDSETTYPE_SRV ResourceRecordSetType = "SRV"
	RESOURCERECORDSETTYPE_TXT ResourceRecordSetType = "TXT"
	RESOURCERECORDSETTYPE_SOA ResourceRecordSetType = "SOA"
	RESOURCERECORDSETTYPE_DS ResourceRecordSetType = "DS"
	RESOURCERECORDSETTYPE_TLSA ResourceRecordSetType = "TLSA"
)

// All allowed values of ResourceRecordSetType enum
var AllowedResourceRecordSetTypeEnumValues = []ResourceRecordSetType{
	"A",
	"AAAA",
	"CAA",
	"CNAME",
	"MX",
	"NS",
	"SRV",
	"TXT",
	"SOA",
	"DS",
	"TLSA",
}

func (v *ResourceRecordSetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceRecordSetType(value)
	for _, existing := range AllowedResourceRecordSetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceRecordSetType", value)
}

// NewResourceRecordSetTypeFromValue returns a pointer to a valid ResourceRecordSetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceRecordSetTypeFromValue(v string) (*ResourceRecordSetType, error) {
	ev := ResourceRecordSetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceRecordSetType: valid values are %v", v, AllowedResourceRecordSetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceRecordSetType) IsValid() bool {
	for _, existing := range AllowedResourceRecordSetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to resourceRecordSetType value
func (v ResourceRecordSetType) Ptr() *ResourceRecordSetType {
	return &v
}

type NullableResourceRecordSetType struct {
	value *ResourceRecordSetType
	isSet bool
}

func (v NullableResourceRecordSetType) Get() *ResourceRecordSetType {
	return v.value
}

func (v *NullableResourceRecordSetType) Set(val *ResourceRecordSetType) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceRecordSetType) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceRecordSetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceRecordSetType(val *ResourceRecordSetType) *NullableResourceRecordSetType {
	return &NullableResourceRecordSetType{value: val, isSet: true}
}

func (v NullableResourceRecordSetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceRecordSetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

