/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the LdLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LdLinks{}

// LdLinks Links to related resource locations
type LdLinks struct {
	Self *Self `json:"self,omitempty"`
	Collection *Collection `json:"collection,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LdLinks LdLinks

// NewLdLinks instantiates a new LdLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdLinks() *LdLinks {
	this := LdLinks{}
	return &this
}

// NewLdLinksWithDefaults instantiates a new LdLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdLinksWithDefaults() *LdLinks {
	this := LdLinks{}
	return &this
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *LdLinks) GetSelf() Self {
	if o == nil || IsNil(o.Self) {
		var ret Self
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdLinks) GetSelfOk() (*Self, bool) {
	if o == nil || IsNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *LdLinks) HasSelf() bool {
	if o != nil && !IsNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given Self and assigns it to the Self field.
func (o *LdLinks) SetSelf(v Self) {
	o.Self = &v
}

// GetCollection returns the Collection field value if set, zero value otherwise.
func (o *LdLinks) GetCollection() Collection {
	if o == nil || IsNil(o.Collection) {
		var ret Collection
		return ret
	}
	return *o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdLinks) GetCollectionOk() (*Collection, bool) {
	if o == nil || IsNil(o.Collection) {
		return nil, false
	}
	return o.Collection, true
}

// HasCollection returns a boolean if a field has been set.
func (o *LdLinks) HasCollection() bool {
	if o != nil && !IsNil(o.Collection) {
		return true
	}

	return false
}

// SetCollection gets a reference to the given Collection and assigns it to the Collection field.
func (o *LdLinks) SetCollection(v Collection) {
	o.Collection = &v
}

func (o LdLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LdLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Self) {
		toSerialize["self"] = o.Self
	}
	if !IsNil(o.Collection) {
		toSerialize["collection"] = o.Collection
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LdLinks) UnmarshalJSON(data []byte) (err error) {
	varLdLinks := _LdLinks{}

	err = json.Unmarshal(data, &varLdLinks)

	if err != nil {
		return err
	}

	*o = LdLinks(varLdLinks)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "self")
		delete(additionalProperties, "collection")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLdLinks struct {
	value *LdLinks
	isSet bool
}

func (v NullableLdLinks) Get() *LdLinks {
	return v.value
}

func (v *NullableLdLinks) Set(val *LdLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableLdLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableLdLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdLinks(val *LdLinks) *NullableLdLinks {
	return &NullableLdLinks{value: val, isSet: true}
}

func (v NullableLdLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


