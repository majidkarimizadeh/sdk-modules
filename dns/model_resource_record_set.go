/*
DNS

>The base URL for this API is: **https://api.leaseweb.com/hosting/v2**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// checks if the ResourceRecordSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceRecordSet{}

// ResourceRecordSet struct for ResourceRecordSet
type ResourceRecordSet struct {
	// Name of the resource record set
	Name string `json:"name"`
	Type ResourceRecordSetType `json:"type"`
	// Array of resource record set content entries
	Content []string `json:"content"`
	Ttl Ttl `json:"ttl"`
	AdditionalProperties map[string]interface{}
}

type _ResourceRecordSet ResourceRecordSet

// NewResourceRecordSet instantiates a new ResourceRecordSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceRecordSet(name string, type_ ResourceRecordSetType, content []string, ttl Ttl) *ResourceRecordSet {
	this := ResourceRecordSet{}
	this.Name = name
	this.Type = type_
	this.Content = content
	this.Ttl = ttl
	return &this
}

// NewResourceRecordSetWithDefaults instantiates a new ResourceRecordSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceRecordSetWithDefaults() *ResourceRecordSet {
	this := ResourceRecordSet{}
	return &this
}

// GetName returns the Name field value
func (o *ResourceRecordSet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ResourceRecordSet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ResourceRecordSet) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ResourceRecordSet) GetType() ResourceRecordSetType {
	if o == nil {
		var ret ResourceRecordSetType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResourceRecordSet) GetTypeOk() (*ResourceRecordSetType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResourceRecordSet) SetType(v ResourceRecordSetType) {
	o.Type = v
}

// GetContent returns the Content field value
func (o *ResourceRecordSet) GetContent() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *ResourceRecordSet) GetContentOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content, true
}

// SetContent sets field value
func (o *ResourceRecordSet) SetContent(v []string) {
	o.Content = v
}

// GetTtl returns the Ttl field value
func (o *ResourceRecordSet) GetTtl() Ttl {
	if o == nil {
		var ret Ttl
		return ret
	}

	return o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value
// and a boolean to check if the value has been set.
func (o *ResourceRecordSet) GetTtlOk() (*Ttl, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ttl, true
}

// SetTtl sets field value
func (o *ResourceRecordSet) SetTtl(v Ttl) {
	o.Ttl = v
}

func (o ResourceRecordSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceRecordSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["content"] = o.Content
	toSerialize["ttl"] = o.Ttl

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResourceRecordSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"content",
		"ttl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceRecordSet := _ResourceRecordSet{}

	err = json.Unmarshal(data, &varResourceRecordSet)

	if err != nil {
		return err
	}

	*o = ResourceRecordSet(varResourceRecordSet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "content")
		delete(additionalProperties, "ttl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResourceRecordSet struct {
	value *ResourceRecordSet
	isSet bool
}

func (v NullableResourceRecordSet) Get() *ResourceRecordSet {
	return v.value
}

func (v *NullableResourceRecordSet) Set(val *ResourceRecordSet) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceRecordSet) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceRecordSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceRecordSet(val *ResourceRecordSet) *NullableResourceRecordSet {
	return &NullableResourceRecordSet{value: val, isSet: true}
}

func (v NullableResourceRecordSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceRecordSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


